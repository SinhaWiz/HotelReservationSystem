<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/HotelRentalSystem/src/main/java/com/hotel/dao/BlacklistedCustomerDAO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/HotelRentalSystem/src/main/java/com/hotel/dao/BlacklistedCustomerDAO.java" />
              <option name="originalContent" value="package com.hotel.dao;&#10;&#10;import com.hotel.model.BlacklistedCustomer;&#10;import com.hotel.util.DatabaseConnection;&#10;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;/**&#10; * Data Access Object for BlacklistedCustomer operations&#10; */&#10;public class BlacklistedCustomerDAO {&#10;    &#10;    // Blacklist a customer using stored procedure&#10;    public int blacklistCustomer(int customerId, String reason, String blacklistedBy, Date expiryDate) throws SQLException {&#10;        String sql = &quot;{CALL blacklist_customer(?, ?, ?, ?, ?, ?, ?)}&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             CallableStatement stmt = conn.prepareCall(sql)) {&#10;            &#10;            stmt.setInt(1, customerId);&#10;            stmt.setString(2, reason);&#10;            stmt.setString(3, blacklistedBy);&#10;            if (expiryDate != null) {&#10;                stmt.setDate(4, expiryDate);&#10;            } else {&#10;                stmt.setNull(4, Types.DATE);&#10;            }&#10;            stmt.registerOutParameter(5, Types.NUMERIC); // blacklist_id&#10;            stmt.registerOutParameter(6, Types.NUMERIC); // success&#10;            stmt.registerOutParameter(7, Types.VARCHAR); // message&#10;            &#10;            stmt.execute();&#10;            &#10;            int success = stmt.getInt(6);&#10;            String message = stmt.getString(7);&#10;            &#10;            if (success == 1) {&#10;                return stmt.getInt(5);&#10;            } else {&#10;                throw new SQLException(&quot;Failed to blacklist customer: &quot; + message);&#10;            }&#10;        }&#10;    }&#10;    &#10;    // Remove customer from blacklist using stored procedure&#10;    public void removeFromBlacklist(int customerId, String removedBy) throws SQLException {&#10;        String sql = &quot;{CALL remove_from_blacklist(?, ?, ?, ?)}&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             CallableStatement stmt = conn.prepareCall(sql)) {&#10;            &#10;            stmt.setInt(1, customerId);&#10;            stmt.setString(2, removedBy);&#10;            stmt.registerOutParameter(3, Types.NUMERIC); // success&#10;            stmt.registerOutParameter(4, Types.VARCHAR); // message&#10;            &#10;            stmt.execute();&#10;            &#10;            int success = stmt.getInt(3);&#10;            String message = stmt.getString(4);&#10;            &#10;            if (success != 1) {&#10;                throw new SQLException(&quot;Failed to remove customer from blacklist: &quot; + message);&#10;            }&#10;        }&#10;    }&#10;    &#10;    // Check if customer is blacklisted using function&#10;    public boolean isCustomerBlacklisted(int customerId) throws SQLException {&#10;        String sql = &quot;SELECT is_customer_blacklisted(?) FROM DUAL&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setInt(1, customerId);&#10;            &#10;            try (ResultSet rs = stmt.executeQuery()) {&#10;                if (rs.next()) {&#10;                    return &quot;Y&quot;.equals(rs.getString(1));&#10;                }&#10;            }&#10;        }&#10;        return false;&#10;    }&#10;    &#10;    // Find blacklist record by ID&#10;    public BlacklistedCustomer findById(int blacklistId) throws SQLException {&#10;        String sql = &quot;SELECT bl.blacklist_id, bl.customer_id, bl.blacklist_reason, &quot; +&#10;                    &quot;bl.blacklisted_by, bl.blacklist_date, bl.expiry_date, &quot; +&#10;                    &quot;bl.is_active, bl.notes, &quot; +&#10;                    &quot;c.first_name, c.last_name, c.email &quot; +&#10;                    &quot;FROM blacklisted_customers bl &quot; +&#10;                    &quot;JOIN customers c ON bl.customer_id = c.customer_id &quot; +&#10;                    &quot;WHERE bl.blacklist_id = ?&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setInt(1, blacklistId);&#10;            &#10;            try (ResultSet rs = stmt.executeQuery()) {&#10;                if (rs.next()) {&#10;                    return mapResultSetToBlacklistedCustomer(rs);&#10;                }&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;    &#10;    // Find blacklist records by customer ID&#10;    public List&lt;BlacklistedCustomer&gt; findByCustomerId(int customerId) throws SQLException {&#10;        String sql = &quot;SELECT bl.blacklist_id, bl.customer_id, bl.blacklist_reason, &quot; +&#10;                    &quot;bl.blacklisted_by, bl.blacklist_date, bl.expiry_date, &quot; +&#10;                    &quot;bl.is_active, bl.notes, &quot; +&#10;                    &quot;c.first_name, c.last_name, c.email &quot; +&#10;                    &quot;FROM blacklisted_customers bl &quot; +&#10;                    &quot;JOIN customers c ON bl.customer_id = c.customer_id &quot; +&#10;                    &quot;WHERE bl.customer_id = ? ORDER BY bl.blacklist_date DESC&quot;;&#10;        &#10;        List&lt;BlacklistedCustomer&gt; blacklistRecords = new ArrayList&lt;&gt;();&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setInt(1, customerId);&#10;            &#10;            try (ResultSet rs = stmt.executeQuery()) {&#10;                while (rs.next()) {&#10;                    blacklistRecords.add(mapResultSetToBlacklistedCustomer(rs));&#10;                }&#10;            }&#10;        }&#10;        return blacklistRecords;&#10;    }&#10;    &#10;    // Find all active blacklisted customers&#10;    public List&lt;BlacklistedCustomer&gt; findActiveBlacklistedCustomers() throws SQLException {&#10;        String sql = &quot;SELECT bl.blacklist_id, bl.customer_id, bl.blacklist_reason, &quot; +&#10;                    &quot;bl.blacklisted_by, bl.blacklist_date, bl.expiry_date, &quot; +&#10;                    &quot;bl.is_active, bl.notes, &quot; +&#10;                    &quot;c.first_name, c.last_name, c.email &quot; +&#10;                    &quot;FROM blacklisted_customers bl &quot; +&#10;                    &quot;JOIN customers c ON bl.customer_id = c.customer_id &quot; +&#10;                    &quot;WHERE bl.is_active = 'Y' &quot; +&#10;                    &quot;AND (bl.expiry_date IS NULL OR bl.expiry_date &gt; SYSDATE) &quot; +&#10;                    &quot;ORDER BY bl.blacklist_date DESC&quot;;&#10;        &#10;        List&lt;BlacklistedCustomer&gt; blacklistRecords = new ArrayList&lt;&gt;();&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            while (rs.next()) {&#10;                blacklistRecords.add(mapResultSetToBlacklistedCustomer(rs));&#10;            }&#10;        }&#10;        return blacklistRecords;&#10;    }&#10;    &#10;    // Find all blacklisted customers (including inactive)&#10;    public List&lt;BlacklistedCustomer&gt; findAllBlacklistedCustomers() throws SQLException {&#10;        String sql = &quot;SELECT bl.blacklist_id, bl.customer_id, bl.blacklist_reason, &quot; +&#10;                    &quot;bl.blacklisted_by, bl.blacklist_date, bl.expiry_date, &quot; +&#10;                    &quot;bl.is_active, bl.notes, &quot; +&#10;                    &quot;c.first_name, c.last_name, c.email &quot; +&#10;                    &quot;FROM blacklisted_customers bl &quot; +&#10;                    &quot;JOIN customers c ON bl.customer_id = c.customer_id &quot; +&#10;                    &quot;ORDER BY bl.blacklist_date DESC&quot;;&#10;        &#10;        List&lt;BlacklistedCustomer&gt; blacklistRecords = new ArrayList&lt;&gt;();&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            while (rs.next()) {&#10;                blacklistRecords.add(mapResultSetToBlacklistedCustomer(rs));&#10;            }&#10;        }&#10;        return blacklistRecords;&#10;    }&#10;    &#10;    // Find expired blacklist records&#10;    public List&lt;BlacklistedCustomer&gt; findExpiredBlacklistRecords() throws SQLException {&#10;        String sql = &quot;SELECT bl.blacklist_id, bl.customer_id, bl.blacklist_reason, &quot; +&#10;                    &quot;bl.blacklisted_by, bl.blacklist_date, bl.expiry_date, &quot; +&#10;                    &quot;bl.is_active, bl.notes, &quot; +&#10;                    &quot;c.first_name, c.last_name, c.email &quot; +&#10;                    &quot;FROM blacklisted_customers bl &quot; +&#10;                    &quot;JOIN customers c ON bl.customer_id = c.customer_id &quot; +&#10;                    &quot;WHERE bl.is_active = 'Y' &quot; +&#10;                    &quot;AND bl.expiry_date IS NOT NULL &quot; +&#10;                    &quot;AND bl.expiry_date &lt;= SYSDATE &quot; +&#10;                    &quot;ORDER BY bl.expiry_date&quot;;&#10;        &#10;        List&lt;BlacklistedCustomer&gt; expiredRecords = new ArrayList&lt;&gt;();&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            while (rs.next()) {&#10;                expiredRecords.add(mapResultSetToBlacklistedCustomer(rs));&#10;            }&#10;        }&#10;        return expiredRecords;&#10;    }&#10;    &#10;    // Search blacklisted customers by name or reason&#10;    public List&lt;BlacklistedCustomer&gt; searchBlacklistedCustomers(String searchTerm) throws SQLException {&#10;        String sql = &quot;SELECT bl.blacklist_id, bl.customer_id, bl.blacklist_reason, &quot; +&#10;                    &quot;bl.blacklisted_by, bl.blacklist_date, bl.expiry_date, &quot; +&#10;                    &quot;bl.is_active, bl.notes, &quot; +&#10;                    &quot;c.first_name, c.last_name, c.email &quot; +&#10;                    &quot;FROM blacklisted_customers bl &quot; +&#10;                    &quot;JOIN customers c ON bl.customer_id = c.customer_id &quot; +&#10;                    &quot;WHERE (UPPER(c.first_name) LIKE UPPER(?) &quot; +&#10;                    &quot;OR UPPER(c.last_name) LIKE UPPER(?) &quot; +&#10;                    &quot;OR UPPER(bl.blacklist_reason) LIKE UPPER(?)) &quot; +&#10;                    &quot;ORDER BY bl.blacklist_date DESC&quot;;&#10;        &#10;        List&lt;BlacklistedCustomer&gt; searchResults = new ArrayList&lt;&gt;();&#10;        String searchPattern = &quot;%&quot; + searchTerm + &quot;%&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setString(1, searchPattern);&#10;            stmt.setString(2, searchPattern);&#10;            stmt.setString(3, searchPattern);&#10;            &#10;            try (ResultSet rs = stmt.executeQuery()) {&#10;                while (rs.next()) {&#10;                    searchResults.add(mapResultSetToBlacklistedCustomer(rs));&#10;                }&#10;            }&#10;        }&#10;        return searchResults;&#10;    }&#10;    &#10;    // Update blacklist record&#10;    public void update(BlacklistedCustomer blacklistedCustomer) throws SQLException {&#10;        String sql = &quot;UPDATE blacklisted_customers SET blacklist_reason = ?, &quot; +&#10;                    &quot;expiry_date = ?, is_active = ?, notes = ? WHERE blacklist_id = ?&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setString(1, blacklistedCustomer.getBlacklistReason());&#10;            if (blacklistedCustomer.getExpiryDate() != null) {&#10;                stmt.setDate(2, new Date(blacklistedCustomer.getExpiryDate().getTime()));&#10;            } else {&#10;                stmt.setNull(2, Types.DATE);&#10;            }&#10;            stmt.setString(3, blacklistedCustomer.isActive() ? &quot;Y&quot; : &quot;N&quot;);&#10;            stmt.setString(4, blacklistedCustomer.getNotes());&#10;            stmt.setInt(5, blacklistedCustomer.getBlacklistId());&#10;            &#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;    &#10;    // Get blacklist statistics&#10;    public int getActiveBlacklistCount() throws SQLException {&#10;        String sql = &quot;SELECT COUNT(*) FROM blacklisted_customers &quot; +&#10;                    &quot;WHERE is_active = 'Y' &quot; +&#10;                    &quot;AND (expiry_date IS NULL OR expiry_date &gt; SYSDATE)&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            if (rs.next()) {&#10;                return rs.getInt(1);&#10;            }&#10;        }&#10;        return 0;&#10;    }&#10;    &#10;    // Get blacklist count by reason&#10;    public List&lt;String&gt; getBlacklistReasonStatistics() throws SQLException {&#10;        String sql = &quot;SELECT blacklist_reason, COUNT(*) as count &quot; +&#10;                    &quot;FROM blacklisted_customers &quot; +&#10;                    &quot;WHERE is_active = 'Y' &quot; +&#10;                    &quot;GROUP BY blacklist_reason &quot; +&#10;                    &quot;ORDER BY count DESC&quot;;&#10;        &#10;        List&lt;String&gt; statistics = new ArrayList&lt;&gt;();&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            while (rs.next()) {&#10;                statistics.add(rs.getString(&quot;blacklist_reason&quot;) + &quot;: &quot; + rs.getInt(&quot;count&quot;));&#10;            }&#10;        }&#10;        return statistics;&#10;    }&#10;    &#10;    // Helper method to map ResultSet to BlacklistedCustomer object&#10;    private BlacklistedCustomer mapResultSetToBlacklistedCustomer(ResultSet rs) throws SQLException {&#10;        BlacklistedCustomer blacklistedCustomer = new BlacklistedCustomer();&#10;        blacklistedCustomer.setBlacklistId(rs.getInt(&quot;blacklist_id&quot;));&#10;        blacklistedCustomer.setCustomerId(rs.getInt(&quot;customer_id&quot;));&#10;        blacklistedCustomer.setBlacklistReason(rs.getString(&quot;blacklist_reason&quot;));&#10;        blacklistedCustomer.setBlacklistedBy(rs.getString(&quot;blacklisted_by&quot;));&#10;        blacklistedCustomer.setBlacklistDate(rs.getTimestamp(&quot;blacklist_date&quot;));&#10;        blacklistedCustomer.setExpiryDate(rs.getTimestamp(&quot;expiry_date&quot;));&#10;        blacklistedCustomer.setActive(&quot;Y&quot;.equals(rs.getString(&quot;is_active&quot;)));&#10;        blacklistedCustomer.setNotes(rs.getString(&quot;notes&quot;));&#10;        return blacklistedCustomer;&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.hotel.dao;&#10;&#10;import com.hotel.model.BlacklistedCustomer;&#10;import com.hotel.util.DatabaseConnection;&#10;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;/**&#10; * Data Access Object for BlacklistedCustomer operations&#10; */&#10;public class BlacklistedCustomerDAO {&#10;    &#10;    // Blacklist a customer using stored procedure&#10;    public int blacklistCustomer(int customerId, String reason, String blacklistedBy, Date expiryDate) throws SQLException {&#10;        String sql = &quot;{CALL blacklist_customer(?, ?, ?, ?, ?, ?, ?)}&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             CallableStatement stmt = conn.prepareCall(sql)) {&#10;            &#10;            stmt.setInt(1, customerId);&#10;            stmt.setString(2, reason);&#10;            stmt.setString(3, blacklistedBy);&#10;            if (expiryDate != null) {&#10;                stmt.setDate(4, expiryDate);&#10;            } else {&#10;                stmt.setNull(4, Types.DATE);&#10;            }&#10;            stmt.registerOutParameter(5, Types.NUMERIC); // blacklist_id&#10;            stmt.registerOutParameter(6, Types.NUMERIC); // success&#10;            stmt.registerOutParameter(7, Types.VARCHAR); // message&#10;            &#10;            stmt.execute();&#10;            &#10;            int success = stmt.getInt(6);&#10;            String message = stmt.getString(7);&#10;            &#10;            if (success == 1) {&#10;                return stmt.getInt(5);&#10;            } else {&#10;                throw new SQLException(&quot;Failed to blacklist customer: &quot; + message);&#10;            }&#10;        }&#10;    }&#10;    &#10;    // Remove customer from blacklist using stored procedure&#10;    public void removeFromBlacklist(int customerId, String removedBy) throws SQLException {&#10;        String sql = &quot;{CALL remove_from_blacklist(?, ?, ?, ?)}&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             CallableStatement stmt = conn.prepareCall(sql)) {&#10;            &#10;            stmt.setInt(1, customerId);&#10;            stmt.setString(2, removedBy);&#10;            stmt.registerOutParameter(3, Types.NUMERIC); // success&#10;            stmt.registerOutParameter(4, Types.VARCHAR); // message&#10;            &#10;            stmt.execute();&#10;            &#10;            int success = stmt.getInt(3);&#10;            String message = stmt.getString(4);&#10;            &#10;            if (success != 1) {&#10;                throw new SQLException(&quot;Failed to remove customer from blacklist: &quot; + message);&#10;            }&#10;        }&#10;    }&#10;    &#10;    // Check if customer is blacklisted using function&#10;    public boolean isCustomerBlacklisted(int customerId) throws SQLException {&#10;        String sql = &quot;SELECT is_customer_blacklisted(?) FROM DUAL&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setInt(1, customerId);&#10;            &#10;            try (ResultSet rs = stmt.executeQuery()) {&#10;                if (rs.next()) {&#10;                    return &quot;Y&quot;.equals(rs.getString(1));&#10;                }&#10;            }&#10;        }&#10;        return false;&#10;    }&#10;    &#10;    // Find blacklist record by ID&#10;    public BlacklistedCustomer findById(int blacklistId) throws SQLException {&#10;        String sql = &quot;SELECT bl.blacklist_id, bl.customer_id, bl.blacklist_reason, &quot; +&#10;                    &quot;bl.blacklisted_by, bl.blacklist_date, bl.expiry_date, &quot; +&#10;                    &quot;bl.is_active, bl.notes, &quot; +&#10;                    &quot;c.first_name, c.last_name, c.email &quot; +&#10;                    &quot;FROM blacklisted_customers bl &quot; +&#10;                    &quot;JOIN customers c ON bl.customer_id = c.customer_id &quot; +&#10;                    &quot;WHERE bl.blacklist_id = ?&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setInt(1, blacklistId);&#10;            &#10;            try (ResultSet rs = stmt.executeQuery()) {&#10;                if (rs.next()) {&#10;                    return mapResultSetToBlacklistedCustomer(rs);&#10;                }&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;    &#10;    // Find blacklist records by customer ID&#10;    public List&lt;BlacklistedCustomer&gt; findByCustomerId(int customerId) throws SQLException {&#10;        String sql = &quot;SELECT bl.blacklist_id, bl.customer_id, bl.blacklist_reason, &quot; +&#10;                    &quot;bl.blacklisted_by, bl.blacklist_date, bl.expiry_date, &quot; +&#10;                    &quot;bl.is_active, bl.notes, &quot; +&#10;                    &quot;c.first_name, c.last_name, c.email &quot; +&#10;                    &quot;FROM blacklisted_customers bl &quot; +&#10;                    &quot;JOIN customers c ON bl.customer_id = c.customer_id &quot; +&#10;                    &quot;WHERE bl.customer_id = ? ORDER BY bl.blacklist_date DESC&quot;;&#10;        &#10;        List&lt;BlacklistedCustomer&gt; blacklistRecords = new ArrayList&lt;&gt;();&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setInt(1, customerId);&#10;            &#10;            try (ResultSet rs = stmt.executeQuery()) {&#10;                while (rs.next()) {&#10;                    blacklistRecords.add(mapResultSetToBlacklistedCustomer(rs));&#10;                }&#10;            }&#10;        }&#10;        return blacklistRecords;&#10;    }&#10;    &#10;    // Find all active blacklisted customers&#10;    public List&lt;BlacklistedCustomer&gt; findActiveBlacklistedCustomers() throws SQLException {&#10;        String sql = &quot;SELECT bl.blacklist_id, bl.customer_id, bl.blacklist_reason, &quot; +&#10;                    &quot;bl.blacklisted_by, bl.blacklist_date, bl.expiry_date, &quot; +&#10;                    &quot;bl.is_active, bl.notes, &quot; +&#10;                    &quot;c.first_name, c.last_name, c.email &quot; +&#10;                    &quot;FROM blacklisted_customers bl &quot; +&#10;                    &quot;JOIN customers c ON bl.customer_id = c.customer_id &quot; +&#10;                    &quot;WHERE bl.is_active = 'Y' &quot; +&#10;                    &quot;AND (bl.expiry_date IS NULL OR bl.expiry_date &gt; SYSDATE) &quot; +&#10;                    &quot;ORDER BY bl.blacklist_date DESC&quot;;&#10;        &#10;        List&lt;BlacklistedCustomer&gt; blacklistRecords = new ArrayList&lt;&gt;();&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            while (rs.next()) {&#10;                blacklistRecords.add(mapResultSetToBlacklistedCustomer(rs));&#10;            }&#10;        }&#10;        return blacklistRecords;&#10;    }&#10;    &#10;    // Find all blacklisted customers (including inactive)&#10;    public List&lt;BlacklistedCustomer&gt; findAllBlacklistedCustomers() throws SQLException {&#10;        String sql = &quot;SELECT bl.blacklist_id, bl.customer_id, bl.blacklist_reason, &quot; +&#10;                    &quot;bl.blacklisted_by, bl.blacklist_date, bl.expiry_date, &quot; +&#10;                    &quot;bl.is_active, bl.notes, &quot; +&#10;                    &quot;c.first_name, c.last_name, c.email &quot; +&#10;                    &quot;FROM blacklisted_customers bl &quot; +&#10;                    &quot;JOIN customers c ON bl.customer_id = c.customer_id &quot; +&#10;                    &quot;ORDER BY bl.blacklist_date DESC&quot;;&#10;        &#10;        List&lt;BlacklistedCustomer&gt; blacklistRecords = new ArrayList&lt;&gt;();&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            while (rs.next()) {&#10;                blacklistRecords.add(mapResultSetToBlacklistedCustomer(rs));&#10;            }&#10;        }&#10;        return blacklistRecords;&#10;    }&#10;    &#10;    // Find expired blacklist records&#10;    public List&lt;BlacklistedCustomer&gt; findExpiredBlacklistRecords() throws SQLException {&#10;        String sql = &quot;SELECT bl.blacklist_id, bl.customer_id, bl.blacklist_reason, &quot; +&#10;                    &quot;bl.blacklisted_by, bl.blacklist_date, bl.expiry_date, &quot; +&#10;                    &quot;bl.is_active, bl.notes, &quot; +&#10;                    &quot;c.first_name, c.last_name, c.email &quot; +&#10;                    &quot;FROM blacklisted_customers bl &quot; +&#10;                    &quot;JOIN customers c ON bl.customer_id = c.customer_id &quot; +&#10;                    &quot;WHERE bl.is_active = 'Y' &quot; +&#10;                    &quot;AND bl.expiry_date IS NOT NULL &quot; +&#10;                    &quot;AND bl.expiry_date &lt;= SYSDATE &quot; +&#10;                    &quot;ORDER BY bl.expiry_date&quot;;&#10;        &#10;        List&lt;BlacklistedCustomer&gt; expiredRecords = new ArrayList&lt;&gt;();&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            while (rs.next()) {&#10;                expiredRecords.add(mapResultSetToBlacklistedCustomer(rs));&#10;            }&#10;        }&#10;        return expiredRecords;&#10;    }&#10;    &#10;    // Search blacklisted customers by name or reason&#10;    public List&lt;BlacklistedCustomer&gt; searchBlacklistedCustomers(String searchTerm) throws SQLException {&#10;        String sql = &quot;SELECT bl.blacklist_id, bl.customer_id, bl.blacklist_reason, &quot; +&#10;                    &quot;bl.blacklisted_by, bl.blacklist_date, bl.expiry_date, &quot; +&#10;                    &quot;bl.is_active, bl.notes, &quot; +&#10;                    &quot;c.first_name, c.last_name, c.email &quot; +&#10;                    &quot;FROM blacklisted_customers bl &quot; +&#10;                    &quot;JOIN customers c ON bl.customer_id = c.customer_id &quot; +&#10;                    &quot;WHERE (UPPER(c.first_name) LIKE UPPER(?) &quot; +&#10;                    &quot;OR UPPER(c.last_name) LIKE UPPER(?) &quot; +&#10;                    &quot;OR UPPER(bl.blacklist_reason) LIKE UPPER(?)) &quot; +&#10;                    &quot;ORDER BY bl.blacklist_date DESC&quot;;&#10;        &#10;        List&lt;BlacklistedCustomer&gt; searchResults = new ArrayList&lt;&gt;();&#10;        String searchPattern = &quot;%&quot; + searchTerm + &quot;%&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setString(1, searchPattern);&#10;            stmt.setString(2, searchPattern);&#10;            stmt.setString(3, searchPattern);&#10;            &#10;            try (ResultSet rs = stmt.executeQuery()) {&#10;                while (rs.next()) {&#10;                    searchResults.add(mapResultSetToBlacklistedCustomer(rs));&#10;                }&#10;            }&#10;        }&#10;        return searchResults;&#10;    }&#10;    &#10;    // Update blacklist record&#10;    public void update(BlacklistedCustomer blacklistedCustomer) throws SQLException {&#10;        String sql = &quot;UPDATE blacklisted_customers SET blacklist_reason = ?, &quot; +&#10;                    &quot;expiry_date = ?, is_active = ?, notes = ? WHERE blacklist_id = ?&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setString(1, blacklistedCustomer.getBlacklistReason());&#10;            if (blacklistedCustomer.getExpiryDate() != null) {&#10;                stmt.setDate(2, new Date(blacklistedCustomer.getExpiryDate().getTime()));&#10;            } else {&#10;                stmt.setNull(2, Types.DATE);&#10;            }&#10;            stmt.setString(3, blacklistedCustomer.isActive() ? &quot;Y&quot; : &quot;N&quot;);&#10;            stmt.setString(4, blacklistedCustomer.getNotes());&#10;            stmt.setInt(5, blacklistedCustomer.getBlacklistId());&#10;            &#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;    &#10;    // Get blacklist statistics&#10;    public int getActiveBlacklistCount() throws SQLException {&#10;        String sql = &quot;SELECT COUNT(*) FROM blacklisted_customers &quot; +&#10;                    &quot;WHERE is_active = 'Y' &quot; +&#10;                    &quot;AND (expiry_date IS NULL OR expiry_date &gt; SYSDATE)&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            if (rs.next()) {&#10;                return rs.getInt(1);&#10;            }&#10;        }&#10;        return 0;&#10;    }&#10;    &#10;    // Get blacklist count by reason&#10;    public List&lt;String&gt; getBlacklistReasonStatistics() throws SQLException {&#10;        String sql = &quot;SELECT blacklist_reason, COUNT(*) as count &quot; +&#10;                    &quot;FROM blacklisted_customers &quot; +&#10;                    &quot;WHERE is_active = 'Y' &quot; +&#10;                    &quot;GROUP BY blacklist_reason &quot; +&#10;                    &quot;ORDER BY count DESC&quot;;&#10;        &#10;        List&lt;String&gt; statistics = new ArrayList&lt;&gt;();&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            while (rs.next()) {&#10;                statistics.add(rs.getString(&quot;blacklist_reason&quot;) + &quot;: &quot; + rs.getInt(&quot;count&quot;));&#10;            }&#10;        }&#10;        return statistics;&#10;    }&#10;    &#10;    // Create a new blacklist record&#10;    public void create(int customerId, String reason, String blacklistedBy, Date expiryDate) throws SQLException {&#10;        blacklistCustomer(customerId, reason, blacklistedBy, expiryDate);&#10;    }&#10;    &#10;    // Remove a customer from the blacklist (soft delete)&#10;    public void remove(int customerId, String removedBy) throws SQLException {&#10;        String sql = &quot;UPDATE blacklisted_customers SET is_active = 'N', removed_by = ?, &quot; +&#10;                    &quot;removed_date = SYSDATE WHERE customer_id = ? AND is_active = 'Y'&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement pstmt = conn.prepareStatement(sql)) {&#10;            &#10;            pstmt.setString(1, removedBy);&#10;            pstmt.setInt(2, customerId);&#10;            &#10;            pstmt.executeUpdate();&#10;        }&#10;    }&#10;    &#10;    // Find all blacklisted customers (active only)&#10;    public List&lt;BlacklistedCustomer&gt; findAll() throws SQLException {&#10;        String sql = &quot;SELECT b.*, c.first_name, c.last_name, c.email, c.phone &quot; +&#10;                    &quot;FROM blacklisted_customers b &quot; +&#10;                    &quot;JOIN customers c ON b.customer_id = c.customer_id &quot; +&#10;                    &quot;WHERE b.is_active = 'Y'&quot;;&#10;        List&lt;BlacklistedCustomer&gt; blacklistedCustomers = new ArrayList&lt;&gt;();&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement pstmt = conn.prepareStatement(sql);&#10;             ResultSet rs = pstmt.executeQuery()) {&#10;            &#10;            while (rs.next()) {&#10;                BlacklistedCustomer customer = mapResultSetToBlacklistedCustomer(rs);&#10;                customer.setCustomerEmail(rs.getString(&quot;email&quot;));&#10;                blacklistedCustomers.add(customer);&#10;            }&#10;        }&#10;        return blacklistedCustomers;&#10;    }&#10;    &#10;    // Helper method to map ResultSet to BlacklistedCustomer object&#10;    private BlacklistedCustomer mapResultSetToBlacklistedCustomer(ResultSet rs) throws SQLException {&#10;        BlacklistedCustomer blacklistedCustomer = new BlacklistedCustomer();&#10;        blacklistedCustomer.setBlacklistId(rs.getInt(&quot;blacklist_id&quot;));&#10;        blacklistedCustomer.setCustomerId(rs.getInt(&quot;customer_id&quot;));&#10;        blacklistedCustomer.setBlacklistReason(rs.getString(&quot;blacklist_reason&quot;));&#10;        blacklistedCustomer.setBlacklistedBy(rs.getString(&quot;blacklisted_by&quot;));&#10;        blacklistedCustomer.setBlacklistDate(rs.getTimestamp(&quot;blacklist_date&quot;));&#10;        blacklistedCustomer.setExpiryDate(rs.getTimestamp(&quot;expiry_date&quot;));&#10;        blacklistedCustomer.setActive(&quot;Y&quot;.equals(rs.getString(&quot;is_active&quot;)));&#10;        blacklistedCustomer.setNotes(rs.getString(&quot;notes&quot;));&#10;        return blacklistedCustomer;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/HotelRentalSystem/src/main/java/com/hotel/dao/BookingDAO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/HotelRentalSystem/src/main/java/com/hotel/dao/BookingDAO.java" />
              <option name="originalContent" value="package com.hotel.dao;&#10;&#10;import com.hotel.model.Booking;&#10;import com.hotel.util.DatabaseConnection;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.Date;&#10;import java.util.List;&#10;&#10;public class BookingDAO {&#10;    public Booking create(Booking booking) throws SQLException {&#10;        String sql = &quot;INSERT INTO bookings (booking_id, customer_id, room_id, check_in_date, &quot; +&#10;                    &quot;check_out_date, booking_status, total_amount, discount_applied, &quot; +&#10;                    &quot;extra_charges, created_by) VALUES (booking_seq.NEXTVAL, ?, ?, ?, ?, ?, ?, ?, ?, ?)&quot;;&#10;        &#10;        Connection conn = null;&#10;        PreparedStatement pstmt = null;&#10;        ResultSet rs = null;&#10;        &#10;        try {&#10;            conn = DatabaseConnection.getConnection();&#10;            pstmt = conn.prepareStatement(sql, new String[]{&quot;booking_id&quot;});&#10;            &#10;            pstmt.setInt(1, booking.getCustomerId());&#10;            pstmt.setInt(2, booking.getRoomId());&#10;            pstmt.setDate(3, new java.sql.Date(booking.getCheckInDate().getTime()));&#10;            pstmt.setDate(4, new java.sql.Date(booking.getCheckOutDate().getTime()));&#10;            pstmt.setString(5, booking.getBookingStatus());&#10;            pstmt.setDouble(6, booking.getTotalAmount());&#10;            pstmt.setDouble(7, booking.getDiscountApplied());&#10;            pstmt.setDouble(8, booking.getExtraCharges());&#10;            pstmt.setString(9, booking.getCreatedBy());&#10;            &#10;            int rowsAffected = pstmt.executeUpdate();&#10;            &#10;            if (rowsAffected &gt; 0) {&#10;                rs = pstmt.getGeneratedKeys();&#10;                if (rs.next()) {&#10;                    booking.setBookingId(rs.getLong(1));&#10;                    return booking;&#10;                }&#10;            }&#10;            &#10;            return null;&#10;        } finally {&#10;            DatabaseConnection.closeResources(conn, pstmt, rs);&#10;        }&#10;    }&#10;&#10;    public Booking findById(int bookingId) throws SQLException {&#10;        String sql = &quot;SELECT * FROM bookings WHERE booking_id = ?&quot;;&#10;        &#10;        Connection conn = null;&#10;        PreparedStatement pstmt = null;&#10;        ResultSet rs = null;&#10;        &#10;        try {&#10;            conn = DatabaseConnection.getConnection();&#10;            pstmt = conn.prepareStatement(sql);&#10;            pstmt.setInt(1, bookingId);&#10;            &#10;            rs = pstmt.executeQuery();&#10;            &#10;            if (rs.next()) {&#10;                return mapResultSetToBooking(rs);&#10;            }&#10;            &#10;            return null;&#10;        } finally {&#10;            DatabaseConnection.closeResources(conn, pstmt, rs);&#10;        }&#10;    }&#10;&#10;    public List&lt;Booking&gt; findByCustomerId(int customerId) throws SQLException {&#10;        String sql = &quot;SELECT * FROM bookings WHERE customer_id = ? ORDER BY check_in_date DESC&quot;;&#10;        &#10;        Connection conn = null;&#10;        PreparedStatement pstmt = null;&#10;        ResultSet rs = null;&#10;        List&lt;Booking&gt; bookings = new ArrayList&lt;&gt;();&#10;        &#10;        try {&#10;            conn = DatabaseConnection.getConnection();&#10;            pstmt = conn.prepareStatement(sql);&#10;            pstmt.setInt(1, customerId);&#10;            &#10;            rs = pstmt.executeQuery();&#10;            &#10;            while (rs.next()) {&#10;                bookings.add(mapResultSetToBooking(rs));&#10;            }&#10;            &#10;            return bookings;&#10;        } finally {&#10;            DatabaseConnection.closeResources(conn, pstmt, rs);&#10;        }&#10;    }&#10;&#10;    public List&lt;Booking&gt; findByRoomIdAndDates(int roomId, Date startDate, Date endDate) throws SQLException {&#10;        String sql = &quot;SELECT * FROM bookings WHERE room_id = ? AND &quot; +&#10;                    &quot;((check_in_date BETWEEN ? AND ?) OR &quot; +&#10;                    &quot;(check_out_date BETWEEN ? AND ?) OR &quot; +&#10;                    &quot;(check_in_date &lt;= ? AND check_out_date &gt;= ?))&quot;;&#10;        &#10;        Connection conn = null;&#10;        PreparedStatement pstmt = null;&#10;        ResultSet rs = null;&#10;        List&lt;Booking&gt; bookings = new ArrayList&lt;&gt;();&#10;        &#10;        try {&#10;            conn = DatabaseConnection.getConnection();&#10;            pstmt = conn.prepareStatement(sql);&#10;            &#10;            pstmt.setInt(1, roomId);&#10;            pstmt.setDate(2, new java.sql.Date(startDate.getTime()));&#10;            pstmt.setDate(3, new java.sql.Date(endDate.getTime()));&#10;            pstmt.setDate(4, new java.sql.Date(startDate.getTime()));&#10;            pstmt.setDate(5, new java.sql.Date(endDate.getTime()));&#10;            pstmt.setDate(6, new java.sql.Date(startDate.getTime()));&#10;            pstmt.setDate(7, new java.sql.Date(endDate.getTime()));&#10;            &#10;            rs = pstmt.executeQuery();&#10;            &#10;            while (rs.next()) {&#10;                bookings.add(mapResultSetToBooking(rs));&#10;            }&#10;            &#10;            return bookings;&#10;        } finally {&#10;            DatabaseConnection.closeResources(conn, pstmt, rs);&#10;        }&#10;    }&#10;&#10;    public List&lt;Booking&gt; getCurrentBookings() throws SQLException {&#10;        String sql = &quot;SELECT * FROM bookings WHERE check_out_date &gt;= TRUNC(SYSDATE) &quot; +&#10;                    &quot;AND booking_status IN ('CONFIRMED', 'CHECKED_IN') &quot; +&#10;                    &quot;ORDER BY check_in_date&quot;;&#10;&#10;        Connection conn = null;&#10;        PreparedStatement pstmt = null;&#10;        ResultSet rs = null;&#10;        List&lt;Booking&gt; bookings = new ArrayList&lt;&gt;();&#10;        &#10;        try {&#10;            conn = DatabaseConnection.getConnection();&#10;            pstmt = conn.prepareStatement(sql);&#10;            rs = pstmt.executeQuery();&#10;            &#10;            while (rs.next()) {&#10;                bookings.add(mapResultSetToBooking(rs));&#10;            }&#10;            &#10;            return bookings;&#10;        } finally {&#10;            DatabaseConnection.closeResources(conn, pstmt, rs);&#10;        }&#10;    }&#10;&#10;    public List&lt;Booking&gt; getExpiredBookings() throws SQLException {&#10;        String sql = &quot;SELECT * FROM bookings WHERE check_out_date &lt; TRUNC(SYSDATE) &quot; +&#10;                    &quot;AND booking_status NOT IN ('COMPLETED', 'CANCELLED') &quot; +&#10;                    &quot;ORDER BY check_out_date DESC&quot;;&#10;        &#10;        Connection conn = null;&#10;        PreparedStatement pstmt = null;&#10;        ResultSet rs = null;&#10;        List&lt;Booking&gt; bookings = new ArrayList&lt;&gt;();&#10;        &#10;        try {&#10;            conn = DatabaseConnection.getConnection();&#10;            pstmt = conn.prepareStatement(sql);&#10;            rs = pstmt.executeQuery();&#10;            &#10;            while (rs.next()) {&#10;                bookings.add(mapResultSetToBooking(rs));&#10;            }&#10;            &#10;            return bookings;&#10;        } finally {&#10;            DatabaseConnection.closeResources(conn, pstmt, rs);&#10;        }&#10;    }&#10;&#10;    public void update(Booking booking) throws SQLException {&#10;        String sql = &quot;UPDATE bookings SET customer_id = ?, room_id = ?, check_in_date = ?, &quot; +&#10;                    &quot;check_out_date = ?, booking_status = ?, total_amount = ?, &quot; +&#10;                    &quot;discount_applied = ?, extra_charges = ? WHERE booking_id = ?&quot;;&#10;        &#10;        Connection conn = null;&#10;        PreparedStatement pstmt = null;&#10;        &#10;        try {&#10;            conn = DatabaseConnection.getConnection();&#10;            pstmt = conn.prepareStatement(sql);&#10;            &#10;            pstmt.setInt(1, booking.getCustomerId());&#10;            pstmt.setInt(2, booking.getRoomId());&#10;            pstmt.setDate(3, new java.sql.Date(booking.getCheckInDate().getTime()));&#10;            pstmt.setDate(4, new java.sql.Date(booking.getCheckOutDate().getTime()));&#10;            pstmt.setString(5, booking.getBookingStatus());&#10;            pstmt.setDouble(6, booking.getTotalAmount());&#10;            pstmt.setDouble(7, booking.getDiscountApplied());&#10;            pstmt.setDouble(8, booking.getExtraCharges());&#10;            pstmt.setLong(9, booking.getBookingId());&#10;            &#10;            pstmt.executeUpdate();&#10;        } finally {&#10;            DatabaseConnection.closeResources(conn, pstmt);&#10;        }&#10;    }&#10;&#10;    public void cancel(int bookingId) throws SQLException {&#10;        String sql = &quot;UPDATE bookings SET booking_status = 'CANCELLED' WHERE booking_id = ?&quot;;&#10;        &#10;        Connection conn = null;&#10;        PreparedStatement pstmt = null;&#10;        &#10;        try {&#10;            conn = DatabaseConnection.getConnection();&#10;            pstmt = conn.prepareStatement(sql);&#10;            pstmt.setInt(1, bookingId);&#10;            pstmt.executeUpdate();&#10;        } finally {&#10;            DatabaseConnection.closeResources(conn, pstmt);&#10;        }&#10;    }&#10;&#10;    public List&lt;Booking&gt; getAll() throws SQLException {&#10;        String sql = &quot;SELECT * FROM bookings ORDER BY booking_id DESC&quot;;&#10;        &#10;        Connection conn = null;&#10;        PreparedStatement pstmt = null;&#10;        ResultSet rs = null;&#10;        List&lt;Booking&gt; bookings = new ArrayList&lt;&gt;();&#10;        &#10;        try {&#10;            conn = DatabaseConnection.getConnection();&#10;            pstmt = conn.prepareStatement(sql);&#10;            rs = pstmt.executeQuery();&#10;            &#10;            while (rs.next()) {&#10;                bookings.add(mapResultSetToBooking(rs));&#10;            }&#10;            &#10;            return bookings;&#10;        } finally {&#10;            DatabaseConnection.closeResources(conn, pstmt, rs);&#10;        }&#10;    }&#10;&#10;    private Booking mapResultSetToBooking(ResultSet rs) throws SQLException {&#10;        Booking booking = new Booking();&#10;&#10;        booking.setBookingId(rs.getLong(&quot;booking_id&quot;));&#10;        booking.setCustomerId(rs.getInt(&quot;customer_id&quot;));&#10;        booking.setRoomId(rs.getInt(&quot;room_id&quot;));&#10;        booking.setCheckInDate(rs.getDate(&quot;check_in_date&quot;));&#10;        booking.setCheckOutDate(rs.getDate(&quot;check_out_date&quot;));&#10;        booking.setBookingStatus(rs.getString(&quot;booking_status&quot;));&#10;        booking.setTotalAmount(rs.getDouble(&quot;total_amount&quot;));&#10;        booking.setDiscountApplied(rs.getDouble(&quot;discount_applied&quot;));&#10;        booking.setExtraCharges(rs.getDouble(&quot;extra_charges&quot;));&#10;        booking.setCreatedDate(rs.getDate(&quot;created_date&quot;));&#10;        booking.setCreatedBy(rs.getString(&quot;created_by&quot;));&#10;&#10;        return booking;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.hotel.dao;&#13;&#10;&#13;&#10;import com.hotel.model.Booking;&#13;&#10;import com.hotel.util.DatabaseConnection;&#13;&#10;import java.sql.*;&#13;&#10;import java.util.ArrayList;&#13;&#10;import java.util.Date;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public class BookingDAO {&#13;&#10;    public Booking create(Booking booking) throws SQLException {&#13;&#10;        String sql = &quot;INSERT INTO bookings (booking_id, customer_id, room_id, check_in_date, &quot; +&#13;&#10;                    &quot;check_out_date, booking_status, total_amount, discount_applied, &quot; +&#13;&#10;                    &quot;extra_charges, created_by) VALUES (booking_seq.NEXTVAL, ?, ?, ?, ?, ?, ?, ?, ?, ?)&quot;;&#13;&#10;        &#13;&#10;        Connection conn = null;&#13;&#10;        PreparedStatement pstmt = null;&#13;&#10;        ResultSet rs = null;&#13;&#10;        &#13;&#10;        try {&#13;&#10;            conn = DatabaseConnection.getConnection();&#13;&#10;            pstmt = conn.prepareStatement(sql, new String[]{&quot;booking_id&quot;});&#13;&#10;            &#13;&#10;            pstmt.setInt(1, booking.getCustomerId());&#13;&#10;            pstmt.setInt(2, booking.getRoomId());&#13;&#10;            pstmt.setDate(3, new java.sql.Date(booking.getCheckInDate().getTime()));&#13;&#10;            pstmt.setDate(4, new java.sql.Date(booking.getCheckOutDate().getTime()));&#13;&#10;            pstmt.setString(5, booking.getBookingStatus());&#13;&#10;            pstmt.setDouble(6, booking.getTotalAmount());&#13;&#10;            pstmt.setDouble(7, booking.getDiscountApplied());&#13;&#10;            pstmt.setDouble(8, booking.getExtraCharges());&#13;&#10;            pstmt.setString(9, booking.getCreatedBy());&#13;&#10;            &#13;&#10;            int rowsAffected = pstmt.executeUpdate();&#13;&#10;            &#13;&#10;            if (rowsAffected &gt; 0) {&#13;&#10;                rs = pstmt.getGeneratedKeys();&#13;&#10;                if (rs.next()) {&#13;&#10;                    booking.setBookingId(rs.getLong(1));&#13;&#10;                    return booking;&#13;&#10;                }&#13;&#10;            }&#13;&#10;            &#13;&#10;            return null;&#13;&#10;        } finally {&#13;&#10;            DatabaseConnection.closeResources(conn, pstmt, rs);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public Booking findById(int bookingId) throws SQLException {&#13;&#10;        String sql = &quot;SELECT * FROM bookings WHERE booking_id = ?&quot;;&#13;&#10;        &#13;&#10;        Connection conn = null;&#13;&#10;        PreparedStatement pstmt = null;&#13;&#10;        ResultSet rs = null;&#13;&#10;        &#13;&#10;        try {&#13;&#10;            conn = DatabaseConnection.getConnection();&#13;&#10;            pstmt = conn.prepareStatement(sql);&#13;&#10;            pstmt.setInt(1, bookingId);&#13;&#10;            &#13;&#10;            rs = pstmt.executeQuery();&#13;&#10;            &#13;&#10;            if (rs.next()) {&#13;&#10;                return mapResultSetToBooking(rs);&#13;&#10;            }&#13;&#10;            &#13;&#10;            return null;&#13;&#10;        } finally {&#13;&#10;            DatabaseConnection.closeResources(conn, pstmt, rs);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public List&lt;Booking&gt; findByCustomerId(int customerId) throws SQLException {&#13;&#10;        String sql = &quot;SELECT * FROM bookings WHERE customer_id = ? ORDER BY check_in_date DESC&quot;;&#13;&#10;        &#13;&#10;        Connection conn = null;&#13;&#10;        PreparedStatement pstmt = null;&#13;&#10;        ResultSet rs = null;&#13;&#10;        List&lt;Booking&gt; bookings = new ArrayList&lt;&gt;();&#13;&#10;        &#13;&#10;        try {&#13;&#10;            conn = DatabaseConnection.getConnection();&#13;&#10;            pstmt = conn.prepareStatement(sql);&#13;&#10;            pstmt.setInt(1, customerId);&#13;&#10;            &#13;&#10;            rs = pstmt.executeQuery();&#13;&#10;            &#13;&#10;            while (rs.next()) {&#13;&#10;                bookings.add(mapResultSetToBooking(rs));&#13;&#10;            }&#13;&#10;            &#13;&#10;            return bookings;&#13;&#10;        } finally {&#13;&#10;            DatabaseConnection.closeResources(conn, pstmt, rs);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public List&lt;Booking&gt; findByRoomIdAndDates(int roomId, Date startDate, Date endDate) throws SQLException {&#13;&#10;        String sql = &quot;SELECT * FROM bookings WHERE room_id = ? AND &quot; +&#13;&#10;                    &quot;((check_in_date BETWEEN ? AND ?) OR &quot; +&#13;&#10;                    &quot;(check_out_date BETWEEN ? AND ?) OR &quot; +&#13;&#10;                    &quot;(check_in_date &lt;= ? AND check_out_date &gt;= ?))&quot;;&#13;&#10;        &#13;&#10;        Connection conn = null;&#13;&#10;        PreparedStatement pstmt = null;&#13;&#10;        ResultSet rs = null;&#13;&#10;        List&lt;Booking&gt; bookings = new ArrayList&lt;&gt;();&#13;&#10;        &#13;&#10;        try {&#13;&#10;            conn = DatabaseConnection.getConnection();&#13;&#10;            pstmt = conn.prepareStatement(sql);&#13;&#10;            &#13;&#10;            pstmt.setInt(1, roomId);&#13;&#10;            pstmt.setDate(2, new java.sql.Date(startDate.getTime()));&#13;&#10;            pstmt.setDate(3, new java.sql.Date(endDate.getTime()));&#13;&#10;            pstmt.setDate(4, new java.sql.Date(startDate.getTime()));&#13;&#10;            pstmt.setDate(5, new java.sql.Date(endDate.getTime()));&#13;&#10;            pstmt.setDate(6, new java.sql.Date(startDate.getTime()));&#13;&#10;            pstmt.setDate(7, new java.sql.Date(endDate.getTime()));&#13;&#10;            &#13;&#10;            rs = pstmt.executeQuery();&#13;&#10;            &#13;&#10;            while (rs.next()) {&#13;&#10;                bookings.add(mapResultSetToBooking(rs));&#13;&#10;            }&#13;&#10;            &#13;&#10;            return bookings;&#13;&#10;        } finally {&#13;&#10;            DatabaseConnection.closeResources(conn, pstmt, rs);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public List&lt;Booking&gt; getCurrentBookings() throws SQLException {&#13;&#10;        String sql = &quot;SELECT b.*, c.first_name, c.last_name, c.email, &quot; +&#13;&#10;                    &quot;r.room_number, r.room_type_id, rt.type_name &quot; +&#13;&#10;                    &quot;FROM bookings b &quot; +&#13;&#10;                    &quot;JOIN customers c ON b.customer_id = c.customer_id &quot; +&#13;&#10;                    &quot;JOIN rooms r ON b.room_id = r.room_id &quot; +&#13;&#10;                    &quot;JOIN room_types rt ON r.room_type_id = rt.room_type_id &quot; +&#13;&#10;                    &quot;WHERE b.booking_status IN ('CONFIRMED', 'CHECKED_IN') &quot; +&#13;&#10;                    &quot;AND b.check_out_date &gt;= SYSDATE&quot;;&#13;&#10;&#13;&#10;        Connection conn = null;&#13;&#10;        PreparedStatement pstmt = null;&#13;&#10;        ResultSet rs = null;&#13;&#10;        List&lt;Booking&gt; bookings = new ArrayList&lt;&gt;();&#13;&#10;        &#13;&#10;        try {&#13;&#10;            conn = DatabaseConnection.getConnection();&#13;&#10;            pstmt = conn.prepareStatement(sql);&#13;&#10;            rs = pstmt.executeQuery();&#13;&#10;            &#13;&#10;            while (rs.next()) {&#13;&#10;                bookings.add(mapResultSetToBooking(rs));&#13;&#10;            }&#13;&#10;            &#13;&#10;            return bookings;&#13;&#10;        } finally {&#13;&#10;            DatabaseConnection.closeResources(conn, pstmt, rs);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public List&lt;Booking&gt; getExpiredBookings() throws SQLException {&#13;&#10;        String sql = &quot;SELECT * FROM bookings WHERE check_out_date &lt; TRUNC(SYSDATE) &quot; +&#13;&#10;                    &quot;AND booking_status NOT IN ('COMPLETED', 'CANCELLED') &quot; +&#13;&#10;                    &quot;ORDER BY check_out_date DESC&quot;;&#13;&#10;        &#13;&#10;        Connection conn = null;&#13;&#10;        PreparedStatement pstmt = null;&#13;&#10;        ResultSet rs = null;&#13;&#10;        List&lt;Booking&gt; bookings = new ArrayList&lt;&gt;();&#13;&#10;        &#13;&#10;        try {&#13;&#10;            conn = DatabaseConnection.getConnection();&#13;&#10;            pstmt = conn.prepareStatement(sql);&#13;&#10;            rs = pstmt.executeQuery();&#13;&#10;            &#13;&#10;            while (rs.next()) {&#13;&#10;                bookings.add(mapResultSetToBooking(rs));&#13;&#10;            }&#13;&#10;            &#13;&#10;            return bookings;&#13;&#10;        } finally {&#13;&#10;            DatabaseConnection.closeResources(conn, pstmt, rs);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public void update(Booking booking) throws SQLException {&#13;&#10;        String sql = &quot;UPDATE bookings SET customer_id = ?, room_id = ?, check_in_date = ?, &quot; +&#13;&#10;                    &quot;check_out_date = ?, booking_status = ?, total_amount = ?, &quot; +&#13;&#10;                    &quot;discount_applied = ?, extra_charges = ? WHERE booking_id = ?&quot;;&#13;&#10;        &#13;&#10;        Connection conn = null;&#13;&#10;        PreparedStatement pstmt = null;&#13;&#10;        &#13;&#10;        try {&#13;&#10;            conn = DatabaseConnection.getConnection();&#13;&#10;            pstmt = conn.prepareStatement(sql);&#13;&#10;            &#13;&#10;            pstmt.setInt(1, booking.getCustomerId());&#13;&#10;            pstmt.setInt(2, booking.getRoomId());&#13;&#10;            pstmt.setDate(3, new java.sql.Date(booking.getCheckInDate().getTime()));&#13;&#10;            pstmt.setDate(4, new java.sql.Date(booking.getCheckOutDate().getTime()));&#13;&#10;            pstmt.setString(5, booking.getBookingStatus());&#13;&#10;            pstmt.setDouble(6, booking.getTotalAmount());&#13;&#10;            pstmt.setDouble(7, booking.getDiscountApplied());&#13;&#10;            pstmt.setDouble(8, booking.getExtraCharges());&#13;&#10;            pstmt.setLong(9, booking.getBookingId());&#13;&#10;            &#13;&#10;            pstmt.executeUpdate();&#13;&#10;        } finally {&#13;&#10;            DatabaseConnection.closeResources(conn, pstmt);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public void cancel(int bookingId) throws SQLException {&#13;&#10;        String sql = &quot;UPDATE bookings SET booking_status = 'CANCELLED' WHERE booking_id = ?&quot;;&#13;&#10;        &#13;&#10;        Connection conn = null;&#13;&#10;        PreparedStatement pstmt = null;&#13;&#10;        &#13;&#10;        try {&#13;&#10;            conn = DatabaseConnection.getConnection();&#13;&#10;            pstmt = conn.prepareStatement(sql);&#13;&#10;            pstmt.setInt(1, bookingId);&#13;&#10;            pstmt.executeUpdate();&#13;&#10;        } finally {&#13;&#10;            DatabaseConnection.closeResources(conn, pstmt);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public List&lt;Booking&gt; getAll() throws SQLException {&#13;&#10;        String sql = &quot;SELECT * FROM bookings ORDER BY booking_id DESC&quot;;&#13;&#10;        &#13;&#10;        Connection conn = null;&#13;&#10;        PreparedStatement pstmt = null;&#13;&#10;        ResultSet rs = null;&#13;&#10;        List&lt;Booking&gt; bookings = new ArrayList&lt;&gt;();&#13;&#10;        &#13;&#10;        try {&#13;&#10;            conn = DatabaseConnection.getConnection();&#13;&#10;            pstmt = conn.prepareStatement(sql);&#13;&#10;            rs = pstmt.executeQuery();&#13;&#10;            &#13;&#10;            while (rs.next()) {&#13;&#10;                bookings.add(mapResultSetToBooking(rs));&#13;&#10;            }&#13;&#10;            &#13;&#10;            return bookings;&#13;&#10;        } finally {&#13;&#10;            DatabaseConnection.closeResources(conn, pstmt, rs);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public Booking getBookingById(int bookingId) throws SQLException {&#13;&#10;        String sql = &quot;SELECT b.*, c.first_name, c.last_name, c.email, &quot; +&#13;&#10;                    &quot;r.room_number, r.room_type_id, rt.type_name &quot; +&#13;&#10;                    &quot;FROM bookings b &quot; +&#13;&#10;                    &quot;JOIN customers c ON b.customer_id = c.customer_id &quot; +&#13;&#10;                    &quot;JOIN rooms r ON b.room_id = r.room_id &quot; +&#13;&#10;                    &quot;JOIN room_types rt ON r.room_type_id = rt.room_type_id &quot; +&#13;&#10;                    &quot;WHERE b.booking_id = ?&quot;;&#13;&#10;&#13;&#10;        try (Connection conn = DatabaseConnection.getConnection();&#13;&#10;             PreparedStatement pstmt = conn.prepareStatement(sql)) {&#13;&#10;&#13;&#10;            pstmt.setInt(1, bookingId);&#13;&#10;&#13;&#10;            try (ResultSet rs = pstmt.executeQuery()) {&#13;&#10;                if (rs.next()) {&#13;&#10;                    return mapResultSetToBooking(rs);&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;        return null;&#13;&#10;    }&#13;&#10;&#13;&#10;    public List&lt;Booking&gt; getBookingsByDateRange(Date startDate, Date endDate) throws SQLException {&#13;&#10;        String sql = &quot;SELECT b.*, c.first_name, c.last_name, c.email, &quot; +&#13;&#10;                    &quot;r.room_number, r.room_type_id, rt.type_name &quot; +&#13;&#10;                    &quot;FROM bookings b &quot; +&#13;&#10;                    &quot;JOIN customers c ON b.customer_id = c.customer_id &quot; +&#13;&#10;                    &quot;JOIN rooms r ON b.room_id = r.room_id &quot; +&#13;&#10;                    &quot;JOIN room_types rt ON r.room_type_id = rt.room_type_id &quot; +&#13;&#10;                    &quot;WHERE b.check_in_date &lt;= ? AND b.check_out_date &gt;= ?&quot;;&#13;&#10;&#13;&#10;        List&lt;Booking&gt; bookings = new ArrayList&lt;&gt;();&#13;&#10;&#13;&#10;        try (Connection conn = DatabaseConnection.getConnection();&#13;&#10;             PreparedStatement pstmt = conn.prepareStatement(sql)) {&#13;&#10;&#13;&#10;            pstmt.setDate(1, new java.sql.Date(endDate.getTime()));&#13;&#10;            pstmt.setDate(2, new java.sql.Date(startDate.getTime()));&#13;&#10;&#13;&#10;            try (ResultSet rs = pstmt.executeQuery()) {&#13;&#10;                while (rs.next()) {&#13;&#10;                    bookings.add(mapResultSetToBooking(rs));&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;        return bookings;&#13;&#10;    }&#13;&#10;&#13;&#10;    public boolean checkInCustomer(int bookingId) throws SQLException {&#13;&#10;        String sql = &quot;UPDATE bookings SET booking_status = 'CHECKED_IN', &quot; +&#13;&#10;                    &quot;actual_check_in = SYSDATE WHERE booking_id = ? &quot; +&#13;&#10;                    &quot;AND booking_status = 'CONFIRMED'&quot;;&#13;&#10;&#13;&#10;        try (Connection conn = DatabaseConnection.getConnection();&#13;&#10;             PreparedStatement pstmt = conn.prepareStatement(sql)) {&#13;&#10;&#13;&#10;            pstmt.setInt(1, bookingId);&#13;&#10;            return pstmt.executeUpdate() &gt; 0;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public boolean checkOutCustomer(int bookingId) throws SQLException {&#13;&#10;        String sql = &quot;UPDATE bookings SET booking_status = 'COMPLETED', &quot; +&#13;&#10;                    &quot;actual_check_out = SYSDATE WHERE booking_id = ? &quot; +&#13;&#10;                    &quot;AND booking_status = 'CHECKED_IN'&quot;;&#13;&#10;&#13;&#10;        try (Connection conn = DatabaseConnection.getConnection();&#13;&#10;             PreparedStatement pstmt = conn.prepareStatement(sql)) {&#13;&#10;&#13;&#10;            pstmt.setInt(1, bookingId);&#13;&#10;            return pstmt.executeUpdate() &gt; 0;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public List&lt;Booking&gt; findByDateRange(Date startDate, Date endDate) throws SQLException {&#13;&#10;        String sql = &quot;SELECT * FROM bookings WHERE check_in_date BETWEEN ? AND ? OR check_out_date BETWEEN ? AND ?&quot;;&#13;&#10;        List&lt;Booking&gt; bookings = new ArrayList&lt;&gt;();&#13;&#10;        &#13;&#10;        try (Connection conn = DatabaseConnection.getConnection();&#13;&#10;             PreparedStatement pstmt = conn.prepareStatement(sql)) {&#13;&#10;            &#13;&#10;            pstmt.setDate(1, new java.sql.Date(startDate.getTime()));&#13;&#10;            pstmt.setDate(2, new java.sql.Date(endDate.getTime()));&#13;&#10;            pstmt.setDate(3, new java.sql.Date(startDate.getTime()));&#13;&#10;            pstmt.setDate(4, new java.sql.Date(endDate.getTime()));&#13;&#10;            &#13;&#10;            try (ResultSet rs = pstmt.executeQuery()) {&#13;&#10;                while (rs.next()) {&#13;&#10;                    bookings.add(mapResultSetToBooking(rs));&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;        return bookings;&#13;&#10;    }&#13;&#10;&#13;&#10;    private Booking mapResultSetToBooking(ResultSet rs) throws SQLException {&#13;&#10;        Booking booking = new Booking();&#13;&#10;        booking.setBookingId(rs.getLong(&quot;booking_id&quot;));&#13;&#10;        booking.setCustomerId(rs.getInt(&quot;customer_id&quot;));&#13;&#10;        booking.setRoomId(rs.getInt(&quot;room_id&quot;));&#13;&#10;        booking.setCheckInDate(rs.getDate(&quot;check_in_date&quot;));&#13;&#10;        booking.setCheckOutDate(rs.getDate(&quot;check_out_date&quot;));&#13;&#10;        booking.setBookingStatus(rs.getString(&quot;booking_status&quot;));&#13;&#10;        booking.setTotalAmount(rs.getDouble(&quot;total_amount&quot;));&#13;&#10;        booking.setDiscountApplied(rs.getDouble(&quot;discount_applied&quot;));&#13;&#10;        booking.setExtraCharges(rs.getDouble(&quot;extra_charges&quot;));&#13;&#10;        booking.setCreatedDate(rs.getDate(&quot;created_date&quot;));&#13;&#10;        booking.setCreatedBy(rs.getString(&quot;created_by&quot;));&#13;&#10;        return booking;&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/HotelRentalSystem/src/main/java/com/hotel/dao/CustomerDAO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/HotelRentalSystem/src/main/java/com/hotel/dao/CustomerDAO.java" />
              <option name="originalContent" value="package com.hotel.dao;&#10;&#10;import com.hotel.model.Customer;&#10;import com.hotel.util.DatabaseConnection;&#10;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;/**&#10; * Data Access Object for Customer operations&#10; */&#10;public class CustomerDAO {&#10;    &#10;    /**&#10;     * Create a new customer&#10;     */&#10;    public int createCustomer(Customer customer) throws SQLException {&#10;        String sql = &quot;INSERT INTO customers (customer_id, first_name, last_name, email, phone, &quot; +&#10;                    &quot;address, date_of_birth, total_spent, loyalty_points) &quot; +&#10;                    &quot;VALUES (customer_seq.NEXTVAL, ?, ?, ?, ?, ?, ?, ?, ?)&quot;;&#10;        &#10;        Connection conn = null;&#10;        PreparedStatement pstmt = null;&#10;        ResultSet rs = null;&#10;        &#10;        try {&#10;            conn = DatabaseConnection.getConnection();&#10;            pstmt = conn.prepareStatement(sql, new String[]{&quot;customer_id&quot;});&#10;            &#10;            pstmt.setString(1, customer.getFirstName());&#10;            pstmt.setString(2, customer.getLastName());&#10;            pstmt.setString(3, customer.getEmail());&#10;            pstmt.setString(4, customer.getPhone());&#10;            pstmt.setString(5, customer.getAddress());&#10;            &#10;            if (customer.getDateOfBirth() != null) {&#10;                pstmt.setDate(6, new Date(customer.getDateOfBirth().getTime()));&#10;            } else {&#10;                pstmt.setNull(6, Types.DATE);&#10;            }&#10;            &#10;            pstmt.setDouble(7, customer.getTotalSpent());&#10;            pstmt.setInt(8, customer.getLoyaltyPoints());&#10;            &#10;            int rowsAffected = pstmt.executeUpdate();&#10;            &#10;            if (rowsAffected &gt; 0) {&#10;                rs = pstmt.getGeneratedKeys();&#10;                if (rs.next()) {&#10;                    int customerId = rs.getInt(1);&#10;                    customer.setCustomerId(customerId);&#10;                    return customerId;&#10;                }&#10;            }&#10;            &#10;            return 0;&#10;&#10;        } finally {&#10;            DatabaseConnection.closeResources(conn, pstmt, rs);&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Find customer by ID&#10;     */&#10;    public Customer findById(int customerId) throws SQLException {&#10;        String sql = &quot;SELECT customer_id, first_name, last_name, email, phone, address, &quot; +&#10;                    &quot;date_of_birth, total_spent, registration_date, is_active, loyalty_points &quot; +&#10;                    &quot;FROM customers WHERE customer_id = ?&quot;;&#10;        &#10;        Connection conn = null;&#10;        PreparedStatement pstmt = null;&#10;        ResultSet rs = null;&#10;        &#10;        try {&#10;            conn = DatabaseConnection.getConnection();&#10;            pstmt = conn.prepareStatement(sql);&#10;            pstmt.setInt(1, customerId);&#10;            &#10;            rs = pstmt.executeQuery();&#10;            &#10;            if (rs.next()) {&#10;                return mapResultSetToCustomer(rs);&#10;            }&#10;            &#10;            return null;&#10;            &#10;        } finally {&#10;            DatabaseConnection.closeResources(conn, pstmt, rs);&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Find customer by email&#10;     */&#10;    public Customer findByEmail(String email) throws SQLException {&#10;        String sql = &quot;SELECT customer_id, first_name, last_name, email, phone, address, &quot; +&#10;                    &quot;date_of_birth, total_spent, registration_date, is_active, loyalty_points &quot; +&#10;                    &quot;FROM customers WHERE email = ?&quot;;&#10;        &#10;        Connection conn = null;&#10;        PreparedStatement pstmt = null;&#10;        ResultSet rs = null;&#10;        &#10;        try {&#10;            conn = DatabaseConnection.getConnection();&#10;            pstmt = conn.prepareStatement(sql);&#10;            pstmt.setString(1, email);&#10;            &#10;            rs = pstmt.executeQuery();&#10;            &#10;            if (rs.next()) {&#10;                return mapResultSetToCustomer(rs);&#10;            }&#10;            &#10;            return null;&#10;            &#10;        } finally {&#10;            DatabaseConnection.closeResources(conn, pstmt, rs);&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Get all customers&#10;     */&#10;    public List&lt;Customer&gt; findAll() throws SQLException {&#10;        String sql = &quot;SELECT customer_id, first_name, last_name, email, phone, address, &quot; +&#10;                    &quot;date_of_birth, total_spent, registration_date, is_active, loyalty_points &quot; +&#10;                    &quot;FROM customers WHERE is_active = 'Y' ORDER BY registration_date DESC&quot;;&#10;        &#10;        Connection conn = null;&#10;        PreparedStatement pstmt = null;&#10;        ResultSet rs = null;&#10;        List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();&#10;        &#10;        try {&#10;            conn = DatabaseConnection.getConnection();&#10;            pstmt = conn.prepareStatement(sql);&#10;            rs = pstmt.executeQuery();&#10;            &#10;            while (rs.next()) {&#10;                customers.add(mapResultSetToCustomer(rs));&#10;            }&#10;            &#10;            return customers;&#10;            &#10;        } finally {&#10;            DatabaseConnection.closeResources(conn, pstmt, rs);&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Update customer information&#10;     */&#10;    public boolean updateCustomer(Customer customer) throws SQLException {&#10;        String sql = &quot;UPDATE customers SET first_name = ?, last_name = ?, email = ?, &quot; +&#10;                    &quot;phone = ?, address = ?, date_of_birth = ?, total_spent = ?, loyalty_points = ? &quot; +&#10;                    &quot;WHERE customer_id = ?&quot;;&#10;        &#10;        Connection conn = null;&#10;        PreparedStatement pstmt = null;&#10;        &#10;        try {&#10;            conn = DatabaseConnection.getConnection();&#10;            pstmt = conn.prepareStatement(sql);&#10;            &#10;            pstmt.setString(1, customer.getFirstName());&#10;            pstmt.setString(2, customer.getLastName());&#10;            pstmt.setString(3, customer.getEmail());&#10;            pstmt.setString(4, customer.getPhone());&#10;            pstmt.setString(5, customer.getAddress());&#10;            &#10;            if (customer.getDateOfBirth() != null) {&#10;                pstmt.setDate(6, new Date(customer.getDateOfBirth().getTime()));&#10;            } else {&#10;                pstmt.setNull(6, Types.DATE);&#10;            }&#10;            &#10;            pstmt.setDouble(7, customer.getTotalSpent());&#10;            pstmt.setInt(8, customer.getLoyaltyPoints());&#10;            pstmt.setInt(9, customer.getCustomerId());&#10;            &#10;            int rowsAffected = pstmt.executeUpdate();&#10;            return rowsAffected &gt; 0;&#10;&#10;        } finally {&#10;            DatabaseConnection.closeResources(conn, pstmt);&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Delete customer (soft delete - set inactive)&#10;     */&#10;    public boolean deleteCustomer(int customerId) throws SQLException {&#10;        String sql = &quot;UPDATE customers SET is_active = 'N' WHERE customer_id = ?&quot;;&#10;        &#10;        Connection conn = null;&#10;        PreparedStatement pstmt = null;&#10;        &#10;        try {&#10;            conn = DatabaseConnection.getConnection();&#10;            pstmt = conn.prepareStatement(sql);&#10;            pstmt.setInt(1, customerId);&#10;            &#10;            int rowsAffected = pstmt.executeUpdate();&#10;            return rowsAffected &gt; 0;&#10;            &#10;        } finally {&#10;            DatabaseConnection.closeResources(conn, pstmt);&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Search customers by name or email&#10;     */&#10;    public List&lt;Customer&gt; searchCustomers(String searchTerm) throws SQLException {&#10;        String sql = &quot;SELECT customer_id, first_name, last_name, email, phone, address, &quot; +&#10;                    &quot;date_of_birth, total_spent, registration_date, is_active, loyalty_points &quot; +&#10;                    &quot;FROM customers WHERE is_active = 'Y' AND &quot; +&#10;                    &quot;(UPPER(first_name) LIKE UPPER(?) OR UPPER(last_name) LIKE UPPER(?) OR &quot; +&#10;                    &quot;UPPER(email) LIKE UPPER(?) OR phone LIKE ?) &quot; +&#10;                    &quot;ORDER BY total_spent DESC&quot;;&#10;        &#10;        Connection conn = null;&#10;        PreparedStatement pstmt = null;&#10;        ResultSet rs = null;&#10;        List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();&#10;        &#10;        try {&#10;            conn = DatabaseConnection.getConnection();&#10;            pstmt = conn.prepareStatement(sql);&#10;            &#10;            String searchPattern = &quot;%&quot; + searchTerm + &quot;%&quot;;&#10;            pstmt.setString(1, searchPattern);&#10;            pstmt.setString(2, searchPattern);&#10;            pstmt.setString(3, searchPattern);&#10;            pstmt.setString(4, searchPattern);&#10;            &#10;            rs = pstmt.executeQuery();&#10;            &#10;            while (rs.next()) {&#10;                customers.add(mapResultSetToCustomer(rs));&#10;            }&#10;            &#10;            return customers;&#10;            &#10;        } finally {&#10;            DatabaseConnection.closeResources(conn, pstmt, rs);&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Get customers eligible for VIP membership&#10;     */&#10;    public List&lt;Customer&gt; getVIPEligibleCustomers(double spendingThreshold) throws SQLException {&#10;        String sql = &quot;SELECT c.customer_id, c.first_name, c.last_name, c.email, c.phone, &quot; +&#10;                    &quot;c.address, c.date_of_birth, c.total_spent, c.registration_date, &quot; +&#10;                    &quot;c.is_active, c.loyalty_points &quot; +&#10;                    &quot;FROM customers c &quot; +&#10;                    &quot;LEFT JOIN vip_members vm ON c.customer_id = vm.customer_id AND vm.is_active = 'Y' &quot; +&#10;                    &quot;WHERE c.is_active = 'Y' AND c.total_spent &gt;= ? AND vm.customer_id IS NULL &quot; +&#10;                    &quot;ORDER BY c.total_spent DESC&quot;;&#10;        &#10;        Connection conn = null;&#10;        PreparedStatement pstmt = null;&#10;        ResultSet rs = null;&#10;        List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();&#10;        &#10;        try {&#10;            conn = DatabaseConnection.getConnection();&#10;            pstmt = conn.prepareStatement(sql);&#10;            pstmt.setDouble(1, spendingThreshold);&#10;            &#10;            rs = pstmt.executeQuery();&#10;            &#10;            while (rs.next()) {&#10;                customers.add(mapResultSetToCustomer(rs));&#10;            }&#10;            &#10;            return customers;&#10;            &#10;        } finally {&#10;            DatabaseConnection.closeResources(conn, pstmt, rs);&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Get customer discount using Oracle function&#10;     */&#10;    public double getCustomerDiscount(int customerId) throws SQLException {&#10;        String sql = &quot;{? = call calculate_customer_discount(?)}&quot;;&#10;        &#10;        Connection conn = null;&#10;        CallableStatement cstmt = null;&#10;        &#10;        try {&#10;            conn = DatabaseConnection.getConnection();&#10;            cstmt = conn.prepareCall(sql);&#10;            &#10;            cstmt.registerOutParameter(1, Types.NUMERIC);&#10;            cstmt.setInt(2, customerId);&#10;            &#10;            cstmt.execute();&#10;            &#10;            return cstmt.getDouble(1);&#10;            &#10;        } finally {&#10;            DatabaseConnection.closeResources(conn, cstmt);&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Map ResultSet to Customer object&#10;     */&#10;    private Customer mapResultSetToCustomer(ResultSet rs) throws SQLException {&#10;        Customer customer = new Customer();&#10;        &#10;        customer.setCustomerId(rs.getInt(&quot;customer_id&quot;));&#10;        customer.setFirstName(rs.getString(&quot;first_name&quot;));&#10;        customer.setLastName(rs.getString(&quot;last_name&quot;));&#10;        customer.setEmail(rs.getString(&quot;email&quot;));&#10;        customer.setPhone(rs.getString(&quot;phone&quot;));&#10;        customer.setAddress(rs.getString(&quot;address&quot;));&#10;        &#10;        Date dateOfBirth = rs.getDate(&quot;date_of_birth&quot;);&#10;        if (dateOfBirth != null) {&#10;            customer.setDateOfBirth(new java.util.Date(dateOfBirth.getTime()));&#10;        }&#10;        &#10;        customer.setTotalSpent(rs.getDouble(&quot;total_spent&quot;));&#10;        &#10;        Date registrationDate = rs.getDate(&quot;registration_date&quot;);&#10;        if (registrationDate != null) {&#10;            customer.setRegistrationDate(new java.util.Date(registrationDate.getTime()));&#10;        }&#10;        &#10;        customer.setActive(&quot;Y&quot;.equals(rs.getString(&quot;is_active&quot;)));&#10;        customer.setLoyaltyPoints(rs.getInt(&quot;loyalty_points&quot;));&#10;        &#10;        return customer;&#10;    }&#10;}&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.hotel.dao;&#13;&#10;&#13;&#10;import com.hotel.model.Customer;&#13;&#10;import com.hotel.util.DatabaseConnection;&#13;&#10;&#13;&#10;import java.sql.*;&#13;&#10;import java.util.ArrayList;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;/**&#13;&#10; * Data Access Object for Customer operations&#13;&#10; */&#13;&#10;public class CustomerDAO {&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Create a new customer&#13;&#10;     */&#13;&#10;    public Customer create(Customer customer) throws SQLException {&#13;&#10;        String sql = &quot;INSERT INTO customers (customer_id, first_name, last_name, email, phone, &quot; +&#13;&#10;                    &quot;address, date_of_birth, total_spent, loyalty_points) &quot; +&#13;&#10;                    &quot;VALUES (customer_seq.NEXTVAL, ?, ?, ?, ?, ?, ?, ?, ?)&quot;;&#13;&#10;        &#13;&#10;        Connection conn = null;&#13;&#10;        PreparedStatement pstmt = null;&#13;&#10;        ResultSet rs = null;&#13;&#10;        &#13;&#10;        try {&#13;&#10;            conn = DatabaseConnection.getConnection();&#13;&#10;            pstmt = conn.prepareStatement(sql, new String[]{&quot;customer_id&quot;});&#13;&#10;            &#13;&#10;            pstmt.setString(1, customer.getFirstName());&#13;&#10;            pstmt.setString(2, customer.getLastName());&#13;&#10;            pstmt.setString(3, customer.getEmail());&#13;&#10;            pstmt.setString(4, customer.getPhone());&#13;&#10;            pstmt.setString(5, customer.getAddress());&#13;&#10;            &#13;&#10;            if (customer.getDateOfBirth() != null) {&#13;&#10;                pstmt.setDate(6, new Date(customer.getDateOfBirth().getTime()));&#13;&#10;            } else {&#13;&#10;                pstmt.setNull(6, Types.DATE);&#13;&#10;            }&#13;&#10;            &#13;&#10;            pstmt.setDouble(7, customer.getTotalSpent());&#13;&#10;            pstmt.setInt(8, customer.getLoyaltyPoints());&#13;&#10;            &#13;&#10;            int rowsAffected = pstmt.executeUpdate();&#13;&#10;            &#13;&#10;            if (rowsAffected &gt; 0) {&#13;&#10;                rs = pstmt.getGeneratedKeys();&#13;&#10;                if (rs.next()) {&#13;&#10;                    int customerId = rs.getInt(1);&#13;&#10;                    customer.setCustomerId(customerId);&#13;&#10;                    return customer;&#13;&#10;                }&#13;&#10;            }&#13;&#10;            &#13;&#10;            return null;&#13;&#10;&#13;&#10;        } finally {&#13;&#10;            DatabaseConnection.closeResources(conn, pstmt, rs);&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Find customer by ID&#13;&#10;     */&#13;&#10;    public Customer findById(int customerId) throws SQLException {&#13;&#10;        String sql = &quot;SELECT customer_id, first_name, last_name, email, phone, address, &quot; +&#13;&#10;                    &quot;date_of_birth, total_spent, registration_date, is_active, loyalty_points &quot; +&#13;&#10;                    &quot;FROM customers WHERE customer_id = ?&quot;;&#13;&#10;        &#13;&#10;        Connection conn = null;&#13;&#10;        PreparedStatement pstmt = null;&#13;&#10;        ResultSet rs = null;&#13;&#10;        &#13;&#10;        try {&#13;&#10;            conn = DatabaseConnection.getConnection();&#13;&#10;            pstmt = conn.prepareStatement(sql);&#13;&#10;            pstmt.setInt(1, customerId);&#13;&#10;            &#13;&#10;            rs = pstmt.executeQuery();&#13;&#10;            &#13;&#10;            if (rs.next()) {&#13;&#10;                return mapResultSetToCustomer(rs);&#13;&#10;            }&#13;&#10;            &#13;&#10;            return null;&#13;&#10;            &#13;&#10;        } finally {&#13;&#10;            DatabaseConnection.closeResources(conn, pstmt, rs);&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Find customer by email&#13;&#10;     */&#13;&#10;    public Customer findByEmail(String email) throws SQLException {&#13;&#10;        String sql = &quot;SELECT customer_id, first_name, last_name, email, phone, address, &quot; +&#13;&#10;                    &quot;date_of_birth, total_spent, registration_date, is_active, loyalty_points &quot; +&#13;&#10;                    &quot;FROM customers WHERE email = ?&quot;;&#13;&#10;        &#13;&#10;        Connection conn = null;&#13;&#10;        PreparedStatement pstmt = null;&#13;&#10;        ResultSet rs = null;&#13;&#10;        &#13;&#10;        try {&#13;&#10;            conn = DatabaseConnection.getConnection();&#13;&#10;            pstmt = conn.prepareStatement(sql);&#13;&#10;            pstmt.setString(1, email);&#13;&#10;            &#13;&#10;            rs = pstmt.executeQuery();&#13;&#10;            &#13;&#10;            if (rs.next()) {&#13;&#10;                return mapResultSetToCustomer(rs);&#13;&#10;            }&#13;&#10;            &#13;&#10;            return null;&#13;&#10;            &#13;&#10;        } finally {&#13;&#10;            DatabaseConnection.closeResources(conn, pstmt, rs);&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Get all customers&#13;&#10;     */&#13;&#10;    public List&lt;Customer&gt; findAll() throws SQLException {&#13;&#10;        String sql = &quot;SELECT customer_id, first_name, last_name, email, phone, address, &quot; +&#13;&#10;                    &quot;date_of_birth, total_spent, registration_date, is_active, loyalty_points &quot; +&#13;&#10;                    &quot;FROM customers WHERE is_active = 'Y' ORDER BY registration_date DESC&quot;;&#13;&#10;        &#13;&#10;        Connection conn = null;&#13;&#10;        PreparedStatement pstmt = null;&#13;&#10;        ResultSet rs = null;&#13;&#10;        List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();&#13;&#10;        &#13;&#10;        try {&#13;&#10;            conn = DatabaseConnection.getConnection();&#13;&#10;            pstmt = conn.prepareStatement(sql);&#13;&#10;            rs = pstmt.executeQuery();&#13;&#10;            &#13;&#10;            while (rs.next()) {&#13;&#10;                customers.add(mapResultSetToCustomer(rs));&#13;&#10;            }&#13;&#10;            &#13;&#10;            return customers;&#13;&#10;            &#13;&#10;        } finally {&#13;&#10;            DatabaseConnection.closeResources(conn, pstmt, rs);&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Update customer information&#13;&#10;     */&#13;&#10;    public void update(Customer customer) throws SQLException {&#13;&#10;        String sql = &quot;UPDATE customers SET first_name = ?, last_name = ?, email = ?, &quot; +&#13;&#10;                    &quot;phone = ?, address = ?, date_of_birth = ?, total_spent = ?, loyalty_points = ? &quot; +&#13;&#10;                    &quot;WHERE customer_id = ?&quot;;&#13;&#10;        &#13;&#10;        Connection conn = null;&#13;&#10;        PreparedStatement pstmt = null;&#13;&#10;        &#13;&#10;        try {&#13;&#10;            conn = DatabaseConnection.getConnection();&#13;&#10;            pstmt = conn.prepareStatement(sql);&#13;&#10;            &#13;&#10;            pstmt.setString(1, customer.getFirstName());&#13;&#10;            pstmt.setString(2, customer.getLastName());&#13;&#10;            pstmt.setString(3, customer.getEmail());&#13;&#10;            pstmt.setString(4, customer.getPhone());&#13;&#10;            pstmt.setString(5, customer.getAddress());&#13;&#10;            &#13;&#10;            if (customer.getDateOfBirth() != null) {&#13;&#10;                pstmt.setDate(6, new Date(customer.getDateOfBirth().getTime()));&#13;&#10;            } else {&#13;&#10;                pstmt.setNull(6, Types.DATE);&#13;&#10;            }&#13;&#10;            &#13;&#10;            pstmt.setDouble(7, customer.getTotalSpent());&#13;&#10;            pstmt.setInt(8, customer.getLoyaltyPoints());&#13;&#10;            pstmt.setInt(9, customer.getCustomerId());&#13;&#10;            &#13;&#10;            pstmt.executeUpdate();&#13;&#10;&#13;&#10;        } finally {&#13;&#10;            DatabaseConnection.closeResources(conn, pstmt);&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Delete customer (soft delete - set inactive)&#13;&#10;     */&#13;&#10;    public boolean deleteCustomer(int customerId) throws SQLException {&#13;&#10;        String sql = &quot;UPDATE customers SET is_active = 'N' WHERE customer_id = ?&quot;;&#13;&#10;        &#13;&#10;        Connection conn = null;&#13;&#10;        PreparedStatement pstmt = null;&#13;&#10;        &#13;&#10;        try {&#13;&#10;            conn = DatabaseConnection.getConnection();&#13;&#10;            pstmt = conn.prepareStatement(sql);&#13;&#10;            pstmt.setInt(1, customerId);&#13;&#10;            &#13;&#10;            int rowsAffected = pstmt.executeUpdate();&#13;&#10;            return rowsAffected &gt; 0;&#13;&#10;            &#13;&#10;        } finally {&#13;&#10;            DatabaseConnection.closeResources(conn, pstmt);&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Search customers by name or email&#13;&#10;     */&#13;&#10;    public List&lt;Customer&gt; search(String searchTerm) throws SQLException {&#13;&#10;        String sql = &quot;SELECT customer_id, first_name, last_name, email, phone, address, &quot; +&#13;&#10;                    &quot;date_of_birth, total_spent, registration_date, is_active, loyalty_points &quot; +&#13;&#10;                    &quot;FROM customers WHERE is_active = 'Y' AND &quot; +&#13;&#10;                    &quot;(UPPER(first_name) LIKE UPPER(?) OR UPPER(last_name) LIKE UPPER(?) OR &quot; +&#13;&#10;                    &quot;UPPER(email) LIKE UPPER(?) OR phone LIKE ?) &quot; +&#13;&#10;                    &quot;ORDER BY total_spent DESC&quot;;&#13;&#10;        &#13;&#10;        Connection conn = null;&#13;&#10;        PreparedStatement pstmt = null;&#13;&#10;        ResultSet rs = null;&#13;&#10;        List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();&#13;&#10;        &#13;&#10;        try {&#13;&#10;            conn = DatabaseConnection.getConnection();&#13;&#10;            pstmt = conn.prepareStatement(sql);&#13;&#10;            &#13;&#10;            String searchPattern = &quot;%&quot; + searchTerm + &quot;%&quot;;&#13;&#10;            pstmt.setString(1, searchPattern);&#13;&#10;            pstmt.setString(2, searchPattern);&#13;&#10;            pstmt.setString(3, searchPattern);&#13;&#10;            pstmt.setString(4, searchPattern);&#13;&#10;            &#13;&#10;            rs = pstmt.executeQuery();&#13;&#10;            &#13;&#10;            while (rs.next()) {&#13;&#10;                customers.add(mapResultSetToCustomer(rs));&#13;&#10;            }&#13;&#10;            &#13;&#10;            return customers;&#13;&#10;            &#13;&#10;        } finally {&#13;&#10;            DatabaseConnection.closeResources(conn, pstmt, rs);&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Get customers eligible for VIP membership&#13;&#10;     */&#13;&#10;    public List&lt;Customer&gt; getVIPEligibleCustomers(double spendingThreshold) throws SQLException {&#13;&#10;        String sql = &quot;SELECT c.customer_id, c.first_name, c.last_name, c.email, c.phone, &quot; +&#13;&#10;                    &quot;c.address, c.date_of_birth, c.total_spent, c.registration_date, &quot; +&#13;&#10;                    &quot;c.is_active, c.loyalty_points &quot; +&#13;&#10;                    &quot;FROM customers c &quot; +&#13;&#10;                    &quot;LEFT JOIN vip_members vm ON c.customer_id = vm.customer_id AND vm.is_active = 'Y' &quot; +&#13;&#10;                    &quot;WHERE c.is_active = 'Y' AND c.total_spent &gt;= ? AND vm.customer_id IS NULL &quot; +&#13;&#10;                    &quot;ORDER BY c.total_spent DESC&quot;;&#13;&#10;        &#13;&#10;        Connection conn = null;&#13;&#10;        PreparedStatement pstmt = null;&#13;&#10;        ResultSet rs = null;&#13;&#10;        List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();&#13;&#10;        &#13;&#10;        try {&#13;&#10;            conn = DatabaseConnection.getConnection();&#13;&#10;            pstmt = conn.prepareStatement(sql);&#13;&#10;            pstmt.setDouble(1, spendingThreshold);&#13;&#10;            &#13;&#10;            rs = pstmt.executeQuery();&#13;&#10;            &#13;&#10;            while (rs.next()) {&#13;&#10;                customers.add(mapResultSetToCustomer(rs));&#13;&#10;            }&#13;&#10;            &#13;&#10;            return customers;&#13;&#10;            &#13;&#10;        } finally {&#13;&#10;            DatabaseConnection.closeResources(conn, pstmt, rs);&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Get customer discount using Oracle function&#13;&#10;     */&#13;&#10;    public double getCustomerDiscount(int customerId) throws SQLException {&#13;&#10;        String sql = &quot;{? = call calculate_customer_discount(?)}&quot;;&#13;&#10;        &#13;&#10;        Connection conn = null;&#13;&#10;        CallableStatement cstmt = null;&#13;&#10;        &#13;&#10;        try {&#13;&#10;            conn = DatabaseConnection.getConnection();&#13;&#10;            cstmt = conn.prepareCall(sql);&#13;&#10;            &#13;&#10;            cstmt.registerOutParameter(1, Types.NUMERIC);&#13;&#10;            cstmt.setInt(2, customerId);&#13;&#10;            &#13;&#10;            cstmt.execute();&#13;&#10;            &#13;&#10;            return cstmt.getDouble(1);&#13;&#10;            &#13;&#10;        } finally {&#13;&#10;            DatabaseConnection.closeResources(conn, cstmt);&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Map ResultSet to Customer object&#13;&#10;     */&#13;&#10;    private Customer mapResultSetToCustomer(ResultSet rs) throws SQLException {&#13;&#10;        Customer customer = new Customer();&#13;&#10;        &#13;&#10;        customer.setCustomerId(rs.getInt(&quot;customer_id&quot;));&#13;&#10;        customer.setFirstName(rs.getString(&quot;first_name&quot;));&#13;&#10;        customer.setLastName(rs.getString(&quot;last_name&quot;));&#13;&#10;        customer.setEmail(rs.getString(&quot;email&quot;));&#13;&#10;        customer.setPhone(rs.getString(&quot;phone&quot;));&#13;&#10;        customer.setAddress(rs.getString(&quot;address&quot;));&#13;&#10;        &#13;&#10;        Date dateOfBirth = rs.getDate(&quot;date_of_birth&quot;);&#13;&#10;        if (dateOfBirth != null) {&#13;&#10;            customer.setDateOfBirth(new java.util.Date(dateOfBirth.getTime()));&#13;&#10;        }&#13;&#10;        &#13;&#10;        customer.setTotalSpent(rs.getDouble(&quot;total_spent&quot;));&#13;&#10;        &#13;&#10;        Date registrationDate = rs.getDate(&quot;registration_date&quot;);&#13;&#10;        if (registrationDate != null) {&#13;&#10;            customer.setRegistrationDate(new java.util.Date(registrationDate.getTime()));&#13;&#10;        }&#13;&#10;        &#13;&#10;        customer.setActive(&quot;Y&quot;.equals(rs.getString(&quot;is_active&quot;)));&#13;&#10;        customer.setLoyaltyPoints(rs.getInt(&quot;loyalty_points&quot;));&#13;&#10;        &#13;&#10;        return customer;&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Save customer (create or update)&#13;&#10;     */&#13;&#10;    public void save(Customer customer) throws SQLException {&#13;&#10;        if (customer.getCustomerId() == 0) {&#13;&#10;            create(customer);&#13;&#10;        } else {&#13;&#10;            update(customer);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Search customers by name&#13;&#10;     */&#13;&#10;    public List&lt;Customer&gt; searchByName(String searchTerm) throws SQLException {&#13;&#10;        String sql = &quot;SELECT * FROM customers WHERE LOWER(first_name) LIKE ? OR LOWER(last_name) LIKE ?&quot;;&#13;&#10;        List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();&#13;&#10;&#13;&#10;        try (Connection conn = DatabaseConnection.getConnection();&#13;&#10;             PreparedStatement pstmt = conn.prepareStatement(sql)) {&#13;&#10;&#13;&#10;            String searchPattern = &quot;%&quot; + searchTerm.toLowerCase() + &quot;%&quot;;&#13;&#10;            pstmt.setString(1, searchPattern);&#13;&#10;            pstmt.setString(2, searchPattern);&#13;&#10;&#13;&#10;            try (ResultSet rs = pstmt.executeQuery()) {&#13;&#10;                while (rs.next()) {&#13;&#10;                    customers.add(mapResultSetToCustomer(rs));&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;        return customers;&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Find customers eligible for VIP membership based on activity&#13;&#10;     */&#13;&#10;    public List&lt;Customer&gt; findVIPEligible() throws SQLException {&#13;&#10;        String sql = &quot;SELECT c.* FROM customers c &quot; +&#13;&#10;                    &quot;JOIN bookings b ON c.customer_id = b.customer_id &quot; +&#13;&#10;                    &quot;GROUP BY c.customer_id, c.first_name, c.last_name, c.email, &quot; +&#13;&#10;                    &quot;c.phone, c.address, c.created_date, c.last_updated &quot; +&#13;&#10;                    &quot;HAVING COUNT(*) &gt;= 5 AND SUM(b.total_amount) &gt;= 5000&quot;;&#13;&#10;        &#13;&#10;        List&lt;Customer&gt; customers = new ArrayList&lt;&gt;();&#13;&#10;        try (Connection conn = DatabaseConnection.getConnection();&#13;&#10;             PreparedStatement pstmt = conn.prepareStatement(sql);&#13;&#10;             ResultSet rs = pstmt.executeQuery()) {&#13;&#10;            &#13;&#10;            while (rs.next()) {&#13;&#10;                customers.add(mapResultSetToCustomer(rs));&#13;&#10;            }&#13;&#10;        }&#13;&#10;        return customers;&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/HotelRentalSystem/src/main/java/com/hotel/dao/InvoiceDAO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/HotelRentalSystem/src/main/java/com/hotel/dao/InvoiceDAO.java" />
              <option name="originalContent" value="package com.hotel.dao;&#10;&#10;import com.hotel.model.Invoice;&#10;import com.hotel.model.InvoiceLineItem;&#10;import com.hotel.util.DatabaseConnection;&#10;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;/**&#10; * Data Access Object for Invoice operations&#10; */&#10;public class InvoiceDAO {&#10;    &#10;    // Generate invoice using stored procedure&#10;    public Invoice generateInvoice(long bookingId, double taxRate, String createdBy) throws SQLException {&#10;        String sql = &quot;{CALL generate_invoice(?, ?, ?, ?, ?, ?, ?)}&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             CallableStatement stmt = conn.prepareCall(sql)) {&#10;            &#10;            stmt.setLong(1, bookingId);&#10;            stmt.setDouble(2, taxRate);&#10;            stmt.setString(3, createdBy);&#10;            stmt.registerOutParameter(4, Types.NUMERIC); // invoice_id&#10;            stmt.registerOutParameter(5, Types.VARCHAR); // invoice_number&#10;            stmt.registerOutParameter(6, Types.NUMERIC); // success&#10;            stmt.registerOutParameter(7, Types.VARCHAR); // message&#10;            &#10;            stmt.execute();&#10;            &#10;            int success = stmt.getInt(6);&#10;            String message = stmt.getString(7);&#10;            &#10;            if (success == 1) {&#10;                long invoiceId = stmt.getLong(4);&#10;                String invoiceNumber = stmt.getString(5);&#10;                &#10;                // Retrieve the generated invoice&#10;                Invoice invoice = findById(invoiceId);&#10;                if (invoice != null) {&#10;                    invoice.setInvoiceNumber(invoiceNumber);&#10;                }&#10;                return invoice;&#10;            } else {&#10;                throw new SQLException(&quot;Failed to generate invoice: &quot; + message);&#10;            }&#10;        }&#10;    }&#10;    &#10;    // Find invoice by ID&#10;    public Invoice findById(long invoiceId) throws SQLException {&#10;        String sql = &quot;SELECT i.invoice_id, i.booking_id, i.customer_id, i.invoice_number, &quot; +&#10;                    &quot;i.invoice_date, i.due_date, i.subtotal, i.tax_amount, i.discount_amount, &quot; +&#10;                    &quot;i.total_amount, i.payment_status, i.payment_date, i.payment_method, &quot; +&#10;                    &quot;i.notes, i.created_by, &quot; +&#10;                    &quot;c.first_name, c.last_name, c.email &quot; +&#10;                    &quot;FROM invoices i &quot; +&#10;                    &quot;JOIN customers c ON i.customer_id = c.customer_id &quot; +&#10;                    &quot;WHERE i.invoice_id = ?&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setLong(1, invoiceId);&#10;            &#10;            try (ResultSet rs = stmt.executeQuery()) {&#10;                if (rs.next()) {&#10;                    Invoice invoice = mapResultSetToInvoice(rs);&#10;                    // Load line items&#10;                    invoice.setLineItems(findLineItemsByInvoiceId(invoiceId));&#10;                    return invoice;&#10;                }&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;    &#10;    // Find invoice by invoice number&#10;    public Invoice findByInvoiceNumber(String invoiceNumber) throws SQLException {&#10;        String sql = &quot;SELECT i.invoice_id, i.booking_id, i.customer_id, i.invoice_number, &quot; +&#10;                    &quot;i.invoice_date, i.due_date, i.subtotal, i.tax_amount, i.discount_amount, &quot; +&#10;                    &quot;i.total_amount, i.payment_status, i.payment_date, i.payment_method, &quot; +&#10;                    &quot;i.notes, i.created_by, &quot; +&#10;                    &quot;c.first_name, c.last_name, c.email &quot; +&#10;                    &quot;FROM invoices i &quot; +&#10;                    &quot;JOIN customers c ON i.customer_id = c.customer_id &quot; +&#10;                    &quot;WHERE i.invoice_number = ?&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setString(1, invoiceNumber);&#10;            &#10;            try (ResultSet rs = stmt.executeQuery()) {&#10;                if (rs.next()) {&#10;                    Invoice invoice = mapResultSetToInvoice(rs);&#10;                    // Load line items&#10;                    invoice.setLineItems(findLineItemsByInvoiceId(invoice.getInvoiceId()));&#10;                    return invoice;&#10;                }&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;    &#10;    // Find invoices by customer ID&#10;    public List&lt;Invoice&gt; findByCustomerId(int customerId) throws SQLException {&#10;        String sql = &quot;SELECT i.invoice_id, i.booking_id, i.customer_id, i.invoice_number, &quot; +&#10;                    &quot;i.invoice_date, i.due_date, i.subtotal, i.tax_amount, i.discount_amount, &quot; +&#10;                    &quot;i.total_amount, i.payment_status, i.payment_date, i.payment_method, &quot; +&#10;                    &quot;i.notes, i.created_by, &quot; +&#10;                    &quot;c.first_name, c.last_name, c.email &quot; +&#10;                    &quot;FROM invoices i &quot; +&#10;                    &quot;JOIN customers c ON i.customer_id = c.customer_id &quot; +&#10;                    &quot;WHERE i.customer_id = ? ORDER BY i.invoice_date DESC&quot;;&#10;        &#10;        List&lt;Invoice&gt; invoices = new ArrayList&lt;&gt;();&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setInt(1, customerId);&#10;            &#10;            try (ResultSet rs = stmt.executeQuery()) {&#10;                while (rs.next()) {&#10;                    Invoice invoice = mapResultSetToInvoice(rs);&#10;                    // Load line items for each invoice&#10;                    invoice.setLineItems(findLineItemsByInvoiceId(invoice.getInvoiceId()));&#10;                    invoices.add(invoice);&#10;                }&#10;            }&#10;        }&#10;        return invoices;&#10;    }&#10;    &#10;    // Find invoices by booking ID&#10;    public List&lt;Invoice&gt; findByBookingId(long bookingId) throws SQLException {&#10;        String sql = &quot;SELECT i.invoice_id, i.booking_id, i.customer_id, i.invoice_number, &quot; +&#10;                    &quot;i.invoice_date, i.due_date, i.subtotal, i.tax_amount, i.discount_amount, &quot; +&#10;                    &quot;i.total_amount, i.payment_status, i.payment_date, i.payment_method, &quot; +&#10;                    &quot;i.notes, i.created_by, &quot; +&#10;                    &quot;c.first_name, c.last_name, c.email &quot; +&#10;                    &quot;FROM invoices i &quot; +&#10;                    &quot;JOIN customers c ON i.customer_id = c.customer_id &quot; +&#10;                    &quot;WHERE i.booking_id = ? ORDER BY i.invoice_date DESC&quot;;&#10;        &#10;        List&lt;Invoice&gt; invoices = new ArrayList&lt;&gt;();&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setLong(1, bookingId);&#10;            &#10;            try (ResultSet rs = stmt.executeQuery()) {&#10;                while (rs.next()) {&#10;                    Invoice invoice = mapResultSetToInvoice(rs);&#10;                    // Load line items for each invoice&#10;                    invoice.setLineItems(findLineItemsByInvoiceId(invoice.getInvoiceId()));&#10;                    invoices.add(invoice);&#10;                }&#10;            }&#10;        }&#10;        return invoices;&#10;    }&#10;    &#10;    // Find all invoices&#10;    public List&lt;Invoice&gt; findAll() throws SQLException {&#10;        String sql = &quot;SELECT i.invoice_id, i.booking_id, i.customer_id, i.invoice_number, &quot; +&#10;                    &quot;i.invoice_date, i.due_date, i.subtotal, i.tax_amount, i.discount_amount, &quot; +&#10;                    &quot;i.total_amount, i.payment_status, i.payment_date, i.payment_method, &quot; +&#10;                    &quot;i.notes, i.created_by, &quot; +&#10;                    &quot;c.first_name, c.last_name, c.email &quot; +&#10;                    &quot;FROM invoices i &quot; +&#10;                    &quot;JOIN customers c ON i.customer_id = c.customer_id &quot; +&#10;                    &quot;ORDER BY i.invoice_date DESC&quot;;&#10;        &#10;        List&lt;Invoice&gt; invoices = new ArrayList&lt;&gt;();&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            while (rs.next()) {&#10;                Invoice invoice = mapResultSetToInvoice(rs);&#10;                // Load line items for each invoice&#10;                invoice.setLineItems(findLineItemsByInvoiceId(invoice.getInvoiceId()));&#10;                invoices.add(invoice);&#10;            }&#10;        }&#10;        return invoices;&#10;    }&#10;    &#10;    // Find pending invoices&#10;    public List&lt;Invoice&gt; findPendingInvoices() throws SQLException {&#10;        String sql = &quot;SELECT i.invoice_id, i.booking_id, i.customer_id, i.invoice_number, &quot; +&#10;                    &quot;i.invoice_date, i.due_date, i.subtotal, i.tax_amount, i.discount_amount, &quot; +&#10;                    &quot;i.total_amount, i.payment_status, i.payment_date, i.payment_method, &quot; +&#10;                    &quot;i.notes, i.created_by, &quot; +&#10;                    &quot;c.first_name, c.last_name, c.email &quot; +&#10;                    &quot;FROM invoices i &quot; +&#10;                    &quot;JOIN customers c ON i.customer_id = c.customer_id &quot; +&#10;                    &quot;WHERE i.payment_status = 'PENDING' &quot; +&#10;                    &quot;ORDER BY i.due_date&quot;;&#10;        &#10;        List&lt;Invoice&gt; invoices = new ArrayList&lt;&gt;();&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            while (rs.next()) {&#10;                Invoice invoice = mapResultSetToInvoice(rs);&#10;                invoice.setLineItems(findLineItemsByInvoiceId(invoice.getInvoiceId()));&#10;                invoices.add(invoice);&#10;            }&#10;        }&#10;        return invoices;&#10;    }&#10;    &#10;    // Find overdue invoices&#10;    public List&lt;Invoice&gt; findOverdueInvoices() throws SQLException {&#10;        String sql = &quot;SELECT i.invoice_id, i.booking_id, i.customer_id, i.invoice_number, &quot; +&#10;                    &quot;i.invoice_date, i.due_date, i.subtotal, i.tax_amount, i.discount_amount, &quot; +&#10;                    &quot;i.total_amount, i.payment_status, i.payment_date, i.payment_method, &quot; +&#10;                    &quot;i.notes, i.created_by, &quot; +&#10;                    &quot;c.first_name, c.last_name, c.email &quot; +&#10;                    &quot;FROM invoices i &quot; +&#10;                    &quot;JOIN customers c ON i.customer_id = c.customer_id &quot; +&#10;                    &quot;WHERE i.payment_status IN ('PENDING', 'OVERDUE') &quot; +&#10;                    &quot;AND i.due_date &lt; SYSDATE &quot; +&#10;                    &quot;ORDER BY i.due_date&quot;;&#10;        &#10;        List&lt;Invoice&gt; invoices = new ArrayList&lt;&gt;();&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            while (rs.next()) {&#10;                Invoice invoice = mapResultSetToInvoice(rs);&#10;                invoice.setLineItems(findLineItemsByInvoiceId(invoice.getInvoiceId()));&#10;                invoices.add(invoice);&#10;            }&#10;        }&#10;        return invoices;&#10;    }&#10;    &#10;    // Update invoice payment status&#10;    public void updatePaymentStatus(long invoiceId, Invoice.PaymentStatus paymentStatus, &#10;                                   Date paymentDate, String paymentMethod) throws SQLException {&#10;        String sql = &quot;UPDATE invoices SET payment_status = ?, payment_date = ?, payment_method = ? &quot; +&#10;                    &quot;WHERE invoice_id = ?&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setString(1, paymentStatus.name());&#10;            if (paymentDate != null) {&#10;                stmt.setTimestamp(2, new Timestamp(paymentDate.getTime()));&#10;            } else {&#10;                stmt.setNull(2, Types.TIMESTAMP);&#10;            }&#10;            stmt.setString(3, paymentMethod);&#10;            stmt.setLong(4, invoiceId);&#10;            &#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;    &#10;    // Update invoice&#10;    public void update(Invoice invoice) throws SQLException {&#10;        String sql = &quot;UPDATE invoices SET subtotal = ?, tax_amount = ?, discount_amount = ?, &quot; +&#10;                    &quot;total_amount = ?, payment_status = ?, payment_date = ?, payment_method = ?, &quot; +&#10;                    &quot;notes = ? WHERE invoice_id = ?&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setDouble(1, invoice.getSubtotal());&#10;            stmt.setDouble(2, invoice.getTaxAmount());&#10;            stmt.setDouble(3, invoice.getDiscountAmount());&#10;            stmt.setDouble(4, invoice.getTotalAmount());&#10;            stmt.setString(5, invoice.getPaymentStatusString());&#10;            if (invoice.getPaymentDate() != null) {&#10;                stmt.setTimestamp(6, new Timestamp(invoice.getPaymentDate().getTime()));&#10;            } else {&#10;                stmt.setNull(6, Types.TIMESTAMP);&#10;            }&#10;            stmt.setString(7, invoice.getPaymentMethod());&#10;            stmt.setString(8, invoice.getNotes());&#10;            stmt.setLong(9, invoice.getInvoiceId());&#10;            &#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;    &#10;    // Find line items by invoice ID&#10;    public List&lt;InvoiceLineItem&gt; findLineItemsByInvoiceId(long invoiceId) throws SQLException {&#10;        String sql = &quot;SELECT line_item_id, invoice_id, item_type, item_description, &quot; +&#10;                    &quot;quantity, unit_price, line_total, service_id, usage_id &quot; +&#10;                    &quot;FROM invoice_line_items WHERE invoice_id = ? ORDER BY line_item_id&quot;;&#10;        &#10;        List&lt;InvoiceLineItem&gt; lineItems = new ArrayList&lt;&gt;();&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setLong(1, invoiceId);&#10;            &#10;            try (ResultSet rs = stmt.executeQuery()) {&#10;                while (rs.next()) {&#10;                    lineItems.add(mapResultSetToInvoiceLineItem(rs));&#10;                }&#10;            }&#10;        }&#10;        return lineItems;&#10;    }&#10;    &#10;    // Get invoice statistics&#10;    public double getTotalRevenue() throws SQLException {&#10;        String sql = &quot;SELECT NVL(SUM(total_amount), 0) FROM invoices WHERE payment_status = 'PAID'&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            if (rs.next()) {&#10;                return rs.getDouble(1);&#10;            }&#10;        }&#10;        return 0.0;&#10;    }&#10;    &#10;    // Get pending payment amount&#10;    public double getPendingPaymentAmount() throws SQLException {&#10;        String sql = &quot;SELECT NVL(SUM(total_amount), 0) FROM invoices &quot; +&#10;                    &quot;WHERE payment_status IN ('PENDING', 'OVERDUE')&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            if (rs.next()) {&#10;                return rs.getDouble(1);&#10;            }&#10;        }&#10;        return 0.0;&#10;    }&#10;    &#10;    // Find invoice by number&#10;    public Invoice findByNumber(String invoiceNumber) throws SQLException {&#10;        String sql = &quot;SELECT * FROM invoices WHERE invoice_number = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement pstmt = conn.prepareStatement(sql)) {&#10;&#10;            pstmt.setString(1, invoiceNumber);&#10;&#10;            try (ResultSet rs = pstmt.executeQuery()) {&#10;                if (rs.next()) {&#10;                    return mapResultSetToInvoice(rs);&#10;                }&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;&#10;    // Find pending invoices&#10;    public List&lt;Invoice&gt; findPending() throws SQLException {&#10;        String sql = &quot;SELECT * FROM invoices WHERE payment_status = 'PENDING'&quot;;&#10;        List&lt;Invoice&gt; pendingInvoices = new ArrayList&lt;&gt;();&#10;&#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement pstmt = conn.prepareStatement(sql);&#10;             ResultSet rs = pstmt.executeQuery()) {&#10;&#10;            while (rs.next()) {&#10;                pendingInvoices.add(mapResultSetToInvoice(rs));&#10;            }&#10;        }&#10;        return pendingInvoices;&#10;    }&#10;&#10;    // Update invoice payment&#10;    public void updatePayment(long invoiceId, Invoice.PaymentStatus status,&#10;                            Date paymentDate, String paymentMethod) throws SQLException {&#10;        String sql = &quot;UPDATE invoices SET payment_status = ?, payment_date = ?, &quot; +&#10;                    &quot;payment_method = ? WHERE invoice_id = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement pstmt = conn.prepareStatement(sql)) {&#10;&#10;            pstmt.setString(1, status.name());&#10;            pstmt.setDate(2, new java.sql.Date(paymentDate.getTime()));&#10;            pstmt.setString(3, paymentMethod);&#10;            pstmt.setLong(4, invoiceId);&#10;&#10;            pstmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    // Helper method to map ResultSet to Invoice object&#10;    private Invoice mapResultSetToInvoice(ResultSet rs) throws SQLException {&#10;        Invoice invoice = new Invoice();&#10;        invoice.setInvoiceId(rs.getLong(&quot;invoice_id&quot;));&#10;        invoice.setBookingId(rs.getLong(&quot;booking_id&quot;));&#10;        invoice.setCustomerId(rs.getInt(&quot;customer_id&quot;));&#10;        invoice.setInvoiceNumber(rs.getString(&quot;invoice_number&quot;));&#10;        invoice.setInvoiceDate(rs.getTimestamp(&quot;invoice_date&quot;));&#10;        invoice.setDueDate(rs.getTimestamp(&quot;due_date&quot;));&#10;        invoice.setSubtotal(rs.getDouble(&quot;subtotal&quot;));&#10;        invoice.setTaxAmount(rs.getDouble(&quot;tax_amount&quot;));&#10;        invoice.setDiscountAmount(rs.getDouble(&quot;discount_amount&quot;));&#10;        invoice.setTotalAmount(rs.getDouble(&quot;total_amount&quot;));&#10;        invoice.setPaymentStatusFromString(rs.getString(&quot;payment_status&quot;));&#10;        invoice.setPaymentDate(rs.getTimestamp(&quot;payment_date&quot;));&#10;        invoice.setPaymentMethod(rs.getString(&quot;payment_method&quot;));&#10;        invoice.setNotes(rs.getString(&quot;notes&quot;));&#10;        invoice.setCreatedBy(rs.getString(&quot;created_by&quot;));&#10;        return invoice;&#10;    }&#10;    &#10;    // Helper method to map ResultSet to InvoiceLineItem object&#10;    private InvoiceLineItem mapResultSetToInvoiceLineItem(ResultSet rs) throws SQLException {&#10;        InvoiceLineItem lineItem = new InvoiceLineItem();&#10;        lineItem.setLineItemId(rs.getLong(&quot;line_item_id&quot;));&#10;        lineItem.setInvoiceId(rs.getLong(&quot;invoice_id&quot;));&#10;        lineItem.setItemTypeFromString(rs.getString(&quot;item_type&quot;));&#10;        lineItem.setItemDescription(rs.getString(&quot;item_description&quot;));&#10;        lineItem.setQuantity(rs.getDouble(&quot;quantity&quot;));&#10;        lineItem.setUnitPrice(rs.getDouble(&quot;unit_price&quot;));&#10;        lineItem.setLineTotal(rs.getDouble(&quot;line_total&quot;));&#10;        &#10;        int serviceId = rs.getInt(&quot;service_id&quot;);&#10;        if (!rs.wasNull()) {&#10;            lineItem.setServiceId(serviceId);&#10;        }&#10;        &#10;        long usageId = rs.getLong(&quot;usage_id&quot;);&#10;        if (!rs.wasNull()) {&#10;            lineItem.setUsageId(usageId);&#10;        }&#10;        &#10;        return lineItem;&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.hotel.dao;&#10;&#10;import com.hotel.model.Invoice;&#10;import com.hotel.model.InvoiceLineItem;&#10;import com.hotel.util.DatabaseConnection;&#10;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;/**&#10; * Data Access Object for Invoice operations&#10; */&#10;public class InvoiceDAO {&#10;    &#10;    // Generate invoice using stored procedure&#10;    public Invoice generateInvoice(long bookingId, double taxRate, String createdBy) throws SQLException {&#10;        String sql = &quot;{CALL generate_invoice(?, ?, ?, ?, ?, ?, ?)}&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             CallableStatement stmt = conn.prepareCall(sql)) {&#10;            &#10;            stmt.setLong(1, bookingId);&#10;            stmt.setDouble(2, taxRate);&#10;            stmt.setString(3, createdBy);&#10;            stmt.registerOutParameter(4, Types.NUMERIC); // invoice_id&#10;            stmt.registerOutParameter(5, Types.VARCHAR); // invoice_number&#10;            stmt.registerOutParameter(6, Types.NUMERIC); // success&#10;            stmt.registerOutParameter(7, Types.VARCHAR); // message&#10;            &#10;            stmt.execute();&#10;            &#10;            int success = stmt.getInt(6);&#10;            String message = stmt.getString(7);&#10;            &#10;            if (success == 1) {&#10;                long invoiceId = stmt.getLong(4);&#10;                String invoiceNumber = stmt.getString(5);&#10;                &#10;                // Retrieve the generated invoice&#10;                Invoice invoice = findById(invoiceId);&#10;                if (invoice != null) {&#10;                    invoice.setInvoiceNumber(invoiceNumber);&#10;                }&#10;                return invoice;&#10;            } else {&#10;                throw new SQLException(&quot;Failed to generate invoice: &quot; + message);&#10;            }&#10;        }&#10;    }&#10;    &#10;    // Find invoice by ID&#10;    public Invoice findById(long invoiceId) throws SQLException {&#10;        String sql = &quot;SELECT i.invoice_id, i.booking_id, i.customer_id, i.invoice_number, &quot; +&#10;                    &quot;i.invoice_date, i.due_date, i.subtotal, i.tax_amount, i.discount_amount, &quot; +&#10;                    &quot;i.total_amount, i.payment_status, i.payment_date, i.payment_method, &quot; +&#10;                    &quot;i.notes, i.created_by, &quot; +&#10;                    &quot;c.first_name, c.last_name, c.email &quot; +&#10;                    &quot;FROM invoices i &quot; +&#10;                    &quot;JOIN customers c ON i.customer_id = c.customer_id &quot; +&#10;                    &quot;WHERE i.invoice_id = ?&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setLong(1, invoiceId);&#10;            &#10;            try (ResultSet rs = stmt.executeQuery()) {&#10;                if (rs.next()) {&#10;                    Invoice invoice = mapResultSetToInvoice(rs);&#10;                    // Load line items&#10;                    invoice.setLineItems(findLineItemsByInvoiceId(invoiceId));&#10;                    return invoice;&#10;                }&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;    &#10;    // Find invoice by invoice number&#10;    public Invoice findByInvoiceNumber(String invoiceNumber) throws SQLException {&#10;        String sql = &quot;SELECT i.invoice_id, i.booking_id, i.customer_id, i.invoice_number, &quot; +&#10;                    &quot;i.invoice_date, i.due_date, i.subtotal, i.tax_amount, i.discount_amount, &quot; +&#10;                    &quot;i.total_amount, i.payment_status, i.payment_date, i.payment_method, &quot; +&#10;                    &quot;i.notes, i.created_by, &quot; +&#10;                    &quot;c.first_name, c.last_name, c.email &quot; +&#10;                    &quot;FROM invoices i &quot; +&#10;                    &quot;JOIN customers c ON i.customer_id = c.customer_id &quot; +&#10;                    &quot;WHERE i.invoice_number = ?&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setString(1, invoiceNumber);&#10;            &#10;            try (ResultSet rs = stmt.executeQuery()) {&#10;                if (rs.next()) {&#10;                    Invoice invoice = mapResultSetToInvoice(rs);&#10;                    // Load line items&#10;                    invoice.setLineItems(findLineItemsByInvoiceId(invoice.getInvoiceId()));&#10;                    return invoice;&#10;                }&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;    &#10;    // Find invoices by customer ID&#10;    public List&lt;Invoice&gt; findByCustomerId(int customerId) throws SQLException {&#10;        String sql = &quot;SELECT i.invoice_id, i.booking_id, i.customer_id, i.invoice_number, &quot; +&#10;                    &quot;i.invoice_date, i.due_date, i.subtotal, i.tax_amount, i.discount_amount, &quot; +&#10;                    &quot;i.total_amount, i.payment_status, i.payment_date, i.payment_method, &quot; +&#10;                    &quot;i.notes, i.created_by, &quot; +&#10;                    &quot;c.first_name, c.last_name, c.email &quot; +&#10;                    &quot;FROM invoices i &quot; +&#10;                    &quot;JOIN customers c ON i.customer_id = c.customer_id &quot; +&#10;                    &quot;WHERE i.customer_id = ? ORDER BY i.invoice_date DESC&quot;;&#10;        &#10;        List&lt;Invoice&gt; invoices = new ArrayList&lt;&gt;();&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setInt(1, customerId);&#10;            &#10;            try (ResultSet rs = stmt.executeQuery()) {&#10;                while (rs.next()) {&#10;                    Invoice invoice = mapResultSetToInvoice(rs);&#10;                    // Load line items for each invoice&#10;                    invoice.setLineItems(findLineItemsByInvoiceId(invoice.getInvoiceId()));&#10;                    invoices.add(invoice);&#10;                }&#10;            }&#10;        }&#10;        return invoices;&#10;    }&#10;    &#10;    // Find invoices by booking ID&#10;    public List&lt;Invoice&gt; findByBookingId(long bookingId) throws SQLException {&#10;        String sql = &quot;SELECT i.invoice_id, i.booking_id, i.customer_id, i.invoice_number, &quot; +&#10;                    &quot;i.invoice_date, i.due_date, i.subtotal, i.tax_amount, i.discount_amount, &quot; +&#10;                    &quot;i.total_amount, i.payment_status, i.payment_date, i.payment_method, &quot; +&#10;                    &quot;i.notes, i.created_by, &quot; +&#10;                    &quot;c.first_name, c.last_name, c.email &quot; +&#10;                    &quot;FROM invoices i &quot; +&#10;                    &quot;JOIN customers c ON i.customer_id = c.customer_id &quot; +&#10;                    &quot;WHERE i.booking_id = ? ORDER BY i.invoice_date DESC&quot;;&#10;        &#10;        List&lt;Invoice&gt; invoices = new ArrayList&lt;&gt;();&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setLong(1, bookingId);&#10;            &#10;            try (ResultSet rs = stmt.executeQuery()) {&#10;                while (rs.next()) {&#10;                    Invoice invoice = mapResultSetToInvoice(rs);&#10;                    // Load line items for each invoice&#10;                    invoice.setLineItems(findLineItemsByInvoiceId(invoice.getInvoiceId()));&#10;                    invoices.add(invoice);&#10;                }&#10;            }&#10;        }&#10;        return invoices;&#10;    }&#10;    &#10;    // Find all invoices&#10;    public List&lt;Invoice&gt; findAll() throws SQLException {&#10;        String sql = &quot;SELECT i.invoice_id, i.booking_id, i.customer_id, i.invoice_number, &quot; +&#10;                    &quot;i.invoice_date, i.due_date, i.subtotal, i.tax_amount, i.discount_amount, &quot; +&#10;                    &quot;i.total_amount, i.payment_status, i.payment_date, i.payment_method, &quot; +&#10;                    &quot;i.notes, i.created_by, &quot; +&#10;                    &quot;c.first_name, c.last_name, c.email &quot; +&#10;                    &quot;FROM invoices i &quot; +&#10;                    &quot;JOIN customers c ON i.customer_id = c.customer_id &quot; +&#10;                    &quot;ORDER BY i.invoice_date DESC&quot;;&#10;        &#10;        List&lt;Invoice&gt; invoices = new ArrayList&lt;&gt;();&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            while (rs.next()) {&#10;                Invoice invoice = mapResultSetToInvoice(rs);&#10;                // Load line items for each invoice&#10;                invoice.setLineItems(findLineItemsByInvoiceId(invoice.getInvoiceId()));&#10;                invoices.add(invoice);&#10;            }&#10;        }&#10;        return invoices;&#10;    }&#10;    &#10;    // Find pending invoices&#10;    public List&lt;Invoice&gt; findPendingInvoices() throws SQLException {&#10;        String sql = &quot;SELECT i.invoice_id, i.booking_id, i.customer_id, i.invoice_number, &quot; +&#10;                    &quot;i.invoice_date, i.due_date, i.subtotal, i.tax_amount, i.discount_amount, &quot; +&#10;                    &quot;i.total_amount, i.payment_status, i.payment_date, i.payment_method, &quot; +&#10;                    &quot;i.notes, i.created_by, &quot; +&#10;                    &quot;c.first_name, c.last_name, c.email &quot; +&#10;                    &quot;FROM invoices i &quot; +&#10;                    &quot;JOIN customers c ON i.customer_id = c.customer_id &quot; +&#10;                    &quot;WHERE i.payment_status = 'PENDING' &quot; +&#10;                    &quot;ORDER BY i.due_date&quot;;&#10;        &#10;        List&lt;Invoice&gt; invoices = new ArrayList&lt;&gt;();&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            while (rs.next()) {&#10;                Invoice invoice = mapResultSetToInvoice(rs);&#10;                invoice.setLineItems(findLineItemsByInvoiceId(invoice.getInvoiceId()));&#10;                invoices.add(invoice);&#10;            }&#10;        }&#10;        return invoices;&#10;    }&#10;    &#10;    // Find overdue invoices&#10;    public List&lt;Invoice&gt; findOverdueInvoices() throws SQLException {&#10;        String sql = &quot;SELECT i.invoice_id, i.booking_id, i.customer_id, i.invoice_number, &quot; +&#10;                    &quot;i.invoice_date, i.due_date, i.subtotal, i.tax_amount, i.discount_amount, &quot; +&#10;                    &quot;i.total_amount, i.payment_status, i.payment_date, i.payment_method, &quot; +&#10;                    &quot;i.notes, i.created_by, &quot; +&#10;                    &quot;c.first_name, c.last_name, c.email &quot; +&#10;                    &quot;FROM invoices i &quot; +&#10;                    &quot;JOIN customers c ON i.customer_id = c.customer_id &quot; +&#10;                    &quot;WHERE i.payment_status IN ('PENDING', 'OVERDUE') &quot; +&#10;                    &quot;AND i.due_date &lt; SYSDATE &quot; +&#10;                    &quot;ORDER BY i.due_date&quot;;&#10;        &#10;        List&lt;Invoice&gt; invoices = new ArrayList&lt;&gt;();&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            while (rs.next()) {&#10;                Invoice invoice = mapResultSetToInvoice(rs);&#10;                invoice.setLineItems(findLineItemsByInvoiceId(invoice.getInvoiceId()));&#10;                invoices.add(invoice);&#10;            }&#10;        }&#10;        return invoices;&#10;    }&#10;    &#10;    // Update invoice payment status&#10;    public void updatePaymentStatus(long invoiceId, Invoice.PaymentStatus paymentStatus, &#10;                                   Date paymentDate, String paymentMethod) throws SQLException {&#10;        String sql = &quot;UPDATE invoices SET payment_status = ?, payment_date = ?, payment_method = ? &quot; +&#10;                    &quot;WHERE invoice_id = ?&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setString(1, paymentStatus.name());&#10;            if (paymentDate != null) {&#10;                stmt.setTimestamp(2, new Timestamp(paymentDate.getTime()));&#10;            } else {&#10;                stmt.setNull(2, Types.TIMESTAMP);&#10;            }&#10;            stmt.setString(3, paymentMethod);&#10;            stmt.setLong(4, invoiceId);&#10;            &#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;    &#10;    // Update invoice&#10;    public void update(Invoice invoice) throws SQLException {&#10;        String sql = &quot;UPDATE invoices SET subtotal = ?, tax_amount = ?, discount_amount = ?, &quot; +&#10;                    &quot;total_amount = ?, payment_status = ?, payment_date = ?, payment_method = ?, &quot; +&#10;                    &quot;notes = ? WHERE invoice_id = ?&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setDouble(1, invoice.getSubtotal());&#10;            stmt.setDouble(2, invoice.getTaxAmount());&#10;            stmt.setDouble(3, invoice.getDiscountAmount());&#10;            stmt.setDouble(4, invoice.getTotalAmount());&#10;            stmt.setString(5, invoice.getPaymentStatusString());&#10;            if (invoice.getPaymentDate() != null) {&#10;                stmt.setTimestamp(6, new Timestamp(invoice.getPaymentDate().getTime()));&#10;            } else {&#10;                stmt.setNull(6, Types.TIMESTAMP);&#10;            }&#10;            stmt.setString(7, invoice.getPaymentMethod());&#10;            stmt.setString(8, invoice.getNotes());&#10;            stmt.setLong(9, invoice.getInvoiceId());&#10;            &#10;            stmt.executeUpdate();&#10;        }&#10;    }&#10;    &#10;    // Find line items by invoice ID&#10;    public List&lt;InvoiceLineItem&gt; findLineItemsByInvoiceId(long invoiceId) throws SQLException {&#10;        String sql = &quot;SELECT line_item_id, invoice_id, item_type, item_description, &quot; +&#10;                    &quot;quantity, unit_price, line_total, service_id, usage_id &quot; +&#10;                    &quot;FROM invoice_line_items WHERE invoice_id = ? ORDER BY line_item_id&quot;;&#10;        &#10;        List&lt;InvoiceLineItem&gt; lineItems = new ArrayList&lt;&gt;();&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql)) {&#10;            &#10;            stmt.setLong(1, invoiceId);&#10;            &#10;            try (ResultSet rs = stmt.executeQuery()) {&#10;                while (rs.next()) {&#10;                    lineItems.add(mapResultSetToInvoiceLineItem(rs));&#10;                }&#10;            }&#10;        }&#10;        return lineItems;&#10;    }&#10;    &#10;    // Get invoice statistics&#10;    public double getTotalRevenue() throws SQLException {&#10;        String sql = &quot;SELECT NVL(SUM(total_amount), 0) FROM invoices WHERE payment_status = 'PAID'&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            if (rs.next()) {&#10;                return rs.getDouble(1);&#10;            }&#10;        }&#10;        return 0.0;&#10;    }&#10;    &#10;    // Get pending payment amount&#10;    public double getPendingPaymentAmount() throws SQLException {&#10;        String sql = &quot;SELECT NVL(SUM(total_amount), 0) FROM invoices &quot; +&#10;                    &quot;WHERE payment_status IN ('PENDING', 'OVERDUE')&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement stmt = conn.prepareStatement(sql);&#10;             ResultSet rs = stmt.executeQuery()) {&#10;            &#10;            if (rs.next()) {&#10;                return rs.getDouble(1);&#10;            }&#10;        }&#10;        return 0.0;&#10;    }&#10;    &#10;    // Find invoice by number&#10;    public Invoice findByNumber(String invoiceNumber) throws SQLException {&#10;        String sql = &quot;SELECT * FROM invoices WHERE invoice_number = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement pstmt = conn.prepareStatement(sql)) {&#10;&#10;            pstmt.setString(1, invoiceNumber);&#10;&#10;            try (ResultSet rs = pstmt.executeQuery()) {&#10;                if (rs.next()) {&#10;                    return mapResultSetToInvoice(rs);&#10;                }&#10;            }&#10;        }&#10;        return null;&#10;    }&#10;&#10;    // Find pending invoices&#10;    public List&lt;Invoice&gt; findPending() throws SQLException {&#10;        String sql = &quot;SELECT * FROM invoices WHERE payment_status = 'PENDING'&quot;;&#10;        List&lt;Invoice&gt; pendingInvoices = new ArrayList&lt;&gt;();&#10;&#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement pstmt = conn.prepareStatement(sql);&#10;             ResultSet rs = pstmt.executeQuery()) {&#10;&#10;            while (rs.next()) {&#10;                pendingInvoices.add(mapResultSetToInvoice(rs));&#10;            }&#10;        }&#10;        return pendingInvoices;&#10;    }&#10;&#10;    // Update invoice payment&#10;    public void updatePayment(long invoiceId, Invoice.PaymentStatus status,&#10;                            Date paymentDate, String paymentMethod) throws SQLException {&#10;        String sql = &quot;UPDATE invoices SET payment_status = ?, payment_date = ?, &quot; +&#10;                    &quot;payment_method = ? WHERE invoice_id = ?&quot;;&#10;&#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             PreparedStatement pstmt = conn.prepareStatement(sql)) {&#10;&#10;            pstmt.setString(1, status.name());&#10;            pstmt.setDate(2, new java.sql.Date(paymentDate.getTime()));&#10;            pstmt.setString(3, paymentMethod);&#10;            pstmt.setLong(4, invoiceId);&#10;&#10;            pstmt.executeUpdate();&#10;        }&#10;    }&#10;&#10;    // Helper method to map ResultSet to Invoice object&#10;    private Invoice mapResultSetToInvoice(ResultSet rs) throws SQLException {&#10;        Invoice invoice = new Invoice();&#10;        invoice.setInvoiceId(rs.getLong(&quot;invoice_id&quot;));&#10;        invoice.setBookingId(rs.getLong(&quot;booking_id&quot;));&#10;        invoice.setCustomerId(rs.getInt(&quot;customer_id&quot;));&#10;        invoice.setInvoiceNumber(rs.getString(&quot;invoice_number&quot;));&#10;        invoice.setInvoiceDate(rs.getTimestamp(&quot;invoice_date&quot;));&#10;        invoice.setDueDate(rs.getTimestamp(&quot;due_date&quot;));&#10;        invoice.setSubtotal(rs.getDouble(&quot;subtotal&quot;));&#10;        invoice.setTaxAmount(rs.getDouble(&quot;tax_amount&quot;));&#10;        invoice.setDiscountAmount(rs.getDouble(&quot;discount_amount&quot;));&#10;        invoice.setTotalAmount(rs.getDouble(&quot;total_amount&quot;));&#10;        invoice.setPaymentStatusFromString(rs.getString(&quot;payment_status&quot;));&#10;        invoice.setPaymentDate(rs.getTimestamp(&quot;payment_date&quot;));&#10;        invoice.setPaymentMethod(rs.getString(&quot;payment_method&quot;));&#10;        invoice.setNotes(rs.getString(&quot;notes&quot;));&#10;        invoice.setCreatedBy(rs.getString(&quot;created_by&quot;));&#10;        return invoice;&#10;    }&#10;    &#10;    // Helper method to map ResultSet to InvoiceLineItem object&#10;    private InvoiceLineItem mapResultSetToInvoiceLineItem(ResultSet rs) throws SQLException {&#10;        InvoiceLineItem lineItem = new InvoiceLineItem();&#10;        lineItem.setLineItemId(rs.getLong(&quot;line_item_id&quot;));&#10;        lineItem.setInvoiceId(rs.getLong(&quot;invoice_id&quot;));&#10;        lineItem.setItemTypeFromString(rs.getString(&quot;item_type&quot;));&#10;        lineItem.setItemDescription(rs.getString(&quot;item_description&quot;));&#10;        lineItem.setQuantity(rs.getDouble(&quot;quantity&quot;));&#10;        lineItem.setUnitPrice(rs.getDouble(&quot;unit_price&quot;));&#10;        lineItem.setLineTotal(rs.getDouble(&quot;line_total&quot;));&#10;        &#10;        int serviceId = rs.getInt(&quot;service_id&quot;);&#10;        if (!rs.wasNull()) {&#10;            lineItem.setServiceId(serviceId);&#10;        }&#10;        &#10;        long usageId = rs.getLong(&quot;usage_id&quot;);&#10;        if (!rs.wasNull()) {&#10;            lineItem.setUsageId(usageId);&#10;        }&#10;        &#10;        return lineItem;&#10;    }&#10;&#10;    public Invoice generate(long bookingId, double taxRate, String createdBy) throws SQLException {&#10;        String sql = &quot;{CALL generate_invoice(?, ?, ?, ?, ?, ?, ?)}&quot;;&#10;        &#10;        try (Connection conn = DatabaseConnection.getConnection();&#10;             CallableStatement stmt = conn.prepareCall(sql)) {&#10;            &#10;            stmt.setLong(1, bookingId);&#10;            stmt.setDouble(2, taxRate);&#10;            stmt.setString(3, createdBy);&#10;            stmt.registerOutParameter(4, Types.NUMERIC); // invoice_id&#10;            stmt.registerOutParameter(5, Types.VARCHAR); // invoice_number&#10;            stmt.registerOutParameter(6, Types.NUMERIC); // success&#10;            stmt.registerOutParameter(7, Types.VARCHAR); // message&#10;            &#10;            stmt.execute();&#10;            &#10;            int success = stmt.getInt(6);&#10;            String message = stmt.getString(7);&#10;            &#10;            if (success == 1) {&#10;                long invoiceId = stmt.getLong(4);&#10;                String invoiceNumber = stmt.getString(5);&#10;                &#10;                // Retrieve the generated invoice&#10;                Invoice invoice = findById(invoiceId);&#10;                if (invoice != null) {&#10;                    invoice.setInvoiceNumber(invoiceNumber);&#10;                }&#10;                return invoice;&#10;            } else {&#10;                throw new SQLException(&quot;Failed to generate invoice: &quot; + message);&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/HotelRentalSystem/src/main/java/com/hotel/model/Booking.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/HotelRentalSystem/src/main/java/com/hotel/model/Booking.java" />
              <option name="originalContent" value="package com.hotel.model;&#10;&#10;import java.util.Date;&#10;&#10;public class Booking {&#10;    private long bookingId;&#10;    private int customerId;&#10;    private int roomId;&#10;    private Date checkInDate;&#10;    private Date checkOutDate;&#10;    private String bookingStatus;&#10;    private double totalAmount;&#10;    private double discountApplied;&#10;    private double extraCharges;&#10;    private Date createdDate;&#10;    private String createdBy;&#10;    private Date actualCheckIn;&#10;    private Date actualCheckOut;&#10;    private String specialRequests;&#10;    private String paymentStatus;&#10;    private Customer customer;&#10;    private Room room;&#10;&#10;    public Booking() {&#10;        this.customer = new Customer();&#10;        this.room = new Room();&#10;    }&#10;&#10;    public long getBookingId() { return bookingId; }&#10;    public void setBookingId(long bookingId) { this.bookingId = bookingId; }&#10;&#10;    public int getCustomerId() { return customerId; }&#10;    public void setCustomerId(int customerId) { this.customerId = customerId; }&#10;&#10;    public int getRoomId() { return roomId; }&#10;    public void setRoomId(int roomId) { this.roomId = roomId; }&#10;&#10;    public Date getCheckInDate() { return checkInDate; }&#10;    public void setCheckInDate(Date checkInDate) { this.checkInDate = checkInDate; }&#10;&#10;    public Date getCheckOutDate() { return checkOutDate; }&#10;    public void setCheckOutDate(Date checkOutDate) { this.checkOutDate = checkOutDate; }&#10;&#10;    public String getBookingStatus() { return bookingStatus; }&#10;    public void setBookingStatus(String bookingStatus) { this.bookingStatus = bookingStatus; }&#10;&#10;    public double getTotalAmount() { return totalAmount; }&#10;    public void setTotalAmount(double totalAmount) { this.totalAmount = totalAmount; }&#10;&#10;    public double getDiscountApplied() { return discountApplied; }&#10;    public void setDiscountApplied(double discountApplied) { this.discountApplied = discountApplied; }&#10;&#10;    public double getExtraCharges() { return extraCharges; }&#10;    public void setExtraCharges(double extraCharges) { this.extraCharges = extraCharges; }&#10;&#10;    public Date getCreatedDate() { return createdDate; }&#10;    public void setCreatedDate(Date createdDate) { this.createdDate = createdDate; }&#10;&#10;    public String getCreatedBy() { return createdBy; }&#10;    public void setCreatedBy(String createdBy) { this.createdBy = createdBy; }&#10;&#10;    public Date getActualCheckIn() { return actualCheckIn; }&#10;    public void setActualCheckIn(Date actualCheckIn) { this.actualCheckIn = actualCheckIn; }&#10;&#10;    public Date getActualCheckOut() { return actualCheckOut; }&#10;    public void setActualCheckOut(Date actualCheckOut) { this.actualCheckOut = actualCheckOut; }&#10;&#10;    public String getSpecialRequests() { return specialRequests; }&#10;    public void setSpecialRequests(String specialRequests) { this.specialRequests = specialRequests; }&#10;&#10;    public String getPaymentStatus() { return paymentStatus; }&#10;    public void setPaymentStatus(String paymentStatus) { this.paymentStatus = paymentStatus; }&#10;&#10;    public Customer getCustomer() { return customer; }&#10;    public void setCustomer(Customer customer) { this.customer = customer; }&#10;&#10;    public Room getRoom() { return room; }&#10;    public void setRoom(Room room) { this.room = room; }&#10;&#10;    public void setBookingStatusFromString(String status) {&#10;        this.bookingStatus = status;&#10;    }&#10;&#10;    public String getBookingStatusString() {&#10;        return bookingStatus != null ? bookingStatus : &quot;&quot;;&#10;    }&#10;&#10;    public String getPaymentStatusString() {&#10;        return paymentStatus != null ? paymentStatus : &quot;PENDING&quot;;&#10;    }&#10;&#10;    public int getNumberOfNights() {&#10;        if (checkInDate == null || checkOutDate == null) return 0;&#10;        long diffInMillies = checkOutDate.getTime() - checkInDate.getTime();&#10;        return (int) (diffInMillies / (1000 * 60 * 60 * 24));&#10;    }&#10;&#10;    public double getFinalAmount() {&#10;        return totalAmount + extraCharges - discountApplied;&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.hotel.model;&#10;&#10;import java.util.Date;&#10;&#10;public class Booking {&#10;    public enum BookingStatus {&#10;        CONFIRMED,&#10;        CHECKED_IN,&#10;        CHECKED_OUT,&#10;        CANCELLED,&#10;        NO_SHOW&#10;    }&#10;&#10;    private long bookingId;&#10;    private int customerId;&#10;    private int roomId;&#10;    private Date checkInDate;&#10;    private Date checkOutDate;&#10;    private String bookingStatus;&#10;    private double totalAmount;&#10;    private double discountApplied;&#10;    private double extraCharges;&#10;    private Date createdDate;&#10;    private String createdBy;&#10;    private Date actualCheckIn;&#10;    private Date actualCheckOut;&#10;    private String specialRequests;&#10;    private String paymentStatus;&#10;    private Customer customer;&#10;    private Room room;&#10;    private Date bookingDate;&#10;&#10;    public Booking() {&#10;        this.customer = new Customer();&#10;        this.room = new Room();&#10;        this.bookingDate = new Date();&#10;        this.bookingStatus = &quot;CONFIRMED&quot;;&#10;        this.paymentStatus = &quot;PENDING&quot;;&#10;    }&#10;&#10;    public long getBookingId() { return bookingId; }&#10;    public void setBookingId(long bookingId) { this.bookingId = bookingId; }&#10;&#10;    public int getCustomerId() { return customerId; }&#10;    public void setCustomerId(int customerId) { this.customerId = customerId; }&#10;&#10;    public int getRoomId() { return roomId; }&#10;    public void setRoomId(int roomId) { this.roomId = roomId; }&#10;&#10;    public Date getCheckInDate() { return checkInDate; }&#10;    public void setCheckInDate(Date checkInDate) { this.checkInDate = checkInDate; }&#10;&#10;    public Date getCheckOutDate() { return checkOutDate; }&#10;    public void setCheckOutDate(Date checkOutDate) { this.checkOutDate = checkOutDate; }&#10;&#10;    public String getBookingStatus() { return bookingStatus; }&#10;    public void setBookingStatus(String bookingStatus) { this.bookingStatus = bookingStatus; }&#10;&#10;    public double getTotalAmount() { return totalAmount; }&#10;    public void setTotalAmount(double totalAmount) { this.totalAmount = totalAmount; }&#10;&#10;    public double getDiscountApplied() { return discountApplied; }&#10;    public void setDiscountApplied(double discountApplied) { this.discountApplied = discountApplied; }&#10;&#10;    public double getExtraCharges() { return extraCharges; }&#10;    public void setExtraCharges(double extraCharges) { this.extraCharges = extraCharges; }&#10;&#10;    public Date getCreatedDate() { return createdDate; }&#10;    public void setCreatedDate(Date createdDate) { this.createdDate = createdDate; }&#10;&#10;    public String getCreatedBy() { return createdBy; }&#10;    public void setCreatedBy(String createdBy) { this.createdBy = createdBy; }&#10;&#10;    public Date getActualCheckIn() { return actualCheckIn; }&#10;    public void setActualCheckIn(Date actualCheckIn) { this.actualCheckIn = actualCheckIn; }&#10;&#10;    public Date getActualCheckOut() { return actualCheckOut; }&#10;    public void setActualCheckOut(Date actualCheckOut) { this.actualCheckOut = actualCheckOut; }&#10;&#10;    public String getSpecialRequests() { return specialRequests; }&#10;    public void setSpecialRequests(String specialRequests) { this.specialRequests = specialRequests; }&#10;&#10;    public String getPaymentStatus() { return paymentStatus; }&#10;    public void setPaymentStatus(String paymentStatus) { this.paymentStatus = paymentStatus; }&#10;&#10;    public Customer getCustomer() { return customer; }&#10;    public void setCustomer(Customer customer) { this.customer = customer; }&#10;&#10;    public Room getRoom() { return room; }&#10;    public void setRoom(Room room) { this.room = room; }&#10;&#10;    public Date getBookingDate() { return bookingDate; }&#10;    public void setBookingDate(Date bookingDate) { this.bookingDate = bookingDate; }&#10;&#10;    public String getBookingStatusString() {&#10;        return bookingStatus != null ? bookingStatus : &quot;&quot;;&#10;    }&#10;&#10;    public String getPaymentStatusString() {&#10;        return paymentStatus != null ? paymentStatus : &quot;PENDING&quot;;&#10;    }&#10;&#10;    public int getNumberOfNights() {&#10;        if (checkInDate == null || checkOutDate == null) return 0;&#10;        long diffInMillies = checkOutDate.getTime() - checkInDate.getTime();&#10;        return (int) (diffInMillies / (1000 * 60 * 60 * 24));&#10;    }&#10;&#10;    public double getFinalAmount() {&#10;        return totalAmount + extraCharges - discountApplied;&#10;    }&#10;&#10;    public void setBookingStatusFromString(String status) {&#10;        this.bookingStatus = status;&#10;    }&#10;&#10;    public void setPaymentStatusFromString(String status) {&#10;        this.paymentStatus = status;&#10;    }&#10;&#10;    public BookingStatus getStatus() {&#10;        return BookingStatus.valueOf(bookingStatus);&#10;    }&#10;&#10;    public void setStatus(BookingStatus status) {&#10;        this.bookingStatus = status.name();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/HotelRentalSystem/src/main/java/com/hotel/model/Customer.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/HotelRentalSystem/src/main/java/com/hotel/model/Customer.java" />
              <option name="originalContent" value="package com.hotel.model;&#10;&#10;import java.util.Date;&#10;&#10;/**&#10; * Customer model class representing a hotel customer&#10; */&#10;public class Customer {&#10;    private int customerId;&#10;    private String firstName;&#10;    private String lastName;&#10;    private String email;&#10;    private String phone;&#10;    private String address;&#10;    private Date dateOfBirth;&#10;    private double totalSpent;&#10;    private Date registrationDate;&#10;    private boolean isActive;&#10;    private int loyaltyPoints;&#10;&#10;    // Default constructor&#10;    public Customer() {}&#10;&#10;    // Constructor with required fields&#10;    public Customer(String firstName, String lastName, String email, String phone) {&#10;        this.firstName = firstName;&#10;        this.lastName = lastName;&#10;        this.email = email;&#10;        this.phone = phone;&#10;        this.isActive = true;&#10;        this.registrationDate = new Date();&#10;        this.totalSpent = 0.0;&#10;        this.loyaltyPoints = 0;&#10;    }&#10;&#10;    // Full constructor&#10;    public Customer(int customerId, String firstName, String lastName, String email,&#10;                    String phone, String address, Date dateOfBirth, double totalSpent,&#10;                    Date registrationDate, boolean isActive, int loyaltyPoints) {&#10;        this.customerId = customerId;&#10;        this.firstName = firstName;&#10;        this.lastName = lastName;&#10;        this.email = email;&#10;        this.phone = phone;&#10;        this.address = address;&#10;        this.dateOfBirth = dateOfBirth;&#10;        this.totalSpent = totalSpent;&#10;        this.registrationDate = registrationDate;&#10;        this.isActive = isActive;&#10;        this.loyaltyPoints = loyaltyPoints;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public int getCustomerId() { return customerId; }&#10;    public void setCustomerId(int customerId) { this.customerId = customerId; }&#10;&#10;    public String getFirstName() { return firstName; }&#10;    public void setFirstName(String firstName) { this.firstName = firstName; }&#10;&#10;    public String getLastName() { return lastName; }&#10;    public void setLastName(String lastName) { this.lastName = lastName; }&#10;&#10;    public String getEmail() { return email; }&#10;    public void setEmail(String email) { this.email = email; }&#10;&#10;    public String getPhone() { return phone; }&#10;    public void setPhone(String phone) { this.phone = phone; }&#10;&#10;    public String getAddress() { return address; }&#10;    public void setAddress(String address) { this.address = address; }&#10;&#10;    public Date getDateOfBirth() { return dateOfBirth; }&#10;    public void setDateOfBirth(Date dateOfBirth) { this.dateOfBirth = dateOfBirth; }&#10;&#10;    public double getTotalSpent() { return totalSpent; }&#10;    public void setTotalSpent(double totalSpent) { this.totalSpent = totalSpent; }&#10;&#10;    public Date getRegistrationDate() { return registrationDate; }&#10;    public void setRegistrationDate(Date registrationDate) { this.registrationDate = registrationDate; }&#10;&#10;    public boolean isActive() { return isActive; }&#10;    public void setActive(boolean active) { isActive = active; }&#10;&#10;    public int getLoyaltyPoints() { return loyaltyPoints; }&#10;    public void setLoyaltyPoints(int loyaltyPoints) { this.loyaltyPoints = loyaltyPoints; }&#10;&#10;    public String getFullName() {&#10;        return firstName + &quot; &quot; + lastName;&#10;    }&#10;&#10;    public void setFullName(String fullName) {&#10;        String[] parts = fullName.split(&quot; &quot;, 2);&#10;        this.firstName = parts[0];&#10;        this.lastName = parts.length &gt; 1 ? parts[1] : &quot;&quot;;&#10;    }&#10;&#10;    // Utility methods&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Customer{&quot; +&#10;                &quot;customerId=&quot; + customerId +&#10;                &quot;, firstName='&quot; + firstName + '\'' +&#10;                &quot;, lastName='&quot; + lastName + '\'' +&#10;                &quot;, email='&quot; + email + '\'' +&#10;                &quot;, totalSpent=&quot; + totalSpent +&#10;                &quot;, loyaltyPoints=&quot; + loyaltyPoints +&#10;                '}';&#10;    }&#10;&#10;    @Override&#10;    public boolean equals(Object obj) {&#10;        if (this == obj) return true;&#10;        if (obj == null || getClass() != obj.getClass()) return false;&#10;        Customer customer = (Customer) obj;&#10;        return customerId == customer.customerId;&#10;    }&#10;&#10;    @Override&#10;    public int hashCode() {&#10;        return Integer.hashCode(customerId);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.hotel.model;&#10;&#10;import java.util.Date;&#10;&#10;/**&#10; * Customer model class representing a hotel customer&#10; */&#10;public class Customer {&#10;    private int customerId;&#10;    private String firstName;&#10;    private String lastName;&#10;    private String email;&#10;    private String phone;&#10;    private String address;&#10;    private Date dateOfBirth;&#10;    private double totalSpent;&#10;    private Date registrationDate;&#10;    private boolean isActive;&#10;    private int loyaltyPoints;&#10;&#10;    // Default constructor&#10;    public Customer() {}&#10;&#10;    // Constructor with required fields&#10;    public Customer(String firstName, String lastName, String email, String phone) {&#10;        this.firstName = firstName;&#10;        this.lastName = lastName;&#10;        this.email = email;&#10;        this.phone = phone;&#10;        this.isActive = true;&#10;        this.registrationDate = new Date();&#10;        this.totalSpent = 0.0;&#10;        this.loyaltyPoints = 0;&#10;    }&#10;&#10;    // Full constructor&#10;    public Customer(int customerId, String firstName, String lastName, String email,&#10;                    String phone, String address, Date dateOfBirth, double totalSpent,&#10;                    Date registrationDate, boolean isActive, int loyaltyPoints) {&#10;        this.customerId = customerId;&#10;        this.firstName = firstName;&#10;        this.lastName = lastName;&#10;        this.email = email;&#10;        this.phone = phone;&#10;        this.address = address;&#10;        this.dateOfBirth = dateOfBirth;&#10;        this.totalSpent = totalSpent;&#10;        this.registrationDate = registrationDate;&#10;        this.isActive = isActive;&#10;        this.loyaltyPoints = loyaltyPoints;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public int getCustomerId() { return customerId; }&#10;    public void setCustomerId(int customerId) { this.customerId = customerId; }&#10;&#10;    public String getFirstName() { return firstName; }&#10;    public void setFirstName(String firstName) { this.firstName = firstName; }&#10;&#10;    public String getLastName() { return lastName; }&#10;    public void setLastName(String lastName) { this.lastName = lastName; }&#10;&#10;    public String getEmail() { return email; }&#10;    public void setEmail(String email) { this.email = email; }&#10;&#10;    public String getPhone() {&#10;        return phone != null ? phone : &quot;&quot;;&#10;    }&#10;    public void setPhone(String phone) { this.phone = phone; }&#10;&#10;    public String getAddress() { return address; }&#10;    public void setAddress(String address) { this.address = address; }&#10;&#10;    public Date getDateOfBirth() { return dateOfBirth; }&#10;    public void setDateOfBirth(Date dateOfBirth) { this.dateOfBirth = dateOfBirth; }&#10;&#10;    public double getTotalSpent() {&#10;        return totalSpent;&#10;    }&#10;    public void setTotalSpent(double totalSpent) { this.totalSpent = totalSpent; }&#10;&#10;    public Date getRegistrationDate() { return registrationDate; }&#10;    public void setRegistrationDate(Date registrationDate) { this.registrationDate = registrationDate; }&#10;&#10;    public boolean isActive() { return isActive; }&#10;    public void setActive(boolean active) { isActive = active; }&#10;&#10;    public int getLoyaltyPoints() {&#10;        return loyaltyPoints;&#10;    }&#10;    public void setLoyaltyPoints(int loyaltyPoints) { this.loyaltyPoints = loyaltyPoints; }&#10;&#10;    public String getFullName() {&#10;        return firstName + &quot; &quot; + lastName;&#10;    }&#10;&#10;    public void setFullName(String fullName) {&#10;        String[] parts = fullName.split(&quot; &quot;, 2);&#10;        this.firstName = parts[0];&#10;        this.lastName = parts.length &gt; 1 ? parts[1] : &quot;&quot;;&#10;    }&#10;&#10;    // Utility methods&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Customer{&quot; +&#10;                &quot;customerId=&quot; + customerId +&#10;                &quot;, firstName='&quot; + firstName + '\'' +&#10;                &quot;, lastName='&quot; + lastName + '\'' +&#10;                &quot;, email='&quot; + email + '\'' +&#10;                &quot;, totalSpent=&quot; + totalSpent +&#10;                &quot;, loyaltyPoints=&quot; + loyaltyPoints +&#10;                '}';&#10;    }&#10;&#10;    @Override&#10;    public boolean equals(Object obj) {&#10;        if (this == obj) return true;&#10;        if (obj == null || getClass() != obj.getClass()) return false;&#10;        Customer customer = (Customer) obj;&#10;        return customerId == customer.customerId;&#10;    }&#10;&#10;    @Override&#10;    public int hashCode() {&#10;        return Integer.hashCode(customerId);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/HotelRentalSystem/src/main/java/com/hotel/model/RoomService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/HotelRentalSystem/src/main/java/com/hotel/model/RoomService.java" />
              <option name="originalContent" value="package com.hotel.model;&#10;&#10;import java.util.Date;&#10;&#10;/**&#10; * Model class representing a hotel room service&#10; */&#10;public class RoomService {&#10;    &#10;    public enum ServiceCategory {&#10;        HOUSEKEEPING, FOOD, LAUNDRY, MAINTENANCE, ENTERTAINMENT, TRANSPORTATION, ACCOMMODATION&#10;    }&#10;    &#10;    private int serviceId;&#10;    private String serviceName;&#10;    private String serviceDescription;&#10;    private ServiceCategory serviceCategory;&#10;    private double basePrice;&#10;    private boolean isActive;&#10;    private Date createdDate;&#10;    &#10;    // Constructors&#10;    public RoomService() {&#10;        this.isActive = true;&#10;        this.createdDate = new Date();&#10;    }&#10;    &#10;    public RoomService(String serviceName, String serviceDescription, &#10;                      ServiceCategory serviceCategory, double basePrice) {&#10;        this();&#10;        this.serviceName = serviceName;&#10;        this.serviceDescription = serviceDescription;&#10;        this.serviceCategory = serviceCategory;&#10;        this.basePrice = basePrice;&#10;    }&#10;    &#10;    // Getters and Setters&#10;    public int getServiceId() {&#10;        return serviceId;&#10;    }&#10;    &#10;    public void setServiceId(int serviceId) {&#10;        this.serviceId = serviceId;&#10;    }&#10;    &#10;    public String getServiceName() {&#10;        return serviceName;&#10;    }&#10;    &#10;    public void setServiceName(String serviceName) {&#10;        this.serviceName = serviceName;&#10;    }&#10;    &#10;    public String getServiceDescription() {&#10;        return serviceDescription;&#10;    }&#10;    &#10;    public void setServiceDescription(String serviceDescription) {&#10;        this.serviceDescription = serviceDescription;&#10;    }&#10;    &#10;    public ServiceCategory getServiceCategory() {&#10;        return serviceCategory;&#10;    }&#10;    &#10;    public void setServiceCategory(ServiceCategory serviceCategory) {&#10;        this.serviceCategory = serviceCategory;&#10;    }&#10;    &#10;    public String getServiceCategoryString() {&#10;        return serviceCategory != null ? serviceCategory.name() : &quot;&quot;;&#10;    }&#10;    &#10;    public void setServiceCategoryFromString(String categoryString) {&#10;        try {&#10;            this.serviceCategory = ServiceCategory.valueOf(categoryString);&#10;        } catch (IllegalArgumentException e) {&#10;            this.serviceCategory = ServiceCategory.HOUSEKEEPING;&#10;        }&#10;    }&#10;    &#10;    public double getBasePrice() {&#10;        return basePrice;&#10;    }&#10;    &#10;    public void setBasePrice(double basePrice) {&#10;        this.basePrice = basePrice;&#10;    }&#10;    &#10;    public boolean isActive() {&#10;        return isActive;&#10;    }&#10;    &#10;    public void setActive(boolean active) {&#10;        isActive = active;&#10;    }&#10;    &#10;    public Date getCreatedDate() {&#10;        return createdDate;&#10;    }&#10;    &#10;    public void setCreatedDate(Date createdDate) {&#10;        this.createdDate = createdDate;&#10;    }&#10;    &#10;    // Utility methods&#10;    public String getFormattedPrice() {&#10;        return String.format(&quot;$%.2f&quot;, basePrice);&#10;    }&#10;    &#10;    public String getDisplayName() {&#10;        return serviceName + &quot; (&quot; + getFormattedPrice() + &quot;)&quot;;&#10;    }&#10;    &#10;    @Override&#10;    public String toString() {&#10;        return &quot;RoomService{&quot; +&#10;                &quot;serviceId=&quot; + serviceId +&#10;                &quot;, serviceName='&quot; + serviceName + '\'' +&#10;                &quot;, serviceCategory=&quot; + serviceCategory +&#10;                &quot;, basePrice=&quot; + basePrice +&#10;                &quot;, isActive=&quot; + isActive +&#10;                '}';&#10;    }&#10;    &#10;    @Override&#10;    public boolean equals(Object obj) {&#10;        if (this == obj) return true;&#10;        if (obj == null || getClass() != obj.getClass()) return false;&#10;        &#10;        RoomService that = (RoomService) obj;&#10;        return serviceId == that.serviceId;&#10;    }&#10;    &#10;    @Override&#10;    public int hashCode() {&#10;        return Integer.hashCode(serviceId);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.hotel.model;&#13;&#10;&#13;&#10;import java.util.Date;&#13;&#10;&#13;&#10;/**&#13;&#10; * Model class representing a hotel room service&#13;&#10; */&#13;&#10;public class RoomService {&#13;&#10;    &#13;&#10;    public enum ServiceCategory {&#13;&#10;        HOUSEKEEPING, FOOD, LAUNDRY, MAINTENANCE, ENTERTAINMENT, TRANSPORTATION, ACCOMMODATION&#13;&#10;    }&#13;&#10;    &#13;&#10;    private int serviceId;&#13;&#10;    private String serviceName;&#13;&#10;    private String serviceDescription;&#13;&#10;    private ServiceCategory serviceCategory;&#13;&#10;    private double basePrice;&#13;&#10;    private boolean isActive;&#13;&#10;    private Date createdDate;&#13;&#10;    &#13;&#10;    // Constructors&#13;&#10;    public RoomService() {&#13;&#10;        this.isActive = true;&#13;&#10;        this.createdDate = new Date();&#13;&#10;    }&#13;&#10;    &#13;&#10;    public RoomService(String serviceName, String serviceDescription, &#13;&#10;                      ServiceCategory serviceCategory, double basePrice) {&#13;&#10;        this();&#13;&#10;        this.serviceName = serviceName;&#13;&#10;        this.serviceDescription = serviceDescription;&#13;&#10;        this.serviceCategory = serviceCategory;&#13;&#10;        this.basePrice = basePrice;&#13;&#10;    }&#13;&#10;    &#13;&#10;    // Getters and Setters&#13;&#10;    public int getServiceId() {&#13;&#10;        return serviceId;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public void setServiceId(int serviceId) {&#13;&#10;        this.serviceId = serviceId;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public String getServiceName() {&#13;&#10;        return serviceName;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public void setServiceName(String serviceName) {&#13;&#10;        this.serviceName = serviceName;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public String getServiceDescription() {&#13;&#10;        return serviceDescription;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public void setServiceDescription(String serviceDescription) {&#13;&#10;        this.serviceDescription = serviceDescription;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public ServiceCategory getServiceCategory() {&#13;&#10;        return serviceCategory;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public void setServiceCategory(ServiceCategory serviceCategory) {&#13;&#10;        this.serviceCategory = serviceCategory;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public String getServiceCategoryString() {&#13;&#10;        return serviceCategory != null ? serviceCategory.name() : &quot;&quot;;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public void setServiceCategoryFromString(String categoryString) {&#13;&#10;        try {&#13;&#10;            this.serviceCategory = ServiceCategory.valueOf(categoryString);&#13;&#10;        } catch (IllegalArgumentException e) {&#13;&#10;            this.serviceCategory = ServiceCategory.HOUSEKEEPING;&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    public double getBasePrice() {&#13;&#10;        return basePrice;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public void setBasePrice(double basePrice) {&#13;&#10;        this.basePrice = basePrice;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public boolean isActive() {&#13;&#10;        return isActive;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public void setActive(boolean active) {&#13;&#10;        isActive = active;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public Date getCreatedDate() {&#13;&#10;        return createdDate;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public void setCreatedDate(Date createdDate) {&#13;&#10;        this.createdDate = createdDate;&#13;&#10;    }&#13;&#10;    &#13;&#10;    // Utility methods&#13;&#10;    public String getFormattedPrice() {&#13;&#10;        return String.format(&quot;$%.2f&quot;, basePrice);&#13;&#10;    }&#13;&#10;    &#13;&#10;    public String getDisplayName() {&#13;&#10;        return serviceName + &quot; (&quot; + getFormattedPrice() + &quot;)&quot;;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public double getPrice() {&#13;&#10;        return this.basePrice;&#13;&#10;    }&#13;&#10;    &#13;&#10;    @Override&#13;&#10;    public String toString() {&#13;&#10;        return &quot;RoomService{&quot; +&#13;&#10;                &quot;serviceId=&quot; + serviceId +&#13;&#10;                &quot;, serviceName='&quot; + serviceName + '\'' +&#13;&#10;                &quot;, serviceCategory=&quot; + serviceCategory +&#13;&#10;                &quot;, basePrice=&quot; + basePrice +&#13;&#10;                &quot;, isActive=&quot; + isActive +&#13;&#10;                '}';&#13;&#10;    }&#13;&#10;    &#13;&#10;    @Override&#13;&#10;    public boolean equals(Object obj) {&#13;&#10;        if (this == obj) return true;&#13;&#10;        if (obj == null || getClass() != obj.getClass()) return false;&#13;&#10;        &#13;&#10;        RoomService that = (RoomService) obj;&#13;&#10;        return serviceId == that.serviceId;&#13;&#10;    }&#13;&#10;    &#13;&#10;    @Override&#13;&#10;    public int hashCode() {&#13;&#10;        return Integer.hashCode(serviceId);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/HotelRentalSystem/src/main/java/com/hotel/model/ServiceUsage.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/HotelRentalSystem/src/main/java/com/hotel/model/ServiceUsage.java" />
              <option name="originalContent" value="package com.hotel.model;&#10;&#10;import java.util.Date;&#10;&#10;/**&#10; * Model class representing customer service usage&#10; */&#10;public class ServiceUsage {&#10;    &#10;    private long usageId;&#10;    private long bookingId;&#10;    private int customerId;&#10;    private int serviceId;&#10;    private Date usageDate;&#10;    private int quantity;&#10;    private double unitPrice;&#10;    private double totalCost;&#10;    private boolean isComplimentary;&#10;    private String notes;&#10;    &#10;    // Related objects&#10;    private Customer customer;&#10;    private RoomService roomService;&#10;    private Booking booking;&#10;    &#10;    // Constructors&#10;    public ServiceUsage() {&#10;        this.usageDate = new Date();&#10;        this.quantity = 1;&#10;        this.isComplimentary = false;&#10;    }&#10;    &#10;    public ServiceUsage(long bookingId, int customerId, int serviceId, &#10;                       int quantity, double unitPrice) {&#10;        this();&#10;        this.bookingId = bookingId;&#10;        this.customerId = customerId;&#10;        this.serviceId = serviceId;&#10;        this.quantity = quantity;&#10;        this.unitPrice = unitPrice;&#10;        this.totalCost = quantity * unitPrice;&#10;    }&#10;    &#10;    // Getters and Setters&#10;    public long getUsageId() {&#10;        return usageId;&#10;    }&#10;    &#10;    public void setUsageId(long usageId) {&#10;        this.usageId = usageId;&#10;    }&#10;    &#10;    public long getBookingId() {&#10;        return bookingId;&#10;    }&#10;    &#10;    public void setBookingId(long bookingId) {&#10;        this.bookingId = bookingId;&#10;    }&#10;    &#10;    public int getCustomerId() {&#10;        return customerId;&#10;    }&#10;    &#10;    public void setCustomerId(int customerId) {&#10;        this.customerId = customerId;&#10;    }&#10;    &#10;    public int getServiceId() {&#10;        return serviceId;&#10;    }&#10;    &#10;    public void setServiceId(int serviceId) {&#10;        this.serviceId = serviceId;&#10;    }&#10;    &#10;    public Date getUsageDate() {&#10;        return usageDate;&#10;    }&#10;    &#10;    public void setUsageDate(Date usageDate) {&#10;        this.usageDate = usageDate;&#10;    }&#10;    &#10;    public int getQuantity() {&#10;        return quantity;&#10;    }&#10;    &#10;    public void setQuantity(int quantity) {&#10;        this.quantity = quantity;&#10;        // Recalculate total cost&#10;        this.totalCost = quantity * unitPrice;&#10;    }&#10;    &#10;    public double getUnitPrice() {&#10;        return unitPrice;&#10;    }&#10;    &#10;    public void setUnitPrice(double unitPrice) {&#10;        this.unitPrice = unitPrice;&#10;        // Recalculate total cost&#10;        this.totalCost = quantity * unitPrice;&#10;    }&#10;    &#10;    public double getTotalCost() {&#10;        return totalCost;&#10;    }&#10;    &#10;    public void setTotalCost(double totalCost) {&#10;        this.totalCost = totalCost;&#10;    }&#10;    &#10;    public boolean isComplimentary() {&#10;        return isComplimentary;&#10;    }&#10;    &#10;    public void setComplimentary(boolean complimentary) {&#10;        isComplimentary = complimentary;&#10;        if (complimentary) {&#10;            this.totalCost = 0.0;&#10;        } else {&#10;            this.totalCost = quantity * unitPrice;&#10;        }&#10;    }&#10;    &#10;    public String getNotes() {&#10;        return notes;&#10;    }&#10;    &#10;    public void setNotes(String notes) {&#10;        this.notes = notes;&#10;    }&#10;    &#10;    public Customer getCustomer() {&#10;        return customer;&#10;    }&#10;    &#10;    public void setCustomer(Customer customer) {&#10;        this.customer = customer;&#10;        if (customer != null) {&#10;            this.customerId = customer.getCustomerId();&#10;        }&#10;    }&#10;    &#10;    public RoomService getRoomService() {&#10;        return roomService;&#10;    }&#10;    &#10;    public void setRoomService(RoomService roomService) {&#10;        this.roomService = roomService;&#10;        if (roomService != null) {&#10;            this.serviceId = roomService.getServiceId();&#10;            this.unitPrice = roomService.getBasePrice();&#10;            // Recalculate total cost&#10;            this.totalCost = quantity * unitPrice;&#10;        }&#10;    }&#10;    &#10;    public Booking getBooking() {&#10;        return booking;&#10;    }&#10;    &#10;    public void setBooking(Booking booking) {&#10;        this.booking = booking;&#10;        if (booking != null) {&#10;            this.bookingId = booking.getBookingId();&#10;        }&#10;    }&#10;    &#10;    // Utility methods&#10;    public String getFormattedTotalCost() {&#10;        return String.format(&quot;$%.2f&quot;, totalCost);&#10;    }&#10;    &#10;    public String getFormattedUnitPrice() {&#10;        return String.format(&quot;$%.2f&quot;, unitPrice);&#10;    }&#10;    &#10;    public String getServiceName() {&#10;        return roomService != null ? roomService.getServiceName() : &quot;Unknown Service&quot;;&#10;    }&#10;    &#10;    public String getCustomerName() {&#10;        return customer != null ? customer.getFullName() : &quot;Unknown Customer&quot;;&#10;    }&#10;    &#10;    public String getComplimentaryStatus() {&#10;        return isComplimentary ? &quot;Complimentary&quot; : &quot;Paid&quot;;&#10;    }&#10;    &#10;    public void calculateTotalCost() {&#10;        if (isComplimentary) {&#10;            this.totalCost = 0.0;&#10;        } else {&#10;            this.totalCost = quantity * unitPrice;&#10;        }&#10;    }&#10;    &#10;    @Override&#10;    public String toString() {&#10;        return &quot;ServiceUsage{&quot; +&#10;                &quot;usageId=&quot; + usageId +&#10;                &quot;, bookingId=&quot; + bookingId +&#10;                &quot;, customerId=&quot; + customerId +&#10;                &quot;, serviceId=&quot; + serviceId +&#10;                &quot;, quantity=&quot; + quantity +&#10;                &quot;, unitPrice=&quot; + unitPrice +&#10;                &quot;, totalCost=&quot; + totalCost +&#10;                &quot;, isComplimentary=&quot; + isComplimentary +&#10;                &quot;, usageDate=&quot; + usageDate +&#10;                '}';&#10;    }&#10;    &#10;    @Override&#10;    public boolean equals(Object obj) {&#10;        if (this == obj) return true;&#10;        if (obj == null || getClass() != obj.getClass()) return false;&#10;        &#10;        ServiceUsage that = (ServiceUsage) obj;&#10;        return usageId == that.usageId;&#10;    }&#10;    &#10;    @Override&#10;    public int hashCode() {&#10;        return Long.hashCode(usageId);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.hotel.model;&#13;&#10;&#13;&#10;import java.util.Date;&#13;&#10;&#13;&#10;/**&#13;&#10; * Model class representing customer service usage&#13;&#10; */&#13;&#10;public class ServiceUsage {&#13;&#10;    &#13;&#10;    private long usageId;&#13;&#10;    private long bookingId;&#13;&#10;    private int customerId;&#13;&#10;    private int serviceId;&#13;&#10;    private Date usageDate;&#13;&#10;    private int quantity;&#13;&#10;    private double unitPrice;&#13;&#10;    private double totalCost;&#13;&#10;    private boolean isComplimentary;&#13;&#10;    private String notes;&#13;&#10;    &#13;&#10;    // Related objects&#13;&#10;    private Customer customer;&#13;&#10;    private RoomService roomService;&#13;&#10;    private Booking booking;&#13;&#10;    &#13;&#10;    // Constructors&#13;&#10;    public ServiceUsage() {&#13;&#10;        this.usageDate = new Date();&#13;&#10;        this.quantity = 1;&#13;&#10;        this.isComplimentary = false;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public ServiceUsage(long bookingId, int customerId, int serviceId, &#13;&#10;                       int quantity, double unitPrice) {&#13;&#10;        this();&#13;&#10;        this.bookingId = bookingId;&#13;&#10;        this.customerId = customerId;&#13;&#10;        this.serviceId = serviceId;&#13;&#10;        this.quantity = quantity;&#13;&#10;        this.unitPrice = unitPrice;&#13;&#10;        this.totalCost = quantity * unitPrice;&#13;&#10;    }&#13;&#10;    &#13;&#10;    // Getters and Setters&#13;&#10;    public long getUsageId() {&#13;&#10;        return usageId;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public void setUsageId(long usageId) {&#13;&#10;        this.usageId = usageId;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public long getBookingId() {&#13;&#10;        return bookingId;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public void setBookingId(long bookingId) {&#13;&#10;        this.bookingId = bookingId;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public int getCustomerId() {&#13;&#10;        return customerId;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public void setCustomerId(int customerId) {&#13;&#10;        this.customerId = customerId;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public int getServiceId() {&#13;&#10;        return serviceId;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public void setServiceId(int serviceId) {&#13;&#10;        this.serviceId = serviceId;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public Date getUsageDate() {&#13;&#10;        return usageDate;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public void setUsageDate(Date usageDate) {&#13;&#10;        this.usageDate = usageDate;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public int getQuantity() {&#13;&#10;        return quantity;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public void setQuantity(int quantity) {&#13;&#10;        this.quantity = quantity;&#13;&#10;        // Recalculate total cost&#13;&#10;        this.totalCost = quantity * unitPrice;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public double getUnitPrice() {&#13;&#10;        return unitPrice;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public void setUnitPrice(double unitPrice) {&#13;&#10;        this.unitPrice = unitPrice;&#13;&#10;        // Recalculate total cost&#13;&#10;        this.totalCost = quantity * unitPrice;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public double getTotalCost() {&#13;&#10;        return totalCost;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public void setTotalCost(double totalCost) {&#13;&#10;        this.totalCost = totalCost;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public boolean isComplimentary() {&#13;&#10;        return isComplimentary;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public void setComplimentary(boolean complimentary) {&#13;&#10;        isComplimentary = complimentary;&#13;&#10;        if (complimentary) {&#13;&#10;            this.totalCost = 0.0;&#13;&#10;        } else {&#13;&#10;            this.totalCost = quantity * unitPrice;&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    public String getNotes() {&#13;&#10;        return notes;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public void setNotes(String notes) {&#13;&#10;        this.notes = notes;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public Customer getCustomer() {&#13;&#10;        return customer;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public void setCustomer(Customer customer) {&#13;&#10;        this.customer = customer;&#13;&#10;        if (customer != null) {&#13;&#10;            this.customerId = customer.getCustomerId();&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    public RoomService getRoomService() {&#13;&#10;        return roomService;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public void setRoomService(RoomService roomService) {&#13;&#10;        this.roomService = roomService;&#13;&#10;        if (roomService != null) {&#13;&#10;            this.serviceId = roomService.getServiceId();&#13;&#10;            this.unitPrice = roomService.getBasePrice();&#13;&#10;            // Recalculate total cost&#13;&#10;            this.totalCost = quantity * unitPrice;&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    public Booking getBooking() {&#13;&#10;        return booking;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public void setBooking(Booking booking) {&#13;&#10;        this.booking = booking;&#13;&#10;        if (booking != null) {&#13;&#10;            this.bookingId = booking.getBookingId();&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    // Utility methods&#13;&#10;    public String getFormattedTotalCost() {&#13;&#10;        return String.format(&quot;$%.2f&quot;, totalCost);&#13;&#10;    }&#13;&#10;    &#13;&#10;    public String getFormattedUnitPrice() {&#13;&#10;        return String.format(&quot;$%.2f&quot;, unitPrice);&#13;&#10;    }&#13;&#10;    &#13;&#10;    public String getServiceName() {&#13;&#10;        return roomService != null ? roomService.getServiceName() : &quot;Unknown Service&quot;;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public String getCustomerName() {&#13;&#10;        return customer != null ? customer.getFullName() : &quot;Unknown Customer&quot;;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public String getComplimentaryStatus() {&#13;&#10;        return isComplimentary ? &quot;Complimentary&quot; : &quot;Paid&quot;;&#13;&#10;    }&#13;&#10;    &#13;&#10;    public void calculateTotalCost() {&#13;&#10;        if (isComplimentary) {&#13;&#10;            this.totalCost = 0.0;&#13;&#10;        } else {&#13;&#10;            this.totalCost = quantity * unitPrice;&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    @Override&#13;&#10;    public String toString() {&#13;&#10;        return &quot;ServiceUsage{&quot; +&#13;&#10;                &quot;usageId=&quot; + usageId +&#13;&#10;                &quot;, bookingId=&quot; + bookingId +&#13;&#10;                &quot;, customerId=&quot; + customerId +&#13;&#10;                &quot;, serviceId=&quot; + serviceId +&#13;&#10;                &quot;, quantity=&quot; + quantity +&#13;&#10;                &quot;, unitPrice=&quot; + unitPrice +&#13;&#10;                &quot;, totalCost=&quot; + totalCost +&#13;&#10;                &quot;, isComplimentary=&quot; + isComplimentary +&#13;&#10;                &quot;, usageDate=&quot; + usageDate +&#13;&#10;                '}';&#13;&#10;    }&#13;&#10;    &#13;&#10;    @Override&#13;&#10;    public boolean equals(Object obj) {&#13;&#10;        if (this == obj) return true;&#13;&#10;        if (obj == null || getClass() != obj.getClass()) return false;&#13;&#10;        &#13;&#10;        ServiceUsage that = (ServiceUsage) obj;&#13;&#10;        return usageId == that.usageId;&#13;&#10;    }&#13;&#10;    &#13;&#10;    @Override&#13;&#10;    public int hashCode() {&#13;&#10;        return Long.hashCode(usageId);&#13;&#10;    }&#13;&#10;&#13;&#10;    public RoomService getService() {&#13;&#10;        return this.roomService;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setService(RoomService service) {&#13;&#10;        this.roomService = service;&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/HotelRentalSystem/src/main/java/com/hotel/model/VIPMember.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/HotelRentalSystem/src/main/java/com/hotel/model/VIPMember.java" />
              <option name="originalContent" value="package com.hotel.model;&#10;&#10;import java.util.Date;&#10;&#10;/**&#10; * VIPMember model class representing VIP customers with special privileges&#10; */&#10;public class VIPMember {&#10;    public enum MembershipLevel {&#10;        GOLD, PLATINUM, DIAMOND&#10;    }&#10;    &#10;    private int vipId;&#10;    private int customerId;&#10;    private Customer customer; // For joined queries&#10;    private MembershipLevel membershipLevel;&#10;    private double discountPercentage;&#10;    private Date membershipStartDate;&#10;    private Date membershipEndDate;&#10;    private String benefits;&#10;    private boolean isActive;&#10;    private int bookingCount;&#10;&#10;    // Default constructor&#10;    public VIPMember() {&#10;        this.membershipLevel = MembershipLevel.GOLD;&#10;        this.discountPercentage = 10.0;&#10;        this.membershipStartDate = new Date();&#10;        this.isActive = true;&#10;    }&#10;    &#10;    // Constructor with required fields&#10;    public VIPMember(int customerId, MembershipLevel membershipLevel, double discountPercentage) {&#10;        this();&#10;        this.customerId = customerId;&#10;        this.membershipLevel = membershipLevel;&#10;        this.discountPercentage = discountPercentage;&#10;    }&#10;    &#10;    // Full constructor&#10;    public VIPMember(int vipId, int customerId, MembershipLevel membershipLevel, &#10;                    double discountPercentage, Date membershipStartDate, Date membershipEndDate,&#10;                    String benefits, boolean isActive) {&#10;        this.vipId = vipId;&#10;        this.customerId = customerId;&#10;        this.membershipLevel = membershipLevel;&#10;        this.discountPercentage = discountPercentage;&#10;        this.membershipStartDate = membershipStartDate;&#10;        this.membershipEndDate = membershipEndDate;&#10;        this.benefits = benefits;&#10;        this.isActive = isActive;&#10;    }&#10;    &#10;    // Getters and Setters&#10;    public int getVipId() { return vipId; }&#10;    public void setVipId(int vipId) { this.vipId = vipId; }&#10;    &#10;    public int getCustomerId() { return customerId; }&#10;    public void setCustomerId(int customerId) { this.customerId = customerId; }&#10;    &#10;    public Customer getCustomer() { return customer; }&#10;    public void setCustomer(Customer customer) { this.customer = customer; }&#10;    &#10;    public MembershipLevel getMembershipLevel() { return membershipLevel; }&#10;    public void setMembershipLevel(MembershipLevel membershipLevel) { this.membershipLevel = membershipLevel; }&#10;    &#10;    public double getDiscountPercentage() { return discountPercentage; }&#10;    public void setDiscountPercentage(double discountPercentage) { this.discountPercentage = discountPercentage; }&#10;    &#10;    public Date getMembershipStartDate() { return membershipStartDate; }&#10;    public void setMembershipStartDate(Date membershipStartDate) { this.membershipStartDate = membershipStartDate; }&#10;    &#10;    public Date getMembershipEndDate() { return membershipEndDate; }&#10;    public void setMembershipEndDate(Date membershipEndDate) { this.membershipEndDate = membershipEndDate; }&#10;    &#10;    public String getBenefits() { return benefits; }&#10;    public void setBenefits(String benefits) { this.benefits = benefits; }&#10;    &#10;    public boolean isActive() { return isActive; }&#10;    public void setActive(boolean active) { isActive = active; }&#10;    &#10;    public int getBookingCount() { return bookingCount; }&#10;    public void setBookingCount(int bookingCount) { this.bookingCount = bookingCount; }&#10;&#10;    // Utility methods&#10;    public boolean isExpired() {&#10;        return membershipEndDate != null &amp;&amp; membershipEndDate.before(new Date());&#10;    }&#10;    &#10;    public boolean isValidMembership() {&#10;        return isActive &amp;&amp; !isExpired();&#10;    }&#10;    &#10;    public String getMembershipLevelString() {&#10;        return membershipLevel.toString();&#10;    }&#10;    &#10;    public void setMembershipLevelFromString(String levelStr) {&#10;        try {&#10;            this.membershipLevel = MembershipLevel.valueOf(levelStr.toUpperCase());&#10;        } catch (IllegalArgumentException e) {&#10;            this.membershipLevel = MembershipLevel.GOLD;&#10;        }&#10;    }&#10;    &#10;    public String getFormattedDiscountPercentage() {&#10;        return String.format(&quot;%.1f%%&quot;, discountPercentage);&#10;    }&#10;&#10;    public static double getDefaultDiscountForLevel(MembershipLevel level) {&#10;        switch (level) {&#10;            case GOLD:&#10;                return 10.0;&#10;            case PLATINUM:&#10;                return 15.0;&#10;            case DIAMOND:&#10;                return 20.0;&#10;            default:&#10;                return 5.0;&#10;        }&#10;    }&#10;&#10;    public static String getDefaultBenefitsForLevel(MembershipLevel level) {&#10;        switch (level) {&#10;            case GOLD:&#10;                return &quot;- 10% discount on room rates\n&quot; +&#10;                       &quot;- Early check-in when available\n&quot; +&#10;                       &quot;- Welcome drink&quot;;&#10;            case PLATINUM:&#10;                return &quot;- 15% discount on room rates\n&quot; +&#10;                       &quot;- Early check-in and late check-out\n&quot; +&#10;                       &quot;- Welcome drink and fruit basket\n&quot; +&#10;                       &quot;- Access to executive lounge&quot;;&#10;            case DIAMOND:&#10;                return &quot;- 20% discount on room rates\n&quot; +&#10;                       &quot;- Flexible check-in and check-out\n&quot; +&#10;                       &quot;- Welcome drink and premium amenities\n&quot; +&#10;                       &quot;- Access to executive lounge\n&quot; +&#10;                       &quot;- Free spa treatment once per stay&quot;;&#10;            default:&#10;                return &quot;Basic VIP benefits&quot;;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;VIPMember{&quot; +&#10;                &quot;vipId=&quot; + vipId +&#10;                &quot;, customerId=&quot; + customerId +&#10;                &quot;, membershipLevel=&quot; + membershipLevel +&#10;                &quot;, discountPercentage=&quot; + discountPercentage +&#10;                &quot;, isActive=&quot; + isActive +&#10;                '}';&#10;    }&#10;&#10;    @Override&#10;    public boolean equals(Object obj) {&#10;        if (this == obj) return true;&#10;        if (obj == null || getClass() != obj.getClass()) return false;&#10;        VIPMember vipMember = (VIPMember) obj;&#10;        return vipId == vipMember.vipId;&#10;    }&#10;&#10;    @Override&#10;    public int hashCode() {&#10;        return Integer.hashCode(vipId);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.hotel.model;&#10;&#10;import java.util.Date;&#10;&#10;/**&#10; * VIPMember model class representing VIP customers with special privileges&#10; */&#10;public class VIPMember {&#10;    public enum MembershipLevel {&#10;        GOLD, PLATINUM, DIAMOND&#10;    }&#10;    &#10;    private int vipId;&#10;    private int customerId;&#10;    private Customer customer; // For joined queries&#10;    private MembershipLevel membershipLevel;&#10;    private double discountPercentage;&#10;    private Date membershipStartDate;&#10;    private Date membershipEndDate;&#10;    private String benefits;&#10;    private boolean isActive;&#10;    private int bookingCount;&#10;&#10;    // Default constructor&#10;    public VIPMember() {&#10;        this.membershipLevel = MembershipLevel.GOLD;&#10;        this.discountPercentage = 10.0;&#10;        this.membershipStartDate = new Date();&#10;        this.isActive = true;&#10;    }&#10;    &#10;    // Constructor with required fields&#10;    public VIPMember(int customerId, MembershipLevel membershipLevel, double discountPercentage) {&#10;        this();&#10;        this.customerId = customerId;&#10;        this.membershipLevel = membershipLevel;&#10;        this.discountPercentage = discountPercentage;&#10;    }&#10;    &#10;    // Full constructor&#10;    public VIPMember(int vipId, int customerId, MembershipLevel membershipLevel, &#10;                    double discountPercentage, Date membershipStartDate, Date membershipEndDate,&#10;                    String benefits, boolean isActive) {&#10;        this.vipId = vipId;&#10;        this.customerId = customerId;&#10;        this.membershipLevel = membershipLevel;&#10;        this.discountPercentage = discountPercentage;&#10;        this.membershipStartDate = membershipStartDate;&#10;        this.membershipEndDate = membershipEndDate;&#10;        this.benefits = benefits;&#10;        this.isActive = isActive;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public int getVipId() {&#10;        return vipId;&#10;    }&#10;&#10;    public void setVipId(int vipId) {&#10;        this.vipId = vipId;&#10;    }&#10;&#10;    public int getCustomerId() {&#10;        return customerId;&#10;    }&#10;&#10;    public void setCustomerId(int customerId) {&#10;        this.customerId = customerId;&#10;    }&#10;&#10;    public Customer getCustomer() {&#10;        return customer;&#10;    }&#10;&#10;    public void setCustomer(Customer customer) {&#10;        this.customer = customer;&#10;    }&#10;&#10;    public MembershipLevel getMembershipLevel() {&#10;        return membershipLevel;&#10;    }&#10;&#10;    public void setMembershipLevel(MembershipLevel membershipLevel) {&#10;        this.membershipLevel = membershipLevel;&#10;        // Update discount percentage based on level&#10;        switch (membershipLevel) {&#10;            case GOLD:&#10;                this.discountPercentage = 10.0;&#10;                break;&#10;            case PLATINUM:&#10;                this.discountPercentage = 15.0;&#10;                break;&#10;            case DIAMOND:&#10;                this.discountPercentage = 20.0;&#10;                break;&#10;        }&#10;    }&#10;&#10;    public String getMembershipLevelString() {&#10;        return membershipLevel != null ? membershipLevel.toString() : &quot;GOLD&quot;;&#10;    }&#10;&#10;    public double getDiscountPercentage() {&#10;        return discountPercentage;&#10;    }&#10;&#10;    public void setDiscountPercentage(double discountPercentage) {&#10;        this.discountPercentage = discountPercentage;&#10;    }&#10;&#10;    public String getFormattedDiscountPercentage() {&#10;        return String.format(&quot;%.1f%%&quot;, discountPercentage);&#10;    }&#10;&#10;    public Date getMembershipStartDate() {&#10;        return membershipStartDate;&#10;    }&#10;&#10;    public void setMembershipStartDate(Date membershipStartDate) {&#10;        this.membershipStartDate = membershipStartDate;&#10;    }&#10;&#10;    // Add missing setter methods&#10;    public void setJoinDate(Date joinDate) {&#10;        this.membershipStartDate = joinDate;&#10;    }&#10;&#10;    public void setUpgradeDate(Date upgradeDate) {&#10;        // For upgrade tracking - could be stored separately if needed&#10;        this.membershipStartDate = upgradeDate;&#10;    }&#10;&#10;    public Date getMembershipEndDate() {&#10;        return membershipEndDate;&#10;    }&#10;&#10;    public void setMembershipEndDate(Date membershipEndDate) {&#10;        this.membershipEndDate = membershipEndDate;&#10;    }&#10;&#10;    public String getBenefits() {&#10;        return benefits != null ? benefits : &quot;&quot;;&#10;    }&#10;&#10;    public void setBenefits(String benefits) {&#10;        this.benefits = benefits;&#10;    }&#10;&#10;    public void setSpecialRequests(String specialRequests) {&#10;        this.benefits = specialRequests; // Using benefits field for special requests&#10;    }&#10;&#10;    public boolean isActive() {&#10;        return isActive;&#10;    }&#10;&#10;    public void setActive(boolean active) {&#10;        isActive = active;&#10;    }&#10;&#10;    public int getBookingCount() {&#10;        return bookingCount;&#10;    }&#10;&#10;    public void setBookingCount(int bookingCount) {&#10;        this.bookingCount = bookingCount;&#10;    }&#10;&#10;    // Add missing setter for total spent (could be tracked separately)&#10;    private double totalSpent = 0.0;&#10;    &#10;    public double getTotalSpent() {&#10;        return totalSpent;&#10;    }&#10;&#10;    public void setTotalSpent(double totalSpent) {&#10;        this.totalSpent = totalSpent;&#10;    }&#10;&#10;    // Utility methods&#10;    public boolean isValidMembership() {&#10;        if (!isActive) return false;&#10;        if (membershipEndDate == null) return true;&#10;        return membershipEndDate.after(new java.util.Date());&#10;    }&#10;&#10;    public String getStatusString() {&#10;        return isValidMembership() ? &quot;Active&quot; : &quot;Inactive&quot;;&#10;    }&#10;&#10;    public long getDaysSinceJoining() {&#10;        if (membershipStartDate == null) return 0;&#10;        long diff = new java.util.Date().getTime() - membershipStartDate.getTime();&#10;        return diff / (24 * 60 * 60 * 1000);&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return String.format(&quot;VIPMember{vipId=%d, customerId=%d, level=%s, discount=%.1f%%, active=%s}&quot;,&#10;                vipId, customerId, membershipLevel, discountPercentage, isActive);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/HotelRentalSystem/src/main/java/com/hotel/view/panels/CustomerManagementPanel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/HotelRentalSystem/src/main/java/com/hotel/view/panels/CustomerManagementPanel.java" />
              <option name="originalContent" value="package com.hotel.view.panels;&#10;&#10;import com.hotel.model.Booking;&#10;import com.hotel.model.EnhancedHotelManagementService;&#10;&#10;import com.hotel.model.Customer;&#10;import com.hotel.model.VIPMember;&#10;&#10;import javax.swing.*;&#10;import javax.swing.table.DefaultTableModel;&#10;import javax.swing.table.TableRowSorter;&#10;import java.awt.*;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Date;&#10;import java.util.List;&#10;&#10;/**&#10; * Panel for managing hotel customers&#10; */&#10;public class CustomerManagementPanel extends JPanel implements RefreshablePanel {&#10;    &#10;    private EnhancedHotelManagementService hotelService;&#10;    &#10;    // Table components&#10;    private JTable customersTable;&#10;    private DefaultTableModel tableModel;&#10;    private TableRowSorter&lt;DefaultTableModel&gt; tableSorter;&#10;    private JScrollPane tableScrollPane;&#10;    &#10;    // Search components&#10;    private JTextField searchField;&#10;    private JButton searchButton;&#10;    private JButton clearSearchButton;&#10;    &#10;    // Action buttons&#10;    private JButton addCustomerButton;&#10;    private JButton editCustomerButton;&#10;    private JButton viewDetailsButton;&#10;    private JButton promoteToVIPButton;&#10;    private JButton refreshButton;&#10;    &#10;    private static final String[] COLUMN_NAMES = {&#10;        &quot;Customer ID&quot;, &quot;First Name&quot;, &quot;Last Name&quot;, &quot;Email&quot;, &quot;Phone&quot;, &#10;        &quot;Total Spent&quot;, &quot;Loyalty Points&quot;, &quot;Registration Date&quot;, &quot;VIP Status&quot;&#10;    };&#10;    &#10;    public CustomerManagementPanel(EnhancedHotelManagementService hotelService) {&#10;        this.hotelService = hotelService;&#10;        initializeComponents();&#10;        layoutComponents();&#10;        setupEventHandlers();&#10;        refreshData();&#10;    }&#10;    &#10;    private void initializeComponents() {&#10;        // Table setup&#10;        tableModel = new DefaultTableModel(COLUMN_NAMES, 0) {&#10;            @Override&#10;            public boolean isCellEditable(int row, int column) {&#10;                return false; // Make table read-only&#10;            }&#10;        };&#10;        &#10;        customersTable = new JTable(tableModel);&#10;        customersTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);&#10;        customersTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);&#10;        customersTable.getTableHeader().setReorderingAllowed(false);&#10;        &#10;        // Set column widths&#10;        customersTable.getColumnModel().getColumn(0).setPreferredWidth(80);  // Customer ID&#10;        customersTable.getColumnModel().getColumn(1).setPreferredWidth(100); // First Name&#10;        customersTable.getColumnModel().getColumn(2).setPreferredWidth(100); // Last Name&#10;        customersTable.getColumnModel().getColumn(3).setPreferredWidth(200); // Email&#10;        customersTable.getColumnModel().getColumn(4).setPreferredWidth(120); // Phone&#10;        customersTable.getColumnModel().getColumn(5).setPreferredWidth(100); // Total Spent&#10;        customersTable.getColumnModel().getColumn(6).setPreferredWidth(100); // Loyalty Points&#10;        customersTable.getColumnModel().getColumn(7).setPreferredWidth(120); // Registration Date&#10;        customersTable.getColumnModel().getColumn(8).setPreferredWidth(80);  // VIP Status&#10;        &#10;        // Table sorter&#10;        tableSorter = new TableRowSorter&lt;&gt;(tableModel);&#10;        customersTable.setRowSorter(tableSorter);&#10;        &#10;        tableScrollPane = new JScrollPane(customersTable);&#10;        tableScrollPane.setPreferredSize(new Dimension(0, 400));&#10;        &#10;        // Search components&#10;        searchField = new JTextField(25);&#10;        searchField.setToolTipText(&quot;Search by name, email, or phone number&quot;);&#10;        searchButton = new JButton(&quot;Search&quot;);&#10;        clearSearchButton = new JButton(&quot;Clear&quot;);&#10;        &#10;        // Action buttons&#10;        addCustomerButton = new JButton(&quot;Add Customer&quot;);&#10;        editCustomerButton = new JButton(&quot;Edit Customer&quot;);&#10;        viewDetailsButton = new JButton(&quot;View Details&quot;);&#10;        promoteToVIPButton = new JButton(&quot;Promote to VIP&quot;);&#10;        refreshButton = new JButton(&quot;Refresh&quot;);&#10;        &#10;        // Style buttons&#10;        addCustomerButton.setBackground(new Color(34, 139, 34));&#10;        addCustomerButton.setForeground(Color.WHITE);&#10;        promoteToVIPButton.setBackground(new Color(255, 215, 0));&#10;        promoteToVIPButton.setForeground(Color.BLACK);&#10;    }&#10;    &#10;    private void layoutComponents() {&#10;        setLayout(new BorderLayout(10, 10));&#10;        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));&#10;        &#10;        // Top panel - Search&#10;        JPanel topPanel = createTopPanel();&#10;        add(topPanel, BorderLayout.NORTH);&#10;        &#10;        // Center panel - Table&#10;        add(tableScrollPane, BorderLayout.CENTER);&#10;        &#10;        // Bottom panel - Action buttons&#10;        JPanel bottomPanel = createBottomPanel();&#10;        add(bottomPanel, BorderLayout.SOUTH);&#10;    }&#10;    &#10;    private JPanel createTopPanel() {&#10;        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT));&#10;        panel.setBorder(BorderFactory.createTitledBorder(&quot;Search Customers&quot;));&#10;        &#10;        panel.add(new JLabel(&quot;Search:&quot;));&#10;        panel.add(searchField);&#10;        panel.add(searchButton);&#10;        panel.add(clearSearchButton);&#10;        &#10;        return panel;&#10;    }&#10;    &#10;    private JPanel createBottomPanel() {&#10;        JPanel panel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));&#10;        panel.setBorder(BorderFactory.createTitledBorder(&quot;Actions&quot;));&#10;        &#10;        panel.add(addCustomerButton);&#10;        panel.add(editCustomerButton);&#10;        panel.add(viewDetailsButton);&#10;        panel.add(promoteToVIPButton);&#10;        panel.add(refreshButton);&#10;        &#10;        return panel;&#10;    }&#10;    &#10;    private void setupEventHandlers() {&#10;        // Search functionality&#10;        searchButton.addActionListener(e -&gt; performSearch());&#10;        searchField.addActionListener(e -&gt; performSearch());&#10;        clearSearchButton.addActionListener(e -&gt; clearSearch());&#10;        &#10;        // Action buttons&#10;        addCustomerButton.addActionListener(e -&gt; showAddCustomerDialog());&#10;        editCustomerButton.addActionListener(e -&gt; showEditCustomerDialog());&#10;        viewDetailsButton.addActionListener(e -&gt; viewCustomerDetails());&#10;        promoteToVIPButton.addActionListener(e -&gt; promoteToVIP());&#10;        refreshButton.addActionListener(e -&gt; refreshData());&#10;        &#10;        // Table selection&#10;        customersTable.getSelectionModel().addListSelectionListener(e -&gt; {&#10;            if (!e.getValueIsAdjusting()) {&#10;                updateButtonStates();&#10;            }&#10;        });&#10;    }&#10;    &#10;    private void performSearch() {&#10;        String searchText = searchField.getText().trim();&#10;        if (searchText.isEmpty()) {&#10;            refreshData();&#10;            return;&#10;        }&#10;        &#10;        try {&#10;            List&lt;Customer&gt; customers = hotelService.searchCustomers(searchText);&#10;            populateTable(customers);&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &#10;                &quot;Error searching customers: &quot; + e.getMessage(),&#10;                &quot;Search Error&quot;, &#10;                JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;    &#10;    private void clearSearch() {&#10;        searchField.setText(&quot;&quot;);&#10;        refreshData();&#10;    }&#10;    &#10;    private void showAddCustomerDialog() {&#10;        CustomerDialog dialog = new CustomerDialog((JFrame) SwingUtilities.getWindowAncestor(this), &#10;                                                  hotelService, null);&#10;        dialog.setVisible(true);&#10;        if (dialog.isCustomerSaved()) {&#10;            refreshData();&#10;        }&#10;    }&#10;    &#10;    private void showEditCustomerDialog() {&#10;        int selectedRow = customersTable.getSelectedRow();&#10;        if (selectedRow == -1) {&#10;            JOptionPane.showMessageDialog(this, &quot;Please select a customer to edit.&quot;);&#10;            return;&#10;        }&#10;        &#10;        int modelRow = customersTable.convertRowIndexToModel(selectedRow);&#10;        int customerId = (Integer) tableModel.getValueAt(modelRow, 0);&#10;        &#10;        try {&#10;            Customer customer = hotelService.findCustomerById(customerId);&#10;            if (customer != null) {&#10;                CustomerDialog dialog = new CustomerDialog((JFrame) SwingUtilities.getWindowAncestor(this), &#10;                                                          hotelService, customer);&#10;                dialog.setVisible(true);&#10;                if (dialog.isCustomerSaved()) {&#10;                    refreshData();&#10;                }&#10;            } else {&#10;                JOptionPane.showMessageDialog(this, &quot;Customer not found.&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &#10;                &quot;Error loading customer: &quot; + e.getMessage(),&#10;                &quot;Load Error&quot;, &#10;                JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;    &#10;    private void viewCustomerDetails() {&#10;        int selectedRow = customersTable.getSelectedRow();&#10;        if (selectedRow == -1) {&#10;            JOptionPane.showMessageDialog(this, &quot;Please select a customer to view details.&quot;);&#10;            return;&#10;        }&#10;        &#10;        int modelRow = customersTable.convertRowIndexToModel(selectedRow);&#10;        int customerId = (Integer) tableModel.getValueAt(modelRow, 0);&#10;        &#10;        try {&#10;            Customer customer = hotelService.findCustomerById(customerId);&#10;            if (customer != null) {&#10;                CustomerDetailsDialog dialog = new CustomerDetailsDialog(&#10;                    (JFrame) SwingUtilities.getWindowAncestor(this), customer, hotelService);&#10;                dialog.setVisible(true);&#10;            } else {&#10;                JOptionPane.showMessageDialog(this, &quot;Customer not found.&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &#10;                &quot;Error loading customer details: &quot; + e.getMessage(),&#10;                &quot;Details Error&quot;, &#10;                JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;    &#10;    private void promoteToVIP() {&#10;        int selectedRow = customersTable.getSelectedRow();&#10;        if (selectedRow == -1) {&#10;            JOptionPane.showMessageDialog(this, &quot;Please select a customer to promote to VIP.&quot;);&#10;            return;&#10;        }&#10;        &#10;        int modelRow = customersTable.convertRowIndexToModel(selectedRow);&#10;        int customerId = (Integer) tableModel.getValueAt(modelRow, 0);&#10;        String customerName = tableModel.getValueAt(modelRow, 1) + &quot; &quot; + tableModel.getValueAt(modelRow, 2);&#10;        String vipStatus = (String) tableModel.getValueAt(modelRow, 8);&#10;        &#10;        if (&quot;VIP&quot;.equals(vipStatus)) {&#10;            JOptionPane.showMessageDialog(this, &quot;Customer is already a VIP member.&quot;);&#10;            return;&#10;        }&#10;        &#10;        try {&#10;            String eligibility = hotelService.checkVIPEligibility(customerId);&#10;            &#10;            if (&quot;NOT_ELIGIBLE&quot;.equals(eligibility)) {&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Customer does not meet VIP spending requirements.&quot;,&#10;                    &quot;VIP Promotion&quot;, &#10;                    JOptionPane.INFORMATION_MESSAGE);&#10;                return;&#10;            }&#10;            &#10;            if (&quot;ALREADY_VIP&quot;.equals(eligibility)) {&#10;                JOptionPane.showMessageDialog(this, &quot;Customer is already a VIP member.&quot;);&#10;                return;&#10;            }&#10;            &#10;            // Show VIP level selection dialog&#10;            String[] levels = {&quot;GOLD&quot;, &quot;PLATINUM&quot;, &quot;DIAMOND&quot;};&#10;            String selectedLevel = (String) JOptionPane.showInputDialog(this,&#10;                &quot;Select VIP membership level for &quot; + customerName + &quot;:&quot;,&#10;                &quot;VIP Promotion&quot;,&#10;                JOptionPane.QUESTION_MESSAGE,&#10;                null,&#10;                levels,&#10;                eligibility);&#10;            &#10;            if (selectedLevel != null) {&#10;                VIPMember.MembershipLevel level = VIPMember.MembershipLevel.valueOf(selectedLevel);&#10;                VIPMember vipMember = hotelService.promoteToVIP(customerId, level);&#10;                &#10;                if (vipMember != null) {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        customerName + &quot; has been promoted to &quot; + selectedLevel + &quot; VIP member!&quot;,&#10;                        &quot;VIP Promotion Successful&quot;, &#10;                        JOptionPane.INFORMATION_MESSAGE);&#10;                    refreshData();&#10;                } else {&#10;                    JOptionPane.showMessageDialog(this, &quot;VIP promotion failed.&quot;);&#10;                }&#10;            }&#10;            &#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &#10;                &quot;Error promoting customer to VIP: &quot; + e.getMessage(),&#10;                &quot;VIP Promotion Error&quot;, &#10;                JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;    &#10;    private void updateButtonStates() {&#10;        boolean hasSelection = customersTable.getSelectedRow() != -1;&#10;        editCustomerButton.setEnabled(hasSelection);&#10;        viewDetailsButton.setEnabled(hasSelection);&#10;        promoteToVIPButton.setEnabled(hasSelection);&#10;    }&#10;    &#10;    @Override&#10;    public void refreshData() {&#10;        SwingUtilities.invokeLater(() -&gt; {&#10;            try {&#10;                List&lt;Customer&gt; customers = hotelService.getAllCustomers();&#10;                populateTable(customers);&#10;                updateButtonStates();&#10;            } catch (Exception e) {&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Error refreshing customer data: &quot; + e.getMessage(),&#10;                    &quot;Refresh Error&quot;, &#10;                    JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        });&#10;    }&#10;    &#10;    private void populateTable(List&lt;Customer&gt; customers) {&#10;        tableModel.setRowCount(0);&#10;        SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;MMM dd, yyyy&quot;);&#10;        &#10;        for (Customer customer : customers) {&#10;            // Check VIP status&#10;            String vipStatus = &quot;Regular&quot;;&#10;            try {&#10;                VIPMember vipMember = hotelService.getCustomerVIPStatus(customer.getCustomerId());&#10;                if (vipMember != null &amp;&amp; vipMember.isValidMembership()) {&#10;                    vipStatus = &quot;VIP&quot;;&#10;                }&#10;            } catch (Exception e) {&#10;                // Ignore VIP status check errors&#10;            }&#10;            &#10;            Object[] row = new Object[]{&#10;                customer.getCustomerId(),&#10;                customer.getFirstName(),&#10;                customer.getLastName(),&#10;                customer.getEmail(),&#10;                customer.getPhone(),&#10;                String.format(&quot;$%.2f&quot;, customer.getTotalSpent()),&#10;                customer.getLoyaltyPoints(),&#10;                customer.getRegistrationDate() != null ? &#10;                    dateFormat.format(customer.getRegistrationDate()) : &quot;N/A&quot;,&#10;                vipStatus&#10;            };&#10;            tableModel.addRow(row);&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Dialog for adding/editing customers&#10; */&#10;class CustomerDialog extends JDialog {&#10;    private EnhancedHotelManagementService hotelService;&#10;    private Customer customer;&#10;    private boolean customerSaved = false;&#10;    &#10;    private JTextField firstNameField;&#10;    private JTextField lastNameField;&#10;    private JTextField emailField;&#10;    private JTextField phoneField;&#10;    private JTextArea addressArea;&#10;    private JTextField dobField;&#10;    &#10;    public CustomerDialog(JFrame parent, EnhancedHotelManagementService hotelService, Customer customer) {&#10;        super(parent, customer == null ? &quot;Add Customer&quot; : &quot;Edit Customer&quot;, true);&#10;        this.hotelService = hotelService;&#10;        this.customer = customer;&#10;        initializeDialog();&#10;    }&#10;    &#10;    private void initializeDialog() {&#10;        setSize(450, 400);&#10;        setLocationRelativeTo(getParent());&#10;        setLayout(new BorderLayout());&#10;        &#10;        // Create form panel&#10;        JPanel formPanel = new JPanel(new GridBagLayout());&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(5, 5, 5, 5);&#10;        gbc.anchor = GridBagConstraints.WEST;&#10;        &#10;        // First Name&#10;        gbc.gridx = 0; gbc.gridy = 0;&#10;        formPanel.add(new JLabel(&quot;First Name:*&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        firstNameField = new JTextField(20);&#10;        formPanel.add(firstNameField, gbc);&#10;        &#10;        // Last Name&#10;        gbc.gridx = 0; gbc.gridy = 1;&#10;        formPanel.add(new JLabel(&quot;Last Name:*&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        lastNameField = new JTextField(20);&#10;        formPanel.add(lastNameField, gbc);&#10;        &#10;        // Email&#10;        gbc.gridx = 0; gbc.gridy = 2;&#10;        formPanel.add(new JLabel(&quot;Email:*&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        emailField = new JTextField(20);&#10;        formPanel.add(emailField, gbc);&#10;        &#10;        // Phone&#10;        gbc.gridx = 0; gbc.gridy = 3;&#10;        formPanel.add(new JLabel(&quot;Phone:*&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        phoneField = new JTextField(20);&#10;        formPanel.add(phoneField, gbc);&#10;        &#10;        // Address&#10;        gbc.gridx = 0; gbc.gridy = 4;&#10;        formPanel.add(new JLabel(&quot;Address:&quot;), gbc);&#10;        gbc.gridx = 1; gbc.fill = GridBagConstraints.BOTH;&#10;        addressArea = new JTextArea(3, 20);&#10;        JScrollPane addressScrollPane = new JScrollPane(addressArea);&#10;        formPanel.add(addressScrollPane, gbc);&#10;        &#10;        // Date of Birth&#10;        gbc.gridx = 0; gbc.gridy = 5; gbc.fill = GridBagConstraints.NONE;&#10;        formPanel.add(new JLabel(&quot;Date of Birth (YYYY-MM-DD):&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        dobField = new JTextField(20);&#10;        formPanel.add(dobField, gbc);&#10;        &#10;        // Required fields note&#10;        gbc.gridx = 0; gbc.gridy = 6; gbc.gridwidth = 2;&#10;        JLabel noteLabel = new JLabel(&quot;* Required fields&quot;);&#10;        noteLabel.setFont(noteLabel.getFont().deriveFont(Font.ITALIC));&#10;        noteLabel.setForeground(Color.GRAY);&#10;        formPanel.add(noteLabel, gbc);&#10;        &#10;        add(formPanel, BorderLayout.CENTER);&#10;        &#10;        // Button panel&#10;        JPanel buttonPanel = new JPanel(new FlowLayout());&#10;        JButton saveButton = new JButton(customer == null ? &quot;Add Customer&quot; : &quot;Update Customer&quot;);&#10;        JButton cancelButton = new JButton(&quot;Cancel&quot;);&#10;        &#10;        saveButton.addActionListener(e -&gt; saveCustomer());&#10;        cancelButton.addActionListener(e -&gt; dispose());&#10;        &#10;        buttonPanel.add(saveButton);&#10;        buttonPanel.add(cancelButton);&#10;        add(buttonPanel, BorderLayout.SOUTH);&#10;        &#10;        // Populate fields if editing&#10;        if (customer != null) {&#10;            populateFields();&#10;        }&#10;    }&#10;    &#10;    private void populateFields() {&#10;        firstNameField.setText(customer.getFirstName());&#10;        lastNameField.setText(customer.getLastName());&#10;        emailField.setText(customer.getEmail());&#10;        phoneField.setText(customer.getPhone());&#10;        addressArea.setText(customer.getAddress());&#10;        &#10;        if (customer.getDateOfBirth() != null) {&#10;            SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#10;            dobField.setText(dateFormat.format(customer.getDateOfBirth()));&#10;        }&#10;    }&#10;    &#10;    private void saveCustomer() {&#10;        try {&#10;            // Validate required fields&#10;            if (firstNameField.getText().trim().isEmpty() ||&#10;                lastNameField.getText().trim().isEmpty() ||&#10;                emailField.getText().trim().isEmpty() ||&#10;                phoneField.getText().trim().isEmpty()) {&#10;                JOptionPane.showMessageDialog(this, &quot;Please fill in all required fields.&quot;);&#10;                return;&#10;            }&#10;            &#10;            // Parse date of birth if provided&#10;            Date dateOfBirth = null;&#10;            if (!dobField.getText().trim().isEmpty()) {&#10;                try {&#10;                    SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#10;                    dateOfBirth = dateFormat.parse(dobField.getText().trim());&#10;                } catch (Exception e) {&#10;                    JOptionPane.showMessageDialog(this, &quot;Invalid date format. Please use YYYY-MM-DD.&quot;);&#10;                    return;&#10;                }&#10;            }&#10;            &#10;            if (customer == null) {&#10;                // Add new customer&#10;                Customer newCustomer = hotelService.registerCustomer(&#10;                    firstNameField.getText().trim(),&#10;                    lastNameField.getText().trim(),&#10;                    emailField.getText().trim(),&#10;                    phoneField.getText().trim(),&#10;                    addressArea.getText().trim(),&#10;                    dateOfBirth&#10;                );&#10;                &#10;                if (newCustomer != null) {&#10;                    customerSaved = true;&#10;                    JOptionPane.showMessageDialog(this, &quot;Customer added successfully!&quot;);&#10;                    dispose();&#10;                }&#10;            } else {&#10;                // Update existing customer&#10;                customer.setFirstName(firstNameField.getText().trim());&#10;                customer.setLastName(lastNameField.getText().trim());&#10;                customer.setEmail(emailField.getText().trim());&#10;                customer.setPhone(phoneField.getText().trim());&#10;                customer.setAddress(addressArea.getText().trim());&#10;                customer.setDateOfBirth(dateOfBirth);&#10;                &#10;                boolean success = hotelService.updateCustomer(customer);&#10;                if (success) {&#10;                    customerSaved = true;&#10;                    JOptionPane.showMessageDialog(this, &quot;Customer updated successfully!&quot;);&#10;                    dispose();&#10;                } else {&#10;                    JOptionPane.showMessageDialog(this, &quot;Failed to update customer.&quot;);&#10;                }&#10;            }&#10;            &#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &#10;                &quot;Error saving customer: &quot; + e.getMessage(),&#10;                &quot;Save Error&quot;, &#10;                JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;    &#10;    public boolean isCustomerSaved() {&#10;        return customerSaved;&#10;    }&#10;}&#10;&#10;/**&#10; * Dialog for displaying detailed customer information&#10; */&#10;class CustomerDetailsDialog extends JDialog {&#10;    private Customer customer;&#10;    private EnhancedHotelManagementService hotelService;&#10;    &#10;    public CustomerDetailsDialog(JFrame parent, Customer customer, EnhancedHotelManagementService hotelService) {&#10;        super(parent, &quot;Customer Details - &quot; + customer.getFullName(), true);&#10;        this.customer = customer;&#10;        this.hotelService = hotelService;&#10;        initializeDialog();&#10;    }&#10;    &#10;    private void initializeDialog() {&#10;        setSize(600, 500);&#10;        setLocationRelativeTo(getParent());&#10;        setLayout(new BorderLayout());&#10;        &#10;        // Create tabbed pane&#10;        JTabbedPane tabbedPane = new JTabbedPane();&#10;        &#10;        // Customer info tab&#10;        JPanel infoPanel = createCustomerInfoPanel();&#10;        tabbedPane.addTab(&quot;Customer Information&quot;, infoPanel);&#10;        &#10;        // Booking history tab&#10;        JPanel historyPanel = createBookingHistoryPanel();&#10;        tabbedPane.addTab(&quot;Booking History&quot;, historyPanel);&#10;        &#10;        add(tabbedPane, BorderLayout.CENTER);&#10;        &#10;        // Button panel&#10;        JPanel buttonPanel = new JPanel(new FlowLayout());&#10;        JButton closeButton = new JButton(&quot;Close&quot;);&#10;        closeButton.addActionListener(e -&gt; dispose());&#10;        buttonPanel.add(closeButton);&#10;        add(buttonPanel, BorderLayout.SOUTH);&#10;    }&#10;    &#10;    private JPanel createCustomerInfoPanel() {&#10;        JPanel panel = new JPanel(new GridBagLayout());&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(5, 5, 5, 5);&#10;        gbc.anchor = GridBagConstraints.WEST;&#10;        &#10;        SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;EEEE, MMMM dd, yyyy&quot;);&#10;        &#10;        int row = 0;&#10;        addDetailRow(panel, gbc, row++, &quot;Customer ID:&quot;, String.valueOf(customer.getCustomerId()));&#10;        addDetailRow(panel, gbc, row++, &quot;Full Name:&quot;, customer.getFullName());&#10;        addDetailRow(panel, gbc, row++, &quot;Email:&quot;, customer.getEmail());&#10;        addDetailRow(panel, gbc, row++, &quot;Phone:&quot;, customer.getPhone());&#10;        addDetailRow(panel, gbc, row++, &quot;Address:&quot;, customer.getAddress());&#10;        &#10;        if (customer.getDateOfBirth() != null) {&#10;            addDetailRow(panel, gbc, row++, &quot;Date of Birth:&quot;, dateFormat.format(customer.getDateOfBirth()));&#10;        }&#10;        &#10;        addDetailRow(panel, gbc, row++, &quot;Registration Date:&quot;, &#10;            customer.getRegistrationDate() != null ? dateFormat.format(customer.getRegistrationDate()) : &quot;N/A&quot;);&#10;        addDetailRow(panel, gbc, row++, &quot;Total Spent:&quot;, String.format(&quot;$%.2f&quot;, customer.getTotalSpent()));&#10;        addDetailRow(panel, gbc, row++, &quot;Loyalty Points:&quot;, String.valueOf(customer.getLoyaltyPoints()));&#10;        &#10;        // Check VIP status&#10;        try {&#10;            VIPMember vipMember = hotelService.getCustomerVIPStatus(customer.getCustomerId());&#10;            if (vipMember != null &amp;&amp; vipMember.isValidMembership()) {&#10;                addDetailRow(panel, gbc, row++, &quot;VIP Status:&quot;, &quot;VIP Member&quot;);&#10;                addDetailRow(panel, gbc, row++, &quot;VIP Level:&quot;, vipMember.getMembershipLevelString());&#10;                addDetailRow(panel, gbc, row++, &quot;VIP Discount:&quot;, vipMember.getFormattedDiscountPercentage());&#10;            } else {&#10;                addDetailRow(panel, gbc, row++, &quot;VIP Status:&quot;, &quot;Regular Customer&quot;);&#10;                &#10;                // Check eligibility&#10;                String eligibility = hotelService.checkVIPEligibility(customer.getCustomerId());&#10;                if (!&quot;NOT_ELIGIBLE&quot;.equals(eligibility) &amp;&amp; !&quot;ALREADY_VIP&quot;.equals(eligibility)) {&#10;                    addDetailRow(panel, gbc, row++, &quot;VIP Eligibility:&quot;, &quot;Eligible for &quot; + eligibility);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            addDetailRow(panel, gbc, row++, &quot;VIP Status:&quot;, &quot;Error checking status&quot;);&#10;        }&#10;        &#10;        return panel;&#10;    }&#10;    &#10;    private JPanel createBookingHistoryPanel() {&#10;        JPanel panel = new JPanel(new BorderLayout());&#10;        &#10;        try {&#10;            List&lt;Booking&gt; bookings = hotelService.getCustomerBookingHistory(customer.getCustomerId());&#10;            &#10;            if (bookings.isEmpty()) {&#10;                JLabel noBookingsLabel = new JLabel(&quot;No booking history found.&quot;, JLabel.CENTER);&#10;                panel.add(noBookingsLabel, BorderLayout.CENTER);&#10;            } else {&#10;                String[] columnNames = {&quot;Booking ID&quot;, &quot;Room&quot;, &quot;Check-In&quot;, &quot;Check-Out&quot;, &quot;Amount&quot;, &quot;Status&quot;};&#10;                DefaultTableModel historyModel = new DefaultTableModel(columnNames, 0);&#10;                &#10;                SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;MMM dd, yyyy&quot;);&#10;                for (Booking booking : bookings) {&#10;                    Object[] row = {&#10;                        booking.getBookingId(),&#10;                        booking.getRoom() != null ? booking.getRoom().getRoomNumber() : &quot;N/A&quot;,&#10;                        dateFormat.format(booking.getCheckInDate()),&#10;                        dateFormat.format(booking.getCheckOutDate()),&#10;                        String.format(&quot;$%.2f&quot;, booking.getTotalAmount()),&#10;                        booking.getBookingStatusString()&#10;                    };&#10;                    historyModel.addRow(row);&#10;                }&#10;                &#10;                JTable historyTable = new JTable(historyModel);&#10;                historyTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);&#10;                JScrollPane scrollPane = new JScrollPane(historyTable);&#10;                panel.add(scrollPane, BorderLayout.CENTER);&#10;            }&#10;        } catch (Exception e) {&#10;            JLabel errorLabel = new JLabel(&quot;Error loading booking history: &quot; + e.getMessage(), JLabel.CENTER);&#10;            panel.add(errorLabel, BorderLayout.CENTER);&#10;        }&#10;        &#10;        return panel;&#10;    }&#10;    &#10;    private void addDetailRow(JPanel panel, GridBagConstraints gbc, int row, String label, String value) {&#10;        gbc.gridx = 0; gbc.gridy = row;&#10;        JLabel labelComponent = new JLabel(label);&#10;        labelComponent.setFont(labelComponent.getFont().deriveFont(Font.BOLD));&#10;        panel.add(labelComponent, gbc);&#10;        &#10;        gbc.gridx = 1;&#10;        panel.add(new JLabel(value != null ? value : &quot;N/A&quot;), gbc);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.hotel.view.panels;&#10;&#10;import com.hotel.model.Booking;&#10;import com.hotel.model.EnhancedHotelManagementService;&#10;&#10;import com.hotel.model.Customer;&#10;import com.hotel.model.VIPMember;&#10;&#10;import javax.swing.*;&#10;import javax.swing.table.DefaultTableModel;&#10;import javax.swing.table.TableRowSorter;&#10;import java.awt.*;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Date;&#10;import java.util.List;&#10;&#10;/**&#10; * Panel for managing hotel customers&#10; */&#10;public class CustomerManagementPanel extends JPanel implements RefreshablePanel {&#10;    &#10;    private EnhancedHotelManagementService hotelService;&#10;    &#10;    // Table components&#10;    private JTable customersTable;&#10;    private DefaultTableModel tableModel;&#10;    private TableRowSorter&lt;DefaultTableModel&gt; tableSorter;&#10;    private JScrollPane tableScrollPane;&#10;    &#10;    // Search components&#10;    private JTextField searchField;&#10;    private JButton searchButton;&#10;    private JButton clearSearchButton;&#10;    &#10;    // Action buttons&#10;    private JButton addCustomerButton;&#10;    private JButton editCustomerButton;&#10;    private JButton viewDetailsButton;&#10;    private JButton promoteToVIPButton;&#10;    private JButton refreshButton;&#10;    &#10;    private static final String[] COLUMN_NAMES = {&#10;        &quot;Customer ID&quot;, &quot;First Name&quot;, &quot;Last Name&quot;, &quot;Email&quot;, &quot;Phone&quot;, &#10;        &quot;Total Spent&quot;, &quot;Loyalty Points&quot;, &quot;Registration Date&quot;, &quot;VIP Status&quot;&#10;    };&#10;    &#10;    public CustomerManagementPanel(EnhancedHotelManagementService hotelService) {&#10;        this.hotelService = hotelService;&#10;        initializeComponents();&#10;        layoutComponents();&#10;        setupEventHandlers();&#10;        refreshData();&#10;    }&#10;    &#10;    private void initializeComponents() {&#10;        // Table setup&#10;        tableModel = new DefaultTableModel(COLUMN_NAMES, 0) {&#10;            @Override&#10;            public boolean isCellEditable(int row, int column) {&#10;                return false; // Make table read-only&#10;            }&#10;        };&#10;        &#10;        customersTable = new JTable(tableModel);&#10;        customersTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);&#10;        customersTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);&#10;        customersTable.getTableHeader().setReorderingAllowed(false);&#10;        &#10;        // Set column widths&#10;        customersTable.getColumnModel().getColumn(0).setPreferredWidth(80);  // Customer ID&#10;        customersTable.getColumnModel().getColumn(1).setPreferredWidth(100); // First Name&#10;        customersTable.getColumnModel().getColumn(2).setPreferredWidth(100); // Last Name&#10;        customersTable.getColumnModel().getColumn(3).setPreferredWidth(200); // Email&#10;        customersTable.getColumnModel().getColumn(4).setPreferredWidth(120); // Phone&#10;        customersTable.getColumnModel().getColumn(5).setPreferredWidth(100); // Total Spent&#10;        customersTable.getColumnModel().getColumn(6).setPreferredWidth(100); // Loyalty Points&#10;        customersTable.getColumnModel().getColumn(7).setPreferredWidth(120); // Registration Date&#10;        customersTable.getColumnModel().getColumn(8).setPreferredWidth(80);  // VIP Status&#10;        &#10;        // Table sorter&#10;        tableSorter = new TableRowSorter&lt;&gt;(tableModel);&#10;        customersTable.setRowSorter(tableSorter);&#10;        &#10;        tableScrollPane = new JScrollPane(customersTable);&#10;        tableScrollPane.setPreferredSize(new Dimension(0, 400));&#10;        &#10;        // Search components&#10;        searchField = new JTextField(25);&#10;        searchField.setToolTipText(&quot;Search by name, email, or phone number&quot;);&#10;        searchButton = new JButton(&quot;Search&quot;);&#10;        clearSearchButton = new JButton(&quot;Clear&quot;);&#10;        &#10;        // Action buttons&#10;        addCustomerButton = new JButton(&quot;Add Customer&quot;);&#10;        editCustomerButton = new JButton(&quot;Edit Customer&quot;);&#10;        viewDetailsButton = new JButton(&quot;View Details&quot;);&#10;        promoteToVIPButton = new JButton(&quot;Promote to VIP&quot;);&#10;        refreshButton = new JButton(&quot;Refresh&quot;);&#10;        &#10;        // Style buttons&#10;        addCustomerButton.setBackground(new Color(34, 139, 34));&#10;        addCustomerButton.setForeground(Color.WHITE);&#10;        promoteToVIPButton.setBackground(new Color(255, 215, 0));&#10;        promoteToVIPButton.setForeground(Color.BLACK);&#10;    }&#10;    &#10;    private void layoutComponents() {&#10;        setLayout(new BorderLayout(10, 10));&#10;        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));&#10;        &#10;        // Top panel - Search&#10;        JPanel topPanel = createTopPanel();&#10;        add(topPanel, BorderLayout.NORTH);&#10;        &#10;        // Center panel - Table&#10;        add(tableScrollPane, BorderLayout.CENTER);&#10;        &#10;        // Bottom panel - Action buttons&#10;        JPanel bottomPanel = createBottomPanel();&#10;        add(bottomPanel, BorderLayout.SOUTH);&#10;    }&#10;    &#10;    private JPanel createTopPanel() {&#10;        JPanel panel = new JPanel(new FlowLayout(FlowLayout.LEFT));&#10;        panel.setBorder(BorderFactory.createTitledBorder(&quot;Search Customers&quot;));&#10;        &#10;        panel.add(new JLabel(&quot;Search:&quot;));&#10;        panel.add(searchField);&#10;        panel.add(searchButton);&#10;        panel.add(clearSearchButton);&#10;        &#10;        return panel;&#10;    }&#10;    &#10;    private JPanel createBottomPanel() {&#10;        JPanel panel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));&#10;        panel.setBorder(BorderFactory.createTitledBorder(&quot;Actions&quot;));&#10;        &#10;        panel.add(addCustomerButton);&#10;        panel.add(editCustomerButton);&#10;        panel.add(viewDetailsButton);&#10;        panel.add(promoteToVIPButton);&#10;        panel.add(refreshButton);&#10;        &#10;        return panel;&#10;    }&#10;    &#10;    private void setupEventHandlers() {&#10;        // Search functionality&#10;        searchButton.addActionListener(e -&gt; performSearch());&#10;        searchField.addActionListener(e -&gt; performSearch());&#10;        clearSearchButton.addActionListener(e -&gt; clearSearch());&#10;        &#10;        // Action buttons&#10;        addCustomerButton.addActionListener(e -&gt; showAddCustomerDialog());&#10;        editCustomerButton.addActionListener(e -&gt; showEditCustomerDialog());&#10;        viewDetailsButton.addActionListener(e -&gt; viewCustomerDetails());&#10;        promoteToVIPButton.addActionListener(e -&gt; promoteToVIP());&#10;        refreshButton.addActionListener(e -&gt; refreshData());&#10;        &#10;        // Table selection&#10;        customersTable.getSelectionModel().addListSelectionListener(e -&gt; {&#10;            if (!e.getValueIsAdjusting()) {&#10;                updateButtonStates();&#10;            }&#10;        });&#10;    }&#10;    &#10;    private void performSearch() {&#10;        String searchText = searchField.getText().trim();&#10;        if (searchText.isEmpty()) {&#10;            refreshData();&#10;            return;&#10;        }&#10;        &#10;        try {&#10;            List&lt;Customer&gt; customers = hotelService.searchCustomers(searchText);&#10;            populateTable(customers);&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &#10;                &quot;Error searching customers: &quot; + e.getMessage(),&#10;                &quot;Search Error&quot;, &#10;                JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;    &#10;    private void clearSearch() {&#10;        searchField.setText(&quot;&quot;);&#10;        refreshData();&#10;    }&#10;    &#10;    private void showAddCustomerDialog() {&#10;        CustomerDialog dialog = new CustomerDialog((JFrame) SwingUtilities.getWindowAncestor(this), &#10;                                                  hotelService, null);&#10;        dialog.setVisible(true);&#10;        if (dialog.isCustomerSaved()) {&#10;            refreshData();&#10;        }&#10;    }&#10;    &#10;    private void showEditCustomerDialog() {&#10;        int selectedRow = customersTable.getSelectedRow();&#10;        if (selectedRow == -1) {&#10;            JOptionPane.showMessageDialog(this, &quot;Please select a customer to edit.&quot;);&#10;            return;&#10;        }&#10;        &#10;        int modelRow = customersTable.convertRowIndexToModel(selectedRow);&#10;        int customerId = (Integer) tableModel.getValueAt(modelRow, 0);&#10;        &#10;        try {&#10;            Customer customer = hotelService.findCustomerById(customerId);&#10;            if (customer != null) {&#10;                CustomerDialog dialog = new CustomerDialog((JFrame) SwingUtilities.getWindowAncestor(this), &#10;                                                          hotelService, customer);&#10;                dialog.setVisible(true);&#10;                if (dialog.isCustomerSaved()) {&#10;                    refreshData();&#10;                }&#10;            } else {&#10;                JOptionPane.showMessageDialog(this, &quot;Customer not found.&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &#10;                &quot;Error loading customer: &quot; + e.getMessage(),&#10;                &quot;Load Error&quot;, &#10;                JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;    &#10;    private void viewCustomerDetails() {&#10;        int selectedRow = customersTable.getSelectedRow();&#10;        if (selectedRow == -1) {&#10;            JOptionPane.showMessageDialog(this, &quot;Please select a customer to view details.&quot;);&#10;            return;&#10;        }&#10;        &#10;        int modelRow = customersTable.convertRowIndexToModel(selectedRow);&#10;        int customerId = (Integer) tableModel.getValueAt(modelRow, 0);&#10;        &#10;        try {&#10;            Customer customer = hotelService.findCustomerById(customerId);&#10;            if (customer != null) {&#10;                CustomerDetailsDialog dialog = new CustomerDetailsDialog(&#10;                    (JFrame) SwingUtilities.getWindowAncestor(this), customer, hotelService);&#10;                dialog.setVisible(true);&#10;            } else {&#10;                JOptionPane.showMessageDialog(this, &quot;Customer not found.&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &#10;                &quot;Error loading customer details: &quot; + e.getMessage(),&#10;                &quot;Details Error&quot;, &#10;                JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;    &#10;    private void promoteToVIP() {&#10;        int selectedRow = customersTable.getSelectedRow();&#10;        if (selectedRow == -1) {&#10;            JOptionPane.showMessageDialog(this, &quot;Please select a customer to promote to VIP.&quot;);&#10;            return;&#10;        }&#10;        &#10;        int modelRow = customersTable.convertRowIndexToModel(selectedRow);&#10;        int customerId = (Integer) tableModel.getValueAt(modelRow, 0);&#10;        String customerName = tableModel.getValueAt(modelRow, 1) + &quot; &quot; + tableModel.getValueAt(modelRow, 2);&#10;        String vipStatus = (String) tableModel.getValueAt(modelRow, 8);&#10;        &#10;        if (&quot;VIP&quot;.equals(vipStatus)) {&#10;            JOptionPane.showMessageDialog(this, &quot;Customer is already a VIP member.&quot;);&#10;            return;&#10;        }&#10;        &#10;        try {&#10;            String eligibility = hotelService.checkVIPEligibility(customerId);&#10;            &#10;            if (&quot;NOT_ELIGIBLE&quot;.equals(eligibility)) {&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Customer does not meet VIP spending requirements.&quot;,&#10;                    &quot;VIP Promotion&quot;, &#10;                    JOptionPane.INFORMATION_MESSAGE);&#10;                return;&#10;            }&#10;            &#10;            if (&quot;ALREADY_VIP&quot;.equals(eligibility)) {&#10;                JOptionPane.showMessageDialog(this, &quot;Customer is already a VIP member.&quot;);&#10;                return;&#10;            }&#10;            &#10;            // Show VIP level selection dialog&#10;            String[] levels = {&quot;GOLD&quot;, &quot;PLATINUM&quot;, &quot;DIAMOND&quot;};&#10;            String selectedLevel = (String) JOptionPane.showInputDialog(this,&#10;                &quot;Select VIP membership level for &quot; + customerName + &quot;:&quot;,&#10;                &quot;VIP Promotion&quot;,&#10;                JOptionPane.QUESTION_MESSAGE,&#10;                null,&#10;                levels,&#10;                eligibility);&#10;            &#10;            if (selectedLevel != null) {&#10;                VIPMember.MembershipLevel level = VIPMember.MembershipLevel.valueOf(selectedLevel);&#10;                VIPMember vipMember = hotelService.promoteToVIP(customerId, level);&#10;                &#10;                if (vipMember != null) {&#10;                    JOptionPane.showMessageDialog(this, &#10;                        customerName + &quot; has been promoted to &quot; + selectedLevel + &quot; VIP member!&quot;,&#10;                        &quot;VIP Promotion Successful&quot;, &#10;                        JOptionPane.INFORMATION_MESSAGE);&#10;                    refreshData();&#10;                } else {&#10;                    JOptionPane.showMessageDialog(this, &quot;VIP promotion failed.&quot;);&#10;                }&#10;            }&#10;            &#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &#10;                &quot;Error promoting customer to VIP: &quot; + e.getMessage(),&#10;                &quot;VIP Promotion Error&quot;, &#10;                JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;    &#10;    private void updateButtonStates() {&#10;        boolean hasSelection = customersTable.getSelectedRow() != -1;&#10;        editCustomerButton.setEnabled(hasSelection);&#10;        viewDetailsButton.setEnabled(hasSelection);&#10;        promoteToVIPButton.setEnabled(hasSelection);&#10;    }&#10;    &#10;    @Override&#10;    public void refreshData() {&#10;        SwingUtilities.invokeLater(() -&gt; {&#10;            try {&#10;                List&lt;Customer&gt; customers = hotelService.getAllCustomers();&#10;                populateTable(customers);&#10;                updateButtonStates();&#10;            } catch (Exception e) {&#10;                JOptionPane.showMessageDialog(this, &#10;                    &quot;Error refreshing customer data: &quot; + e.getMessage(),&#10;                    &quot;Refresh Error&quot;, &#10;                    JOptionPane.ERROR_MESSAGE);&#10;            }&#10;        });&#10;    }&#10;    &#10;    private void populateTable(List&lt;Customer&gt; customers) {&#10;        tableModel.setRowCount(0);&#10;        SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;MMM dd, yyyy&quot;);&#10;        &#10;        for (Customer customer : customers) {&#10;            // Check VIP status&#10;            String vipStatus = &quot;Regular&quot;;&#10;            try {&#10;                VIPMember vipMember = hotelService.getCustomerVIPStatus(customer.getCustomerId());&#10;                if (vipMember != null &amp;&amp; vipMember.isValidMembership()) {&#10;                    vipStatus = &quot;VIP&quot;;&#10;                }&#10;            } catch (Exception e) {&#10;                // Ignore VIP status check errors&#10;            }&#10;            &#10;            Object[] row = new Object[]{&#10;                customer.getCustomerId(),&#10;                customer.getFirstName(),&#10;                customer.getLastName(),&#10;                customer.getEmail(),&#10;                customer.getPhone(),&#10;                String.format(&quot;$%.2f&quot;, customer.getTotalSpent()),&#10;                customer.getLoyaltyPoints(),&#10;                customer.getRegistrationDate() != null ? &#10;                    dateFormat.format(customer.getRegistrationDate()) : &quot;N/A&quot;,&#10;                vipStatus&#10;            };&#10;            tableModel.addRow(row);&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Dialog for adding/editing customers&#10; */&#10;class CustomerDialog extends JDialog {&#10;    private EnhancedHotelManagementService hotelService;&#10;    private Customer customer;&#10;    private boolean customerSaved = false;&#10;    &#10;    private JTextField firstNameField;&#10;    private JTextField lastNameField;&#10;    private JTextField emailField;&#10;    private JTextField phoneField;&#10;    private JTextArea addressArea;&#10;    private JTextField dobField;&#10;    &#10;    public CustomerDialog(JFrame parent, EnhancedHotelManagementService hotelService, Customer customer) {&#10;        super(parent, customer == null ? &quot;Add Customer&quot; : &quot;Edit Customer&quot;, true);&#10;        this.hotelService = hotelService;&#10;        this.customer = customer;&#10;        initializeDialog();&#10;    }&#10;    &#10;    private void initializeDialog() {&#10;        setSize(450, 400);&#10;        setLocationRelativeTo(getParent());&#10;        setLayout(new BorderLayout());&#10;        &#10;        // Create form panel&#10;        JPanel formPanel = new JPanel(new GridBagLayout());&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(5, 5, 5, 5);&#10;        gbc.anchor = GridBagConstraints.WEST;&#10;        &#10;        // First Name&#10;        gbc.gridx = 0; gbc.gridy = 0;&#10;        formPanel.add(new JLabel(&quot;First Name:*&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        firstNameField = new JTextField(20);&#10;        formPanel.add(firstNameField, gbc);&#10;        &#10;        // Last Name&#10;        gbc.gridx = 0; gbc.gridy = 1;&#10;        formPanel.add(new JLabel(&quot;Last Name:*&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        lastNameField = new JTextField(20);&#10;        formPanel.add(lastNameField, gbc);&#10;        &#10;        // Email&#10;        gbc.gridx = 0; gbc.gridy = 2;&#10;        formPanel.add(new JLabel(&quot;Email:*&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        emailField = new JTextField(20);&#10;        formPanel.add(emailField, gbc);&#10;        &#10;        // Phone&#10;        gbc.gridx = 0; gbc.gridy = 3;&#10;        formPanel.add(new JLabel(&quot;Phone:*&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        phoneField = new JTextField(20);&#10;        formPanel.add(phoneField, gbc);&#10;        &#10;        // Address&#10;        gbc.gridx = 0; gbc.gridy = 4;&#10;        formPanel.add(new JLabel(&quot;Address:&quot;), gbc);&#10;        gbc.gridx = 1; gbc.fill = GridBagConstraints.BOTH;&#10;        addressArea = new JTextArea(3, 20);&#10;        JScrollPane addressScrollPane = new JScrollPane(addressArea);&#10;        formPanel.add(addressScrollPane, gbc);&#10;        &#10;        // Date of Birth&#10;        gbc.gridx = 0; gbc.gridy = 5; gbc.fill = GridBagConstraints.NONE;&#10;        formPanel.add(new JLabel(&quot;Date of Birth (YYYY-MM-DD):&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        dobField = new JTextField(20);&#10;        formPanel.add(dobField, gbc);&#10;        &#10;        // Required fields note&#10;        gbc.gridx = 0; gbc.gridy = 6; gbc.gridwidth = 2;&#10;        JLabel noteLabel = new JLabel(&quot;* Required fields&quot;);&#10;        noteLabel.setFont(noteLabel.getFont().deriveFont(Font.ITALIC));&#10;        noteLabel.setForeground(Color.GRAY);&#10;        formPanel.add(noteLabel, gbc);&#10;        &#10;        add(formPanel, BorderLayout.CENTER);&#10;        &#10;        // Button panel&#10;        JPanel buttonPanel = new JPanel(new FlowLayout());&#10;        JButton saveButton = new JButton(customer == null ? &quot;Add Customer&quot; : &quot;Update Customer&quot;);&#10;        JButton cancelButton = new JButton(&quot;Cancel&quot;);&#10;        &#10;        saveButton.addActionListener(e -&gt; saveCustomer());&#10;        cancelButton.addActionListener(e -&gt; dispose());&#10;        &#10;        buttonPanel.add(saveButton);&#10;        buttonPanel.add(cancelButton);&#10;        add(buttonPanel, BorderLayout.SOUTH);&#10;        &#10;        // Populate fields if editing&#10;        if (customer != null) {&#10;            populateFields();&#10;        }&#10;    }&#10;    &#10;    private void populateFields() {&#10;        firstNameField.setText(customer.getFirstName());&#10;        lastNameField.setText(customer.getLastName());&#10;        emailField.setText(customer.getEmail());&#10;        phoneField.setText(customer.getPhone());&#10;        addressArea.setText(customer.getAddress());&#10;        &#10;        if (customer.getDateOfBirth() != null) {&#10;            SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#10;            dobField.setText(dateFormat.format(customer.getDateOfBirth()));&#10;        }&#10;    }&#10;    &#10;    private void saveCustomer() {&#10;        try {&#10;            // Validate required fields&#10;            if (firstNameField.getText().trim().isEmpty() ||&#10;                lastNameField.getText().trim().isEmpty() ||&#10;                emailField.getText().trim().isEmpty() ||&#10;                phoneField.getText().trim().isEmpty()) {&#10;                JOptionPane.showMessageDialog(this, &quot;Please fill in all required fields.&quot;);&#10;                return;&#10;            }&#10;            &#10;            // Parse date of birth if provided&#10;            Date dateOfBirth = null;&#10;            if (!dobField.getText().trim().isEmpty()) {&#10;                try {&#10;                    SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);&#10;                    dateOfBirth = dateFormat.parse(dobField.getText().trim());&#10;                } catch (Exception e) {&#10;                    JOptionPane.showMessageDialog(this, &quot;Invalid date format. Please use YYYY-MM-DD.&quot;);&#10;                    return;&#10;                }&#10;            }&#10;            &#10;            if (customer == null) {&#10;                // Add new customer&#10;                Customer newCustomer = hotelService.registerCustomer(&#10;                    firstNameField.getText().trim(),&#10;                    lastNameField.getText().trim(),&#10;                    emailField.getText().trim(),&#10;                    phoneField.getText().trim(),&#10;                    dateOfBirth,&#10;                    addressArea.getText().trim()&#10;                );&#10;                &#10;                if (newCustomer != null) {&#10;                    customerSaved = true;&#10;                    JOptionPane.showMessageDialog(this, &quot;Customer added successfully!&quot;);&#10;                    dispose();&#10;                }&#10;            } else {&#10;                // Update existing customer&#10;                customer.setFirstName(firstNameField.getText().trim());&#10;                customer.setLastName(lastNameField.getText().trim());&#10;                customer.setEmail(emailField.getText().trim());&#10;                customer.setPhone(phoneField.getText().trim());&#10;                customer.setAddress(addressArea.getText().trim());&#10;                customer.setDateOfBirth(dateOfBirth);&#10;                &#10;                boolean success = hotelService.updateCustomer(customer);&#10;                if (success) {&#10;                    customerSaved = true;&#10;                    JOptionPane.showMessageDialog(this, &quot;Customer updated successfully!&quot;);&#10;                    dispose();&#10;                } else {&#10;                    JOptionPane.showMessageDialog(this, &quot;Failed to update customer.&quot;);&#10;                }&#10;            }&#10;            &#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &#10;                &quot;Error saving customer: &quot; + e.getMessage(),&#10;                &quot;Save Error&quot;, &#10;                JOptionPane.ERROR_MESSAGE);&#10;        }&#10;    }&#10;    &#10;    public boolean isCustomerSaved() {&#10;        return customerSaved;&#10;    }&#10;}&#10;&#10;/**&#10; * Dialog for displaying detailed customer information&#10; */&#10;class CustomerDetailsDialog extends JDialog {&#10;    private Customer customer;&#10;    private EnhancedHotelManagementService hotelService;&#10;    &#10;    public CustomerDetailsDialog(JFrame parent, Customer customer, EnhancedHotelManagementService hotelService) {&#10;        super(parent, &quot;Customer Details - &quot; + customer.getFullName(), true);&#10;        this.customer = customer;&#10;        this.hotelService = hotelService;&#10;        initializeDialog();&#10;    }&#10;    &#10;    private void initializeDialog() {&#10;        setSize(600, 500);&#10;        setLocationRelativeTo(getParent());&#10;        setLayout(new BorderLayout());&#10;        &#10;        // Create tabbed pane&#10;        JTabbedPane tabbedPane = new JTabbedPane();&#10;        &#10;        // Customer info tab&#10;        JPanel infoPanel = createCustomerInfoPanel();&#10;        tabbedPane.addTab(&quot;Customer Information&quot;, infoPanel);&#10;        &#10;        // Booking history tab&#10;        JPanel historyPanel = createBookingHistoryPanel();&#10;        tabbedPane.addTab(&quot;Booking History&quot;, historyPanel);&#10;        &#10;        add(tabbedPane, BorderLayout.CENTER);&#10;        &#10;        // Button panel&#10;        JPanel buttonPanel = new JPanel(new FlowLayout());&#10;        JButton closeButton = new JButton(&quot;Close&quot;);&#10;        closeButton.addActionListener(e -&gt; dispose());&#10;        buttonPanel.add(closeButton);&#10;        add(buttonPanel, BorderLayout.SOUTH);&#10;    }&#10;    &#10;    private JPanel createCustomerInfoPanel() {&#10;        JPanel panel = new JPanel(new GridBagLayout());&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(5, 5, 5, 5);&#10;        gbc.anchor = GridBagConstraints.WEST;&#10;        &#10;        SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;EEEE, MMMM dd, yyyy&quot;);&#10;        &#10;        int row = 0;&#10;        addDetailRow(panel, gbc, row++, &quot;Customer ID:&quot;, String.valueOf(customer.getCustomerId()));&#10;        addDetailRow(panel, gbc, row++, &quot;Full Name:&quot;, customer.getFullName());&#10;        addDetailRow(panel, gbc, row++, &quot;Email:&quot;, customer.getEmail());&#10;        addDetailRow(panel, gbc, row++, &quot;Phone:&quot;, customer.getPhone());&#10;        addDetailRow(panel, gbc, row++, &quot;Address:&quot;, customer.getAddress());&#10;        &#10;        if (customer.getDateOfBirth() != null) {&#10;            addDetailRow(panel, gbc, row++, &quot;Date of Birth:&quot;, dateFormat.format(customer.getDateOfBirth()));&#10;        }&#10;        &#10;        addDetailRow(panel, gbc, row++, &quot;Registration Date:&quot;, &#10;            customer.getRegistrationDate() != null ? dateFormat.format(customer.getRegistrationDate()) : &quot;N/A&quot;);&#10;        addDetailRow(panel, gbc, row++, &quot;Total Spent:&quot;, String.format(&quot;$%.2f&quot;, customer.getTotalSpent()));&#10;        addDetailRow(panel, gbc, row++, &quot;Loyalty Points:&quot;, String.valueOf(customer.getLoyaltyPoints()));&#10;        &#10;        // Check VIP status&#10;        try {&#10;            VIPMember vipMember = hotelService.getCustomerVIPStatus(customer.getCustomerId());&#10;            if (vipMember != null &amp;&amp; vipMember.isValidMembership()) {&#10;                addDetailRow(panel, gbc, row++, &quot;VIP Status:&quot;, &quot;VIP Member&quot;);&#10;                addDetailRow(panel, gbc, row++, &quot;VIP Level:&quot;, vipMember.getMembershipLevelString());&#10;                addDetailRow(panel, gbc, row++, &quot;VIP Discount:&quot;, vipMember.getFormattedDiscountPercentage());&#10;            } else {&#10;                addDetailRow(panel, gbc, row++, &quot;VIP Status:&quot;, &quot;Regular Customer&quot;);&#10;                &#10;                // Check eligibility&#10;                String eligibility = hotelService.checkVIPEligibility(customer.getCustomerId());&#10;                if (!&quot;NOT_ELIGIBLE&quot;.equals(eligibility) &amp;&amp; !&quot;ALREADY_VIP&quot;.equals(eligibility)) {&#10;                    addDetailRow(panel, gbc, row++, &quot;VIP Eligibility:&quot;, &quot;Eligible for &quot; + eligibility);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            addDetailRow(panel, gbc, row++, &quot;VIP Status:&quot;, &quot;Error checking status&quot;);&#10;        }&#10;        &#10;        return panel;&#10;    }&#10;    &#10;    private JPanel createBookingHistoryPanel() {&#10;        JPanel panel = new JPanel(new BorderLayout());&#10;        &#10;        try {&#10;            List&lt;Booking&gt; bookings = hotelService.getCustomerBookingHistory(customer.getCustomerId());&#10;            &#10;            if (bookings.isEmpty()) {&#10;                JLabel noBookingsLabel = new JLabel(&quot;No booking history found.&quot;, JLabel.CENTER);&#10;                panel.add(noBookingsLabel, BorderLayout.CENTER);&#10;            } else {&#10;                String[] columnNames = {&quot;Booking ID&quot;, &quot;Room&quot;, &quot;Check-In&quot;, &quot;Check-Out&quot;, &quot;Amount&quot;, &quot;Status&quot;};&#10;                DefaultTableModel historyModel = new DefaultTableModel(columnNames, 0);&#10;                &#10;                SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;MMM dd, yyyy&quot;);&#10;                for (Booking booking : bookings) {&#10;                    Object[] row = {&#10;                        booking.getBookingId(),&#10;                        booking.getRoom() != null ? booking.getRoom().getRoomNumber() : &quot;N/A&quot;,&#10;                        dateFormat.format(booking.getCheckInDate()),&#10;                        dateFormat.format(booking.getCheckOutDate()),&#10;                        String.format(&quot;$%.2f&quot;, booking.getTotalAmount()),&#10;                        booking.getBookingStatusString()&#10;                    };&#10;                    historyModel.addRow(row);&#10;                }&#10;                &#10;                JTable historyTable = new JTable(historyModel);&#10;                historyTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);&#10;                JScrollPane scrollPane = new JScrollPane(historyTable);&#10;                panel.add(scrollPane, BorderLayout.CENTER);&#10;            }&#10;        } catch (Exception e) {&#10;            JLabel errorLabel = new JLabel(&quot;Error loading booking history: &quot; + e.getMessage(), JLabel.CENTER);&#10;            panel.add(errorLabel, BorderLayout.CENTER);&#10;        }&#10;        &#10;        return panel;&#10;    }&#10;    &#10;    private void addDetailRow(JPanel panel, GridBagConstraints gbc, int row, String label, String value) {&#10;        gbc.gridx = 0; gbc.gridy = row;&#10;        JLabel labelComponent = new JLabel(label);&#10;        labelComponent.setFont(labelComponent.getFont().deriveFont(Font.BOLD));&#10;        panel.add(labelComponent, gbc);&#10;        &#10;        gbc.gridx = 1;&#10;        panel.add(new JLabel(value != null ? value : &quot;N/A&quot;), gbc);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>